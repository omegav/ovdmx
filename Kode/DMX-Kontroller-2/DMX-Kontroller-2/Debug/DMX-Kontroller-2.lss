
DMX-Kontroller-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00802000  000024b0  00002544  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000088c  008020b4  008020b4  000025f8  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000550  00000000  00000000  00002628  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008dbd  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001cda  00000000  00000000  0000b935  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006a49  00000000  00000000  0000d60f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ee0  00000000  00000000  00014058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002d7e9  00000000  00000000  00014f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003db1  00000000  00000000  00042721  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d8  00000000  00000000  000464d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a83c  00000000  00000000  000469b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3a c1       	rjmp	.+628    	; 0x276 <__ctors_end>
       2:	00 00       	nop
       4:	57 c1       	rjmp	.+686    	; 0x2b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c1       	rjmp	.+682    	; 0x2b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	53 c1       	rjmp	.+678    	; 0x2b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c1       	rjmp	.+674    	; 0x2b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	4f c1       	rjmp	.+670    	; 0x2b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c8 c1       	rjmp	.+912    	; 0x3aa <__vector_6>
      1a:	00 00       	nop
      1c:	ee c1       	rjmp	.+988    	; 0x3fa <__vector_7>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__vector_8>
      22:	00 00       	nop
      24:	3a c2       	rjmp	.+1140   	; 0x49a <__vector_9>
      26:	00 00       	nop
      28:	45 c1       	rjmp	.+650    	; 0x2b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	43 c1       	rjmp	.+646    	; 0x2b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c1       	rjmp	.+642    	; 0x2b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	3f c1       	rjmp	.+638    	; 0x2b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	3d c1       	rjmp	.+634    	; 0x2b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3b c1       	rjmp	.+630    	; 0x2b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	39 c1       	rjmp	.+626    	; 0x2b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	37 c1       	rjmp	.+622    	; 0x2b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	35 c1       	rjmp	.+618    	; 0x2b4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	33 c1       	rjmp	.+614    	; 0x2b4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	31 c1       	rjmp	.+610    	; 0x2b4 <__bad_interrupt>
      52:	00 00       	nop
      54:	2f c1       	rjmp	.+606    	; 0x2b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c1       	rjmp	.+602    	; 0x2b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2b c1       	rjmp	.+598    	; 0x2b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	29 c1       	rjmp	.+594    	; 0x2b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	27 c1       	rjmp	.+590    	; 0x2b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	25 c1       	rjmp	.+586    	; 0x2b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	23 c1       	rjmp	.+582    	; 0x2b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	21 c1       	rjmp	.+578    	; 0x2b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	1f c1       	rjmp	.+574    	; 0x2b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	1d c1       	rjmp	.+570    	; 0x2b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1b c1       	rjmp	.+566    	; 0x2b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	19 c1       	rjmp	.+562    	; 0x2b4 <__bad_interrupt>
      82:	00 00       	nop
      84:	17 c1       	rjmp	.+558    	; 0x2b4 <__bad_interrupt>
      86:	00 00       	nop
      88:	15 c1       	rjmp	.+554    	; 0x2b4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	13 c1       	rjmp	.+550    	; 0x2b4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	11 c1       	rjmp	.+546    	; 0x2b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	0f c1       	rjmp	.+542    	; 0x2b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	0d c1       	rjmp	.+538    	; 0x2b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0b c1       	rjmp	.+534    	; 0x2b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	09 c1       	rjmp	.+530    	; 0x2b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	07 c1       	rjmp	.+526    	; 0x2b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	05 c1       	rjmp	.+522    	; 0x2b4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	03 c1       	rjmp	.+518    	; 0x2b4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	01 c1       	rjmp	.+514    	; 0x2b4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ff c0       	rjmp	.+510    	; 0x2b4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	fd c0       	rjmp	.+506    	; 0x2b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	fb c0       	rjmp	.+502    	; 0x2b4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	f9 c0       	rjmp	.+498    	; 0x2b4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f7 c0       	rjmp	.+494    	; 0x2b4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f5 c0       	rjmp	.+490    	; 0x2b4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f3 c0       	rjmp	.+486    	; 0x2b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f1 c0       	rjmp	.+482    	; 0x2b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ef c0       	rjmp	.+478    	; 0x2b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ed c0       	rjmp	.+474    	; 0x2b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	eb c0       	rjmp	.+470    	; 0x2b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e9 c0       	rjmp	.+466    	; 0x2b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e7 c0       	rjmp	.+462    	; 0x2b4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	e5 c0       	rjmp	.+458    	; 0x2b4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	e3 c0       	rjmp	.+454    	; 0x2b4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	e1 c0       	rjmp	.+450    	; 0x2b4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	df c0       	rjmp	.+446    	; 0x2b4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	dd c0       	rjmp	.+442    	; 0x2b4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	db c0       	rjmp	.+438    	; 0x2b4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	d9 c0       	rjmp	.+434    	; 0x2b4 <__bad_interrupt>
     102:	00 00       	nop
     104:	d7 c0       	rjmp	.+430    	; 0x2b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	d5 c0       	rjmp	.+426    	; 0x2b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	d3 c0       	rjmp	.+422    	; 0x2b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	d1 c0       	rjmp	.+418    	; 0x2b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	cf c0       	rjmp	.+414    	; 0x2b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	cd c0       	rjmp	.+410    	; 0x2b4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	cb c0       	rjmp	.+406    	; 0x2b4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	c9 c0       	rjmp	.+402    	; 0x2b4 <__bad_interrupt>
     122:	00 00       	nop
     124:	c7 c0       	rjmp	.+398    	; 0x2b4 <__bad_interrupt>
     126:	00 00       	nop
     128:	c5 c0       	rjmp	.+394    	; 0x2b4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	c3 c0       	rjmp	.+390    	; 0x2b4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	c1 c0       	rjmp	.+386    	; 0x2b4 <__bad_interrupt>
     132:	00 00       	nop
     134:	bf c0       	rjmp	.+382    	; 0x2b4 <__bad_interrupt>
     136:	00 00       	nop
     138:	bd c0       	rjmp	.+378    	; 0x2b4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	bb c0       	rjmp	.+374    	; 0x2b4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	b9 c0       	rjmp	.+370    	; 0x2b4 <__bad_interrupt>
     142:	00 00       	nop
     144:	b7 c0       	rjmp	.+366    	; 0x2b4 <__bad_interrupt>
     146:	00 00       	nop
     148:	b5 c0       	rjmp	.+362    	; 0x2b4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	b3 c0       	rjmp	.+358    	; 0x2b4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	b1 c0       	rjmp	.+354    	; 0x2b4 <__bad_interrupt>
     152:	00 00       	nop
     154:	af c0       	rjmp	.+350    	; 0x2b4 <__bad_interrupt>
     156:	00 00       	nop
     158:	ad c0       	rjmp	.+346    	; 0x2b4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ab c0       	rjmp	.+342    	; 0x2b4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	a9 c0       	rjmp	.+338    	; 0x2b4 <__bad_interrupt>
     162:	00 00       	nop
     164:	a7 c0       	rjmp	.+334    	; 0x2b4 <__bad_interrupt>
     166:	00 00       	nop
     168:	a5 c0       	rjmp	.+330    	; 0x2b4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	a3 c0       	rjmp	.+326    	; 0x2b4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	a1 c0       	rjmp	.+322    	; 0x2b4 <__bad_interrupt>
     172:	00 00       	nop
     174:	9f c0       	rjmp	.+318    	; 0x2b4 <__bad_interrupt>
     176:	00 00       	nop
     178:	9d c0       	rjmp	.+314    	; 0x2b4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	9b c0       	rjmp	.+310    	; 0x2b4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	99 c0       	rjmp	.+306    	; 0x2b4 <__bad_interrupt>
     182:	00 00       	nop
     184:	97 c0       	rjmp	.+302    	; 0x2b4 <__bad_interrupt>
     186:	00 00       	nop
     188:	95 c0       	rjmp	.+298    	; 0x2b4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	93 c0       	rjmp	.+294    	; 0x2b4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	91 c0       	rjmp	.+290    	; 0x2b4 <__bad_interrupt>
     192:	00 00       	nop
     194:	8f c0       	rjmp	.+286    	; 0x2b4 <__bad_interrupt>
     196:	00 00       	nop
     198:	8d c0       	rjmp	.+282    	; 0x2b4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	8b c0       	rjmp	.+278    	; 0x2b4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	89 c0       	rjmp	.+274    	; 0x2b4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	87 c0       	rjmp	.+270    	; 0x2b4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	85 c0       	rjmp	.+266    	; 0x2b4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	83 c0       	rjmp	.+262    	; 0x2b4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	81 c0       	rjmp	.+258    	; 0x2b4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	7f c0       	rjmp	.+254    	; 0x2b4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	7d c0       	rjmp	.+250    	; 0x2b4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	7b c0       	rjmp	.+246    	; 0x2b4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	79 c0       	rjmp	.+242    	; 0x2b4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	77 c0       	rjmp	.+238    	; 0x2b4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	75 c0       	rjmp	.+234    	; 0x2b4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	73 c0       	rjmp	.+230    	; 0x2b4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	71 c0       	rjmp	.+226    	; 0x2b4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	6f c0       	rjmp	.+222    	; 0x2b4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	6d c0       	rjmp	.+218    	; 0x2b4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	6b c0       	rjmp	.+214    	; 0x2b4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	69 c0       	rjmp	.+210    	; 0x2b4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	67 c0       	rjmp	.+206    	; 0x2b4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	65 c0       	rjmp	.+202    	; 0x2b4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	63 c0       	rjmp	.+198    	; 0x2b4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	61 c0       	rjmp	.+194    	; 0x2b4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__vector_125>
     1f8:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__vector_126>
     1fc:	61 0b       	sbc	r22, r17
     1fe:	4f 0b       	sbc	r20, r31
     200:	52 0b       	sbc	r21, r18
     202:	55 0b       	sbc	r21, r21
     204:	58 0b       	sbc	r21, r24
     206:	5b 0b       	sbc	r21, r27
     208:	5e 0b       	sbc	r21, r30
     20a:	42 11       	cpse	r20, r2
     20c:	1a 11       	cpse	r17, r10
     20e:	1c 11       	cpse	r17, r12
     210:	1e 11       	cpse	r17, r14
     212:	20 11       	cpse	r18, r0
     214:	22 11       	cpse	r18, r2
     216:	24 11       	cpse	r18, r4
     218:	26 11       	cpse	r18, r6
     21a:	28 11       	cpse	r18, r8
     21c:	18 11       	cpse	r17, r8
     21e:	18 11       	cpse	r17, r8
     220:	18 11       	cpse	r17, r8
     222:	18 11       	cpse	r17, r8
     224:	18 11       	cpse	r17, r8
     226:	18 11       	cpse	r17, r8
     228:	18 11       	cpse	r17, r8
     22a:	2a 11       	cpse	r18, r10
     22c:	2c 11       	cpse	r18, r12
     22e:	2e 11       	cpse	r18, r14
     230:	30 11       	cpse	r19, r0
     232:	32 11       	cpse	r19, r2
     234:	34 11       	cpse	r19, r4
     236:	18 11       	cpse	r17, r8
     238:	18 11       	cpse	r17, r8
     23a:	18 11       	cpse	r17, r8
     23c:	18 11       	cpse	r17, r8
     23e:	18 11       	cpse	r17, r8
     240:	18 11       	cpse	r17, r8
     242:	18 11       	cpse	r17, r8
     244:	18 11       	cpse	r17, r8
     246:	18 11       	cpse	r17, r8
     248:	18 11       	cpse	r17, r8
     24a:	18 11       	cpse	r17, r8
     24c:	18 11       	cpse	r17, r8
     24e:	18 11       	cpse	r17, r8
     250:	18 11       	cpse	r17, r8
     252:	18 11       	cpse	r17, r8
     254:	18 11       	cpse	r17, r8
     256:	18 11       	cpse	r17, r8
     258:	18 11       	cpse	r17, r8
     25a:	18 11       	cpse	r17, r8
     25c:	18 11       	cpse	r17, r8
     25e:	18 11       	cpse	r17, r8
     260:	18 11       	cpse	r17, r8
     262:	18 11       	cpse	r17, r8
     264:	18 11       	cpse	r17, r8
     266:	18 11       	cpse	r17, r8
     268:	18 11       	cpse	r17, r8
     26a:	36 11       	cpse	r19, r6
     26c:	38 11       	cpse	r19, r8
     26e:	3a 11       	cpse	r19, r10
     270:	3c 11       	cpse	r19, r12
     272:	3e 11       	cpse	r19, r14
     274:	40 11       	cpse	r20, r0

00000276 <__ctors_end>:
     276:	11 24       	eor	r1, r1
     278:	1f be       	out	0x3f, r1	; 63
     27a:	cf ef       	ldi	r28, 0xFF	; 255
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	df e2       	ldi	r29, 0x2F	; 47
     280:	de bf       	out	0x3e, r29	; 62

00000282 <__do_copy_data>:
     282:	10 e2       	ldi	r17, 0x20	; 32
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b0 e2       	ldi	r27, 0x20	; 32
     288:	e0 eb       	ldi	r30, 0xB0	; 176
     28a:	f4 e2       	ldi	r31, 0x24	; 36
     28c:	00 e0       	ldi	r16, 0x00	; 0
     28e:	0b bf       	out	0x3b, r16	; 59
     290:	02 c0       	rjmp	.+4      	; 0x296 <__do_copy_data+0x14>
     292:	07 90       	elpm	r0, Z+
     294:	0d 92       	st	X+, r0
     296:	a4 3b       	cpi	r26, 0xB4	; 180
     298:	b1 07       	cpc	r27, r17
     29a:	d9 f7       	brne	.-10     	; 0x292 <__do_copy_data+0x10>

0000029c <__do_clear_bss>:
     29c:	29 e2       	ldi	r18, 0x29	; 41
     29e:	a4 eb       	ldi	r26, 0xB4	; 180
     2a0:	b0 e2       	ldi	r27, 0x20	; 32
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <.do_clear_bss_start>

000002a4 <.do_clear_bss_loop>:
     2a4:	1d 92       	st	X+, r1

000002a6 <.do_clear_bss_start>:
     2a6:	a0 34       	cpi	r26, 0x40	; 64
     2a8:	b2 07       	cpc	r27, r18
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <.do_clear_bss_loop>
     2ac:	0e 94 02 12 	call	0x2404	; 0x2404 <main>
     2b0:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <_exit>

000002b4 <__bad_interrupt>:
     2b4:	a5 ce       	rjmp	.-694    	; 0x0 <__vectors>

000002b6 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2b6:	08 95       	ret

000002b8 <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	28 2f       	mov	r18, r24
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	f9 01       	movw	r30, r18
     2c2:	71 96       	adiw	r30, 0x11	; 17
     2c4:	e2 95       	swap	r30
     2c6:	f2 95       	swap	r31
     2c8:	f0 7f       	andi	r31, 0xF0	; 240
     2ca:	fe 27       	eor	r31, r30
     2cc:	e0 7f       	andi	r30, 0xF0	; 240
     2ce:	fe 27       	eor	r31, r30
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b1 e0       	ldi	r27, 0x01	; 1
     2d4:	14 96       	adiw	r26, 0x04	; 4
     2d6:	9c 91       	ld	r25, X
     2d8:	14 97       	sbiw	r26, 0x04	; 4
     2da:	13 96       	adiw	r26, 0x03	; 3
     2dc:	ac 91       	ld	r26, X
     2de:	a9 01       	movw	r20, r18
     2e0:	4c 5f       	subi	r20, 0xFC	; 252
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	eb 01       	movw	r28, r22
     2ea:	04 2e       	mov	r0, r20
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <dma_interrupt+0x3a>
     2ee:	cc 0f       	add	r28, r28
     2f0:	dd 1f       	adc	r29, r29
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <dma_interrupt+0x36>
     2f6:	08 2e       	mov	r0, r24
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <dma_interrupt+0x46>
     2fa:	66 0f       	add	r22, r22
     2fc:	77 1f       	adc	r23, r23
     2fe:	0a 94       	dec	r0
     300:	e2 f7       	brpl	.-8      	; 0x2fa <dma_interrupt+0x42>
     302:	6c 2b       	or	r22, r28
     304:	a6 23       	and	r26, r22
     306:	b0 e0       	ldi	r27, 0x00	; 0
     308:	ed 01       	movw	r28, r26
     30a:	04 2e       	mov	r0, r20
     30c:	02 c0       	rjmp	.+4      	; 0x312 <dma_interrupt+0x5a>
     30e:	d5 95       	asr	r29
     310:	c7 95       	ror	r28
     312:	0a 94       	dec	r0
     314:	e2 f7       	brpl	.-8      	; 0x30e <dma_interrupt+0x56>
     316:	c0 fd       	sbrc	r28, 0
     318:	1c c0       	rjmp	.+56     	; 0x352 <dma_interrupt+0x9a>
     31a:	08 2e       	mov	r0, r24
     31c:	02 c0       	rjmp	.+4      	; 0x322 <dma_interrupt+0x6a>
     31e:	b5 95       	asr	r27
     320:	a7 95       	ror	r26
     322:	0a 94       	dec	r0
     324:	e2 f7       	brpl	.-8      	; 0x31e <dma_interrupt+0x66>
     326:	a0 fd       	sbrc	r26, 0
     328:	17 c0       	rjmp	.+46     	; 0x358 <dma_interrupt+0xa0>
     32a:	69 23       	and	r22, r25
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	db 01       	movw	r26, r22
     330:	02 c0       	rjmp	.+4      	; 0x336 <dma_interrupt+0x7e>
     332:	b5 95       	asr	r27
     334:	a7 95       	ror	r26
     336:	4a 95       	dec	r20
     338:	e2 f7       	brpl	.-8      	; 0x332 <dma_interrupt+0x7a>
     33a:	a0 fd       	sbrc	r26, 0
     33c:	10 c0       	rjmp	.+32     	; 0x35e <dma_interrupt+0xa6>
     33e:	ab 01       	movw	r20, r22
     340:	02 c0       	rjmp	.+4      	; 0x346 <dma_interrupt+0x8e>
     342:	55 95       	asr	r21
     344:	47 95       	ror	r20
     346:	8a 95       	dec	r24
     348:	e2 f7       	brpl	.-8      	; 0x342 <dma_interrupt+0x8a>
     34a:	ca 01       	movw	r24, r20
     34c:	81 70       	andi	r24, 0x01	; 1
     34e:	99 27       	eor	r25, r25
     350:	08 c0       	rjmp	.+16     	; 0x362 <dma_interrupt+0xaa>
     352:	84 e0       	ldi	r24, 0x04	; 4
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	05 c0       	rjmp	.+10     	; 0x362 <dma_interrupt+0xaa>
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <dma_interrupt+0xaa>
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	41 81       	ldd	r20, Z+1	; 0x01
     364:	40 63       	ori	r20, 0x30	; 48
     366:	41 83       	std	Z+1, r20	; 0x01
     368:	f9 01       	movw	r30, r18
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	e9 5e       	subi	r30, 0xE9	; 233
     370:	f8 4d       	sbci	r31, 0xD8	; 216
     372:	01 90       	ld	r0, Z+
     374:	f0 81       	ld	r31, Z
     376:	e0 2d       	mov	r30, r0
     378:	30 97       	sbiw	r30, 0x00	; 0
     37a:	09 f0       	breq	.+2      	; 0x37e <dma_interrupt+0xc6>
     37c:	09 95       	icall
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <dma_enable>:
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	54 d1       	rcall	.+680    	; 0x634 <sysclk_enable_module>
     38c:	8f b7       	in	r24, 0x3f	; 63
     38e:	f8 94       	cli
     390:	e0 e2       	ldi	r30, 0x20	; 32
     392:	f7 e2       	ldi	r31, 0x27	; 39
     394:	90 81       	ld	r25, Z
     396:	9f 5f       	subi	r25, 0xFF	; 255
     398:	90 83       	st	Z, r25
     39a:	8f bf       	out	0x3f, r24	; 63
     39c:	e0 e0       	ldi	r30, 0x00	; 0
     39e:	f1 e0       	ldi	r31, 0x01	; 1
     3a0:	80 e4       	ldi	r24, 0x40	; 64
     3a2:	80 83       	st	Z, r24
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	80 83       	st	Z, r24
     3a8:	08 95       	ret

000003aa <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	0b b6       	in	r0, 0x3b	; 59
     3b6:	0f 92       	push	r0
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	dma_interrupt(0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	72 df       	rcall	.-284    	; 0x2b8 <dma_interrupt>
}
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	0f 90       	pop	r0
     3ee:	0b be       	out	0x3b, r0	; 59
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	0b b6       	in	r0, 0x3b	; 59
     406:	0f 92       	push	r0
     408:	2f 93       	push	r18
     40a:	3f 93       	push	r19
     40c:	4f 93       	push	r20
     40e:	5f 93       	push	r21
     410:	6f 93       	push	r22
     412:	7f 93       	push	r23
     414:	8f 93       	push	r24
     416:	9f 93       	push	r25
     418:	af 93       	push	r26
     41a:	bf 93       	push	r27
     41c:	ef 93       	push	r30
     41e:	ff 93       	push	r31
	dma_interrupt(1);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	4a df       	rcall	.-364    	; 0x2b8 <dma_interrupt>
}
     424:	ff 91       	pop	r31
     426:	ef 91       	pop	r30
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	7f 91       	pop	r23
     432:	6f 91       	pop	r22
     434:	5f 91       	pop	r21
     436:	4f 91       	pop	r20
     438:	3f 91       	pop	r19
     43a:	2f 91       	pop	r18
     43c:	0f 90       	pop	r0
     43e:	0b be       	out	0x3b, r0	; 59
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	0b b6       	in	r0, 0x3b	; 59
     456:	0f 92       	push	r0
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	dma_interrupt(2);
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	22 df       	rcall	.-444    	; 0x2b8 <dma_interrupt>
}
     474:	ff 91       	pop	r31
     476:	ef 91       	pop	r30
     478:	bf 91       	pop	r27
     47a:	af 91       	pop	r26
     47c:	9f 91       	pop	r25
     47e:	8f 91       	pop	r24
     480:	7f 91       	pop	r23
     482:	6f 91       	pop	r22
     484:	5f 91       	pop	r21
     486:	4f 91       	pop	r20
     488:	3f 91       	pop	r19
     48a:	2f 91       	pop	r18
     48c:	0f 90       	pop	r0
     48e:	0b be       	out	0x3b, r0	; 59
     490:	0f 90       	pop	r0
     492:	0f be       	out	0x3f, r0	; 63
     494:	0f 90       	pop	r0
     496:	1f 90       	pop	r1
     498:	18 95       	reti

0000049a <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	0b b6       	in	r0, 0x3b	; 59
     4a6:	0f 92       	push	r0
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	ef 93       	push	r30
     4be:	ff 93       	push	r31
	dma_interrupt(3);
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	fa de       	rcall	.-524    	; 0x2b8 <dma_interrupt>
}
     4c4:	ff 91       	pop	r31
     4c6:	ef 91       	pop	r30
     4c8:	bf 91       	pop	r27
     4ca:	af 91       	pop	r26
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	7f 91       	pop	r23
     4d2:	6f 91       	pop	r22
     4d4:	5f 91       	pop	r21
     4d6:	4f 91       	pop	r20
     4d8:	3f 91       	pop	r19
     4da:	2f 91       	pop	r18
     4dc:	0f 90       	pop	r0
     4de:	0b be       	out	0x3b, r0	; 59
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
     4ea:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
     4ec:	e8 2f       	mov	r30, r24
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	71 96       	adiw	r30, 0x11	; 17
     4f2:	e2 95       	swap	r30
     4f4:	f2 95       	swap	r31
     4f6:	f0 7f       	andi	r31, 0xF0	; 240
     4f8:	fe 27       	eor	r31, r30
     4fa:	e0 7f       	andi	r30, 0xF0	; 240
     4fc:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     4fe:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     500:	f8 94       	cli
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
     502:	19 96       	adiw	r26, 0x09	; 9
     504:	8c 91       	ld	r24, X
     506:	19 97       	sbiw	r26, 0x09	; 9
     508:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
     50a:	1a 96       	adiw	r26, 0x0a	; 10
     50c:	8c 91       	ld	r24, X
     50e:	1a 97       	sbiw	r26, 0x0a	; 10
     510:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
     512:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
     514:	17 96       	adiw	r26, 0x07	; 7
     516:	8c 91       	ld	r24, X
     518:	17 97       	sbiw	r26, 0x07	; 7
     51a:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
     51c:	18 96       	adiw	r26, 0x08	; 8
     51e:	8c 91       	ld	r24, X
     520:	18 97       	sbiw	r26, 0x08	; 8
     522:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
     524:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
     526:	12 96       	adiw	r26, 0x02	; 2
     528:	8c 91       	ld	r24, X
     52a:	12 97       	sbiw	r26, 0x02	; 2
     52c:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
     52e:	13 96       	adiw	r26, 0x03	; 3
     530:	8c 91       	ld	r24, X
     532:	13 97       	sbiw	r26, 0x03	; 3
     534:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
     536:	14 96       	adiw	r26, 0x04	; 4
     538:	8d 91       	ld	r24, X+
     53a:	9c 91       	ld	r25, X
     53c:	15 97       	sbiw	r26, 0x05	; 5
     53e:	84 83       	std	Z+4, r24	; 0x04
     540:	95 83       	std	Z+5, r25	; 0x05
	channel->REPCNT = config->repcnt;
     542:	16 96       	adiw	r26, 0x06	; 6
     544:	8c 91       	ld	r24, X
     546:	16 97       	sbiw	r26, 0x06	; 6
     548:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
     54a:	11 96       	adiw	r26, 0x01	; 1
     54c:	8c 91       	ld	r24, X
     54e:	11 97       	sbiw	r26, 0x01	; 1
     550:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
     552:	8c 91       	ld	r24, X
     554:	8f 77       	andi	r24, 0x7F	; 127
     556:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     558:	2f bf       	out	0x3f, r18	; 63
     55a:	08 95       	ret

0000055c <sysclk_init>:
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	00 d0       	rcall	.+0      	; 0x562 <sysclk_init+0x6>
     562:	00 d0       	rcall	.+0      	; 0x564 <sysclk_init+0x8>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	80 93 70 00 	sts	0x0070, r24
     56e:	80 93 71 00 	sts	0x0071, r24
     572:	80 93 72 00 	sts	0x0072, r24
     576:	80 93 73 00 	sts	0x0073, r24
     57a:	80 93 74 00 	sts	0x0074, r24
     57e:	80 93 75 00 	sts	0x0075, r24
     582:	80 93 76 00 	sts	0x0076, r24
     586:	64 e0       	ldi	r22, 0x04	; 4
     588:	81 e4       	ldi	r24, 0x41	; 65
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	80 d7       	rcall	.+3840   	; 0x148e <ccp_write_io>
     58e:	6c e1       	ldi	r22, 0x1C	; 28
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	82 d7       	rcall	.+3844   	; 0x149a <nvm_read_byte>
     596:	8a 83       	std	Y+2, r24	; 0x02
     598:	6d e1       	ldi	r22, 0x1D	; 29
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	7d d7       	rcall	.+3834   	; 0x149a <nvm_read_byte>
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	21 f4       	brne	.+8      	; 0x5b2 <sysclk_init+0x56>
     5aa:	80 e4       	ldi	r24, 0x40	; 64
     5ac:	93 e2       	ldi	r25, 0x23	; 35
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	9a 83       	std	Y+2, r25	; 0x02
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	8b 83       	std	Y+3, r24	; 0x03
     5b8:	9c 83       	std	Y+4, r25	; 0x04
     5ba:	e0 e6       	ldi	r30, 0x60	; 96
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	82 83       	std	Z+2, r24	; 0x02
     5c0:	8c 81       	ldd	r24, Y+4	; 0x04
     5c2:	83 83       	std	Z+3, r24	; 0x03
     5c4:	8f b7       	in	r24, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	e0 e5       	ldi	r30, 0x50	; 80
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	90 81       	ld	r25, Z
     5ce:	92 60       	ori	r25, 0x02	; 2
     5d0:	90 83       	st	Z, r25
     5d2:	8f bf       	out	0x3f, r24	; 63
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
     5d6:	81 ff       	sbrs	r24, 1
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <sysclk_init+0x78>
     5da:	8f b7       	in	r24, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	a0 e5       	ldi	r26, 0x50	; 80
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	16 96       	adiw	r26, 0x06	; 6
     5e4:	9c 91       	ld	r25, X
     5e6:	16 97       	sbiw	r26, 0x06	; 6
     5e8:	99 7f       	andi	r25, 0xF9	; 249
     5ea:	16 96       	adiw	r26, 0x06	; 6
     5ec:	9c 93       	st	X, r25
     5ee:	16 97       	sbiw	r26, 0x06	; 6
     5f0:	e0 e6       	ldi	r30, 0x60	; 96
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 e8       	ldi	r25, 0x80	; 128
     5f6:	95 83       	std	Z+5, r25	; 0x05
     5f8:	9b eb       	ldi	r25, 0xBB	; 187
     5fa:	96 83       	std	Z+6, r25	; 0x06
     5fc:	16 96       	adiw	r26, 0x06	; 6
     5fe:	9c 91       	ld	r25, X
     600:	16 97       	sbiw	r26, 0x06	; 6
     602:	94 60       	ori	r25, 0x04	; 4
     604:	16 96       	adiw	r26, 0x06	; 6
     606:	9c 93       	st	X, r25
     608:	90 81       	ld	r25, Z
     60a:	91 60       	ori	r25, 0x01	; 1
     60c:	90 83       	st	Z, r25
     60e:	8f bf       	out	0x3f, r24	; 63
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	3b d7       	rcall	.+3702   	; 0x148e <ccp_write_io>
     618:	8f b7       	in	r24, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	e0 e5       	ldi	r30, 0x50	; 80
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	90 81       	ld	r25, Z
     622:	9e 7f       	andi	r25, 0xFE	; 254
     624:	90 83       	st	Z, r25
     626:	8f bf       	out	0x3f, r24	; 63
     628:	24 96       	adiw	r28, 0x04	; 4
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <sysclk_enable_module>:
     634:	2f b7       	in	r18, 0x3f	; 63
     636:	f8 94       	cli
     638:	fc 01       	movw	r30, r24
     63a:	e0 59       	subi	r30, 0x90	; 144
     63c:	ff 4f       	sbci	r31, 0xFF	; 255
     63e:	60 95       	com	r22
     640:	80 81       	ld	r24, Z
     642:	68 23       	and	r22, r24
     644:	60 83       	st	Z, r22
     646:	2f bf       	out	0x3f, r18	; 63
     648:	08 95       	ret

0000064a <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     64a:	86 30       	cpi	r24, 0x06	; 6
     64c:	11 f4       	brne	.+4      	; 0x652 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
     64e:	68 e1       	ldi	r22, 0x18	; 24
     650:	01 c0       	rjmp	.+2      	; 0x654 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
     652:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     654:	e0 e5       	ldi	r30, 0x50	; 80
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     65a:	81 fd       	sbrc	r24, 1
     65c:	24 c0       	rjmp	.+72     	; 0x6a6 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     65e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     660:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     662:	90 81       	ld	r25, Z
     664:	92 60       	ori	r25, 0x02	; 2
     666:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     668:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     66a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     66c:	81 ff       	sbrs	r24, 1
     66e:	fd cf       	rjmp	.-6      	; 0x66a <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     670:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     672:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     674:	a0 e5       	ldi	r26, 0x50	; 80
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	16 96       	adiw	r26, 0x06	; 6
     67a:	9c 91       	ld	r25, X
     67c:	16 97       	sbiw	r26, 0x06	; 6
     67e:	99 7f       	andi	r25, 0xF9	; 249
     680:	16 96       	adiw	r26, 0x06	; 6
     682:	9c 93       	st	X, r25
     684:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     686:	e0 e6       	ldi	r30, 0x60	; 96
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	90 e8       	ldi	r25, 0x80	; 128
     68c:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     68e:	9b eb       	ldi	r25, 0xBB	; 187
     690:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     692:	16 96       	adiw	r26, 0x06	; 6
     694:	9c 91       	ld	r25, X
     696:	16 97       	sbiw	r26, 0x06	; 6
     698:	94 60       	ori	r25, 0x04	; 4
     69a:	16 96       	adiw	r26, 0x06	; 6
     69c:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     69e:	90 81       	ld	r25, Z
     6a0:	91 60       	ori	r25, 0x01	; 1
     6a2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6a4:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     6a6:	63 60       	ori	r22, 0x03	; 3
     6a8:	84 e4       	ldi	r24, 0x44	; 68
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	f0 d6       	rcall	.+3552   	; 0x148e <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     6ae:	60 e4       	ldi	r22, 0x40	; 64
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	bf cf       	rjmp	.-130    	; 0x634 <sysclk_enable_module>
     6b6:	08 95       	ret

000006b8 <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     6b8:	10 92 ca 25 	sts	0x25CA, r1
     6bc:	10 92 d6 25 	sts	0x25D6, r1
     6c0:	10 92 d7 25 	sts	0x25D7, r1
     6c4:	81 ea       	ldi	r24, 0xA1	; 161
     6c6:	80 93 cc 25 	sts	0x25CC, r24
     6ca:	80 e2       	ldi	r24, 0x20	; 32
     6cc:	80 93 cd 25 	sts	0x25CD, r24
     6d0:	10 92 ce 25 	sts	0x25CE, r1
     6d4:	10 92 cf 25 	sts	0x25CF, r1
     6d8:	10 92 d0 25 	sts	0x25D0, r1
     6dc:	10 92 d1 25 	sts	0x25D1, r1
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	80 93 d2 25 	sts	0x25D2, r24
     6e8:	90 93 d3 25 	sts	0x25D3, r25
     6ec:	10 92 d4 25 	sts	0x25D4, r1
     6f0:	10 92 d5 25 	sts	0x25D5, r1
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	92 ec       	ldi	r25, 0xC2	; 194
     6f8:	a1 e0       	ldi	r26, 0x01	; 1
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	80 93 d8 25 	sts	0x25D8, r24
     700:	90 93 d9 25 	sts	0x25D9, r25
     704:	a0 93 da 25 	sts	0x25DA, r26
     708:	b0 93 db 25 	sts	0x25DB, r27
     70c:	10 92 dc 25 	sts	0x25DC, r1
     710:	10 92 dd 25 	sts	0x25DD, r1
     714:	88 e0       	ldi	r24, 0x08	; 8
     716:	80 93 de 25 	sts	0x25DE, r24
     71a:	80 91 ca 25 	lds	r24, 0x25CA
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	80 93 ca 25 	sts	0x25CA, r24
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	08 95       	ret

00000728 <udi_cdc_comm_disable>:
     728:	80 91 ca 25 	lds	r24, 0x25CA
     72c:	81 50       	subi	r24, 0x01	; 1
     72e:	80 93 ca 25 	sts	0x25CA, r24
     732:	08 95       	ret

00000734 <udi_cdc_data_disable>:
     734:	80 91 c9 25 	lds	r24, 0x25C9
     738:	81 50       	subi	r24, 0x01	; 1
     73a:	80 93 c9 25 	sts	0x25C9, r24
     73e:	80 91 c9 25 	lds	r24, 0x25C9
     742:	10 92 c8 25 	sts	0x25C8, r1
     746:	08 95       	ret

00000748 <udi_cdc_data_setup>:
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret

0000074c <udi_cdc_getsetting>:
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	08 95       	ret

00000750 <udi_cdc_comm_setup>:
     750:	80 91 25 27 	lds	r24, 0x2725
     754:	88 23       	and	r24, r24
     756:	dc f4       	brge	.+54     	; 0x78e <udi_cdc_comm_setup+0x3e>
     758:	80 76       	andi	r24, 0x60	; 96
     75a:	80 32       	cpi	r24, 0x20	; 32
     75c:	e9 f5       	brne	.+122    	; 0x7d8 <udi_cdc_comm_setup+0x88>
     75e:	80 91 26 27 	lds	r24, 0x2726
     762:	81 32       	cpi	r24, 0x21	; 33
     764:	d9 f5       	brne	.+118    	; 0x7dc <udi_cdc_comm_setup+0x8c>
     766:	80 91 2b 27 	lds	r24, 0x272B
     76a:	90 91 2c 27 	lds	r25, 0x272C
     76e:	07 97       	sbiw	r24, 0x07	; 7
     770:	b9 f5       	brne	.+110    	; 0x7e0 <udi_cdc_comm_setup+0x90>
     772:	88 ed       	ldi	r24, 0xD8	; 216
     774:	95 e2       	ldi	r25, 0x25	; 37
     776:	80 93 2d 27 	sts	0x272D, r24
     77a:	90 93 2e 27 	sts	0x272E, r25
     77e:	87 e0       	ldi	r24, 0x07	; 7
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	80 93 2f 27 	sts	0x272F, r24
     786:	90 93 30 27 	sts	0x2730, r25
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	08 95       	ret
     78e:	80 76       	andi	r24, 0x60	; 96
     790:	80 32       	cpi	r24, 0x20	; 32
     792:	41 f5       	brne	.+80     	; 0x7e4 <udi_cdc_comm_setup+0x94>
     794:	80 91 26 27 	lds	r24, 0x2726
     798:	80 32       	cpi	r24, 0x20	; 32
     79a:	21 f0       	breq	.+8      	; 0x7a4 <udi_cdc_comm_setup+0x54>
     79c:	82 32       	cpi	r24, 0x22	; 34
     79e:	21 f5       	brne	.+72     	; 0x7e8 <udi_cdc_comm_setup+0x98>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	08 95       	ret
     7a4:	80 91 2b 27 	lds	r24, 0x272B
     7a8:	90 91 2c 27 	lds	r25, 0x272C
     7ac:	07 97       	sbiw	r24, 0x07	; 7
     7ae:	f1 f4       	brne	.+60     	; 0x7ec <udi_cdc_comm_setup+0x9c>
     7b0:	88 ef       	ldi	r24, 0xF8	; 248
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	80 93 31 27 	sts	0x2731, r24
     7b8:	90 93 32 27 	sts	0x2732, r25
     7bc:	88 ed       	ldi	r24, 0xD8	; 216
     7be:	95 e2       	ldi	r25, 0x25	; 37
     7c0:	80 93 2d 27 	sts	0x272D, r24
     7c4:	90 93 2e 27 	sts	0x272E, r25
     7c8:	87 e0       	ldi	r24, 0x07	; 7
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	80 93 2f 27 	sts	0x272F, r24
     7d0:	90 93 30 27 	sts	0x2730, r25
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	08 95       	ret
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 95       	ret
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 95       	ret
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	08 95       	ret
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	08 95       	ret

000007f0 <udi_cdc_line_coding_received>:
     7f0:	08 95       	ret

000007f2 <udi_cdc_tx_send>:
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	80 91 b7 20 	lds	r24, 0x20B7
     800:	81 11       	cpse	r24, r1
     802:	9b c0       	rjmp	.+310    	; 0x93a <udi_cdc_tx_send+0x148>
     804:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <udd_is_high_speed>
     808:	88 23       	and	r24, r24
     80a:	51 f0       	breq	.+20     	; 0x820 <udi_cdc_tx_send+0x2e>
     80c:	c0 91 b8 20 	lds	r28, 0x20B8
     810:	d0 91 b9 20 	lds	r29, 0x20B9
     814:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <udd_get_micro_frame_number>
     818:	c8 17       	cp	r28, r24
     81a:	d9 07       	cpc	r29, r25
     81c:	59 f4       	brne	.+22     	; 0x834 <udi_cdc_tx_send+0x42>
     81e:	8d c0       	rjmp	.+282    	; 0x93a <udi_cdc_tx_send+0x148>
     820:	c0 91 b8 20 	lds	r28, 0x20B8
     824:	d0 91 b9 20 	lds	r29, 0x20B9
     828:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <udd_get_frame_number>
     82c:	c8 17       	cp	r28, r24
     82e:	d9 07       	cpc	r29, r25
     830:	09 f4       	brne	.+2      	; 0x834 <udi_cdc_tx_send+0x42>
     832:	83 c0       	rjmp	.+262    	; 0x93a <udi_cdc_tx_send+0x148>
     834:	df b7       	in	r29, 0x3f	; 63
     836:	f8 94       	cli
     838:	c0 91 ba 20 	lds	r28, 0x20BA
     83c:	ec 2f       	mov	r30, r28
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	e5 54       	subi	r30, 0x45	; 69
     846:	ff 4d       	sbci	r31, 0xDF	; 223
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	89 2b       	or	r24, r25
     84e:	09 f5       	brne	.+66     	; 0x892 <udi_cdc_tx_send+0xa0>
     850:	80 91 b4 20 	lds	r24, 0x20B4
     854:	90 91 b5 20 	lds	r25, 0x20B5
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	80 93 b4 20 	sts	0x20B4, r24
     85e:	90 93 b5 20 	sts	0x20B5, r25
     862:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <udd_is_high_speed>
     866:	81 11       	cpse	r24, r1
     868:	07 c0       	rjmp	.+14     	; 0x878 <udi_cdc_tx_send+0x86>
     86a:	80 91 b4 20 	lds	r24, 0x20B4
     86e:	90 91 b5 20 	lds	r25, 0x20B5
     872:	84 36       	cpi	r24, 0x64	; 100
     874:	91 05       	cpc	r25, r1
     876:	58 f0       	brcs	.+22     	; 0x88e <udi_cdc_tx_send+0x9c>
     878:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <udd_is_high_speed>
     87c:	88 23       	and	r24, r24
     87e:	49 f0       	breq	.+18     	; 0x892 <udi_cdc_tx_send+0xa0>
     880:	80 91 b4 20 	lds	r24, 0x20B4
     884:	90 91 b5 20 	lds	r25, 0x20B5
     888:	80 32       	cpi	r24, 0x20	; 32
     88a:	93 40       	sbci	r25, 0x03	; 3
     88c:	10 f4       	brcc	.+4      	; 0x892 <udi_cdc_tx_send+0xa0>
     88e:	df bf       	out	0x3f, r29	; 63
     890:	54 c0       	rjmp	.+168    	; 0x93a <udi_cdc_tx_send+0x148>
     892:	10 92 b4 20 	sts	0x20B4, r1
     896:	10 92 b5 20 	sts	0x20B5, r1
     89a:	80 91 b6 20 	lds	r24, 0x20B6
     89e:	81 11       	cpse	r24, r1
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <udi_cdc_tx_send+0xbc>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	c1 11       	cpse	r28, r1
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	80 93 ba 20 	sts	0x20BA, r24
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <udi_cdc_tx_send+0xc4>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	c1 11       	cpse	r28, r1
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	c8 2f       	mov	r28, r24
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 b7 20 	sts	0x20B7, r24
     8bc:	df bf       	out	0x3f, r29	; 63
     8be:	d0 e0       	ldi	r29, 0x00	; 0
     8c0:	fe 01       	movw	r30, r28
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	e5 54       	subi	r30, 0x45	; 69
     8c8:	ff 4d       	sbci	r31, 0xDF	; 223
     8ca:	ff 24       	eor	r15, r15
     8cc:	f3 94       	inc	r15
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
     8d2:	80 34       	cpi	r24, 0x40	; 64
     8d4:	91 40       	sbci	r25, 0x01	; 1
     8d6:	09 f4       	brne	.+2      	; 0x8da <udi_cdc_tx_send+0xe8>
     8d8:	f1 2c       	mov	r15, r1
     8da:	ff 20       	and	r15, r15
     8dc:	91 f0       	breq	.+36     	; 0x902 <udi_cdc_tx_send+0x110>
     8de:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <udd_is_high_speed>
     8e2:	88 23       	and	r24, r24
     8e4:	39 f0       	breq	.+14     	; 0x8f4 <udi_cdc_tx_send+0x102>
     8e6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <udd_get_micro_frame_number>
     8ea:	80 93 b8 20 	sts	0x20B8, r24
     8ee:	90 93 b9 20 	sts	0x20B9, r25
     8f2:	0b c0       	rjmp	.+22     	; 0x90a <udi_cdc_tx_send+0x118>
     8f4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <udd_get_frame_number>
     8f8:	80 93 b8 20 	sts	0x20B8, r24
     8fc:	90 93 b9 20 	sts	0x20B9, r25
     900:	04 c0       	rjmp	.+8      	; 0x90a <udi_cdc_tx_send+0x118>
     902:	10 92 b8 20 	sts	0x20B8, r1
     906:	10 92 b9 20 	sts	0x20B9, r1
     90a:	fe 01       	movw	r30, r28
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	e5 54       	subi	r30, 0x45	; 69
     912:	ff 4d       	sbci	r31, 0xDF	; 223
     914:	20 81       	ld	r18, Z
     916:	31 81       	ldd	r19, Z+1	; 0x01
     918:	80 e4       	ldi	r24, 0x40	; 64
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	c8 9f       	mul	r28, r24
     91e:	a0 01       	movw	r20, r0
     920:	c9 9f       	mul	r28, r25
     922:	50 0d       	add	r21, r0
     924:	d8 9f       	mul	r29, r24
     926:	50 0d       	add	r21, r0
     928:	11 24       	eor	r1, r1
     92a:	40 54       	subi	r20, 0x40	; 64
     92c:	5f 4d       	sbci	r21, 0xDF	; 223
     92e:	03 ea       	ldi	r16, 0xA3	; 163
     930:	14 e0       	ldi	r17, 0x04	; 4
     932:	6f 2d       	mov	r22, r15
     934:	81 e8       	ldi	r24, 0x81	; 129
     936:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <udd_ep_run>
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	08 95       	ret

00000946 <udi_cdc_data_sent>:
     946:	89 2b       	or	r24, r25
     948:	a9 f4       	brne	.+42     	; 0x974 <udi_cdc_data_sent+0x2e>
     94a:	20 91 ba 20 	lds	r18, 0x20BA
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	22 23       	and	r18, r18
     954:	11 f0       	breq	.+4      	; 0x95a <udi_cdc_data_sent+0x14>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	fc 01       	movw	r30, r24
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	e5 54       	subi	r30, 0x45	; 69
     962:	ff 4d       	sbci	r31, 0xDF	; 223
     964:	10 82       	st	Z, r1
     966:	11 82       	std	Z+1, r1	; 0x01
     968:	10 92 b6 20 	sts	0x20B6, r1
     96c:	10 92 b7 20 	sts	0x20B7, r1
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	3f cf       	rjmp	.-386    	; 0x7f2 <udi_cdc_tx_send>
     974:	08 95       	ret

00000976 <udi_cdc_data_sof_notify>:
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	3c cf       	rjmp	.-392    	; 0x7f2 <udi_cdc_tx_send>
     97a:	08 95       	ret

0000097c <udi_cdc_multi_get_nb_received_data>:
     97c:	4f b7       	in	r20, 0x3f	; 63
     97e:	f8 94       	cli
     980:	20 91 41 23 	lds	r18, 0x2341
     984:	30 91 42 23 	lds	r19, 0x2342
     988:	e0 91 43 23 	lds	r30, 0x2343
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	ec 5b       	subi	r30, 0xBC	; 188
     994:	fc 4d       	sbci	r31, 0xDC	; 220
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	82 1b       	sub	r24, r18
     99c:	93 0b       	sbc	r25, r19
     99e:	4f bf       	out	0x3f, r20	; 63
     9a0:	08 95       	ret

000009a2 <udi_cdc_multi_is_rx_ready>:
     9a2:	ec df       	rcall	.-40     	; 0x97c <udi_cdc_multi_get_nb_received_data>
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	89 2b       	or	r24, r25
     9a8:	09 f4       	brne	.+2      	; 0x9ac <udi_cdc_multi_is_rx_ready+0xa>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	82 2f       	mov	r24, r18
     9ae:	08 95       	ret

000009b0 <udi_cdc_rx_start>:
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	4f b7       	in	r20, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	50 91 43 23 	lds	r21, 0x2343
     9c0:	80 91 40 23 	lds	r24, 0x2340
     9c4:	81 11       	cpse	r24, r1
     9c6:	10 c0       	rjmp	.+32     	; 0x9e8 <udi_cdc_rx_start+0x38>
     9c8:	20 91 41 23 	lds	r18, 0x2341
     9cc:	30 91 42 23 	lds	r19, 0x2342
     9d0:	c5 2f       	mov	r28, r21
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
     9d4:	fe 01       	movw	r30, r28
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	ec 5b       	subi	r30, 0xBC	; 188
     9dc:	fc 4d       	sbci	r31, 0xDC	; 220
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	28 17       	cp	r18, r24
     9e4:	39 07       	cpc	r19, r25
     9e6:	18 f4       	brcc	.+6      	; 0x9ee <udi_cdc_rx_start+0x3e>
     9e8:	4f bf       	out	0x3f, r20	; 63
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	27 c0       	rjmp	.+78     	; 0xa3c <udi_cdc_rx_start+0x8c>
     9ee:	10 92 41 23 	sts	0x2341, r1
     9f2:	10 92 42 23 	sts	0x2342, r1
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	51 11       	cpse	r21, r1
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	80 93 43 23 	sts	0x2343, r24
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 40 23 	sts	0x2340, r24
     a06:	4f bf       	out	0x3f, r20	; 63
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	cb df       	rcall	.-106    	; 0x9a2 <udi_cdc_multi_is_rx_ready>
     a0c:	88 23       	and	r24, r24
     a0e:	19 f0       	breq	.+6      	; 0xa16 <udi_cdc_rx_start+0x66>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	0e 94 44 11 	call	0x2288	; 0x2288 <uart_rx_notify>
     a16:	80 e4       	ldi	r24, 0x40	; 64
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	c8 9f       	mul	r28, r24
     a1c:	a0 01       	movw	r20, r0
     a1e:	c9 9f       	mul	r28, r25
     a20:	50 0d       	add	r21, r0
     a22:	d8 9f       	mul	r29, r24
     a24:	50 0d       	add	r21, r0
     a26:	11 24       	eor	r1, r1
     a28:	48 5b       	subi	r20, 0xB8	; 184
     a2a:	5c 4d       	sbci	r21, 0xDC	; 220
     a2c:	05 e5       	ldi	r16, 0x55	; 85
     a2e:	15 e0       	ldi	r17, 0x05	; 5
     a30:	20 e4       	ldi	r18, 0x40	; 64
     a32:	31 e0       	ldi	r19, 0x01	; 1
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <udd_ep_run>
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	08 95       	ret

00000a46 <udi_cdc_data_enable>:
     a46:	10 92 c9 25 	sts	0x25C9, r1
     a4a:	10 92 b7 20 	sts	0x20B7, r1
     a4e:	10 92 b6 20 	sts	0x20B6, r1
     a52:	10 92 ba 20 	sts	0x20BA, r1
     a56:	10 92 bb 20 	sts	0x20BB, r1
     a5a:	10 92 bc 20 	sts	0x20BC, r1
     a5e:	10 92 bd 20 	sts	0x20BD, r1
     a62:	10 92 be 20 	sts	0x20BE, r1
     a66:	10 92 b8 20 	sts	0x20B8, r1
     a6a:	10 92 b9 20 	sts	0x20B9, r1
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	c0 de       	rcall	.-640    	; 0x7f2 <udi_cdc_tx_send>
     a72:	10 92 40 23 	sts	0x2340, r1
     a76:	10 92 43 23 	sts	0x2343, r1
     a7a:	10 92 44 23 	sts	0x2344, r1
     a7e:	10 92 45 23 	sts	0x2345, r1
     a82:	10 92 41 23 	sts	0x2341, r1
     a86:	10 92 42 23 	sts	0x2342, r1
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	91 df       	rcall	.-222    	; 0x9b0 <udi_cdc_rx_start>
     a8e:	88 23       	and	r24, r24
     a90:	59 f0       	breq	.+22     	; 0xaa8 <udi_cdc_data_enable+0x62>
     a92:	90 91 c9 25 	lds	r25, 0x25C9
     a96:	9f 5f       	subi	r25, 0xFF	; 255
     a98:	90 93 c9 25 	sts	0x25C9, r25
     a9c:	90 91 c9 25 	lds	r25, 0x25C9
     aa0:	91 30       	cpi	r25, 0x01	; 1
     aa2:	11 f4       	brne	.+4      	; 0xaa8 <udi_cdc_data_enable+0x62>
     aa4:	90 93 c8 25 	sts	0x25C8, r25
     aa8:	08 95       	ret

00000aaa <udi_cdc_data_received>:
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	a4 2f       	mov	r26, r20
     ab0:	89 2b       	or	r24, r25
     ab2:	39 f5       	brne	.+78     	; 0xb02 <udi_cdc_data_received+0x58>
     ab4:	80 91 43 23 	lds	r24, 0x2343
     ab8:	e1 e0       	ldi	r30, 0x01	; 1
     aba:	81 11       	cpse	r24, r1
     abc:	e0 e0       	ldi	r30, 0x00	; 0
     abe:	61 15       	cp	r22, r1
     ac0:	71 05       	cpc	r23, r1
     ac2:	a1 f4       	brne	.+40     	; 0xaec <udi_cdc_data_received+0x42>
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	20 e4       	ldi	r18, 0x40	; 64
     ac8:	31 e0       	ldi	r19, 0x01	; 1
     aca:	e2 9f       	mul	r30, r18
     acc:	b0 01       	movw	r22, r0
     ace:	e3 9f       	mul	r30, r19
     ad0:	70 0d       	add	r23, r0
     ad2:	f2 9f       	mul	r31, r18
     ad4:	70 0d       	add	r23, r0
     ad6:	11 24       	eor	r1, r1
     ad8:	ab 01       	movw	r20, r22
     ada:	48 5b       	subi	r20, 0xB8	; 184
     adc:	5c 4d       	sbci	r21, 0xDC	; 220
     ade:	05 e5       	ldi	r16, 0x55	; 85
     ae0:	15 e0       	ldi	r17, 0x05	; 5
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	8a 2f       	mov	r24, r26
     ae6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <udd_ep_run>
     aea:	0b c0       	rjmp	.+22     	; 0xb02 <udi_cdc_data_received+0x58>
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	ec 5b       	subi	r30, 0xBC	; 188
     af4:	fc 4d       	sbci	r31, 0xDC	; 220
     af6:	60 83       	st	Z, r22
     af8:	71 83       	std	Z+1, r23	; 0x01
     afa:	10 92 40 23 	sts	0x2340, r1
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	57 df       	rcall	.-338    	; 0x9b0 <udi_cdc_rx_start>
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <udi_cdc_is_rx_ready>:
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	4b cf       	rjmp	.-362    	; 0x9a2 <udi_cdc_multi_is_rx_ready>
     b0c:	08 95       	ret

00000b0e <udi_cdc_multi_getc>:
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ff 24       	eor	r15, r15
     b1a:	f3 94       	inc	r15
     b1c:	80 91 de 25 	lds	r24, 0x25DE
     b20:	89 30       	cpi	r24, 0x09	; 9
     b22:	09 f0       	breq	.+2      	; 0xb26 <udi_cdc_multi_getc+0x18>
     b24:	f1 2c       	mov	r15, r1
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	c0 e4       	ldi	r28, 0x40	; 64
     b2c:	d1 e0       	ldi	r29, 0x01	; 1
     b2e:	3f b7       	in	r19, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	80 91 41 23 	lds	r24, 0x2341
     b36:	90 91 42 23 	lds	r25, 0x2342
     b3a:	20 91 43 23 	lds	r18, 0x2343
     b3e:	3f bf       	out	0x3f, r19	; 63
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	f9 01       	movw	r30, r18
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	ec 5b       	subi	r30, 0xBC	; 188
     b4a:	fc 4d       	sbci	r31, 0xDC	; 220
     b4c:	40 81       	ld	r20, Z
     b4e:	51 81       	ldd	r21, Z+1	; 0x01
     b50:	84 17       	cp	r24, r20
     b52:	95 07       	cpc	r25, r21
     b54:	30 f0       	brcs	.+12     	; 0xb62 <udi_cdc_multi_getc+0x54>
     b56:	80 91 c8 25 	lds	r24, 0x25C8
     b5a:	81 11       	cpse	r24, r1
     b5c:	e8 cf       	rjmp	.-48     	; 0xb2e <udi_cdc_multi_getc+0x20>
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	1d c0       	rjmp	.+58     	; 0xb9c <udi_cdc_multi_getc+0x8e>
     b62:	2c 9f       	mul	r18, r28
     b64:	f0 01       	movw	r30, r0
     b66:	2d 9f       	mul	r18, r29
     b68:	f0 0d       	add	r31, r0
     b6a:	3c 9f       	mul	r19, r28
     b6c:	f0 0d       	add	r31, r0
     b6e:	11 24       	eor	r1, r1
     b70:	e8 0f       	add	r30, r24
     b72:	f9 1f       	adc	r31, r25
     b74:	e8 5b       	subi	r30, 0xB8	; 184
     b76:	fc 4d       	sbci	r31, 0xDC	; 220
     b78:	20 81       	ld	r18, Z
     b7a:	8b 01       	movw	r16, r22
     b7c:	02 2b       	or	r16, r18
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	80 93 41 23 	sts	0x2341, r24
     b84:	90 93 42 23 	sts	0x2342, r25
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	12 df       	rcall	.-476    	; 0x9b0 <udi_cdc_rx_start>
     b8c:	ff 20       	and	r15, r15
     b8e:	21 f0       	breq	.+8      	; 0xb98 <udi_cdc_multi_getc+0x8a>
     b90:	70 2f       	mov	r23, r16
     b92:	66 27       	eor	r22, r22
     b94:	f1 2c       	mov	r15, r1
     b96:	cb cf       	rjmp	.-106    	; 0xb2e <udi_cdc_multi_getc+0x20>
     b98:	80 2f       	mov	r24, r16
     b9a:	91 2f       	mov	r25, r17
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	08 95       	ret

00000ba8 <udi_cdc_getc>:
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	b1 cf       	rjmp	.-158    	; 0xb0e <udi_cdc_multi_getc>
     bac:	08 95       	ret

00000bae <udi_cdc_multi_get_free_tx_buffer>:
     bae:	5f b7       	in	r21, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	20 91 ba 20 	lds	r18, 0x20BA
     bb6:	e2 2f       	mov	r30, r18
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	e5 54       	subi	r30, 0x45	; 69
     bc0:	ff 4d       	sbci	r31, 0xDF	; 223
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	41 e0       	ldi	r20, 0x01	; 1
     bc8:	21 11       	cpse	r18, r1
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	e4 2f       	mov	r30, r20
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	e5 54       	subi	r30, 0x45	; 69
     bd6:	ff 4d       	sbci	r31, 0xDF	; 223
     bd8:	20 81       	ld	r18, Z
     bda:	31 81       	ldd	r19, Z+1	; 0x01
     bdc:	80 34       	cpi	r24, 0x40	; 64
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	96 07       	cpc	r25, r22
     be2:	89 f4       	brne	.+34     	; 0xc06 <udi_cdc_multi_get_free_tx_buffer+0x58>
     be4:	60 91 b7 20 	lds	r22, 0x20B7
     be8:	61 11       	cpse	r22, r1
     bea:	0d c0       	rjmp	.+26     	; 0xc06 <udi_cdc_multi_get_free_tx_buffer+0x58>
     bec:	60 91 b6 20 	lds	r22, 0x20B6
     bf0:	61 11       	cpse	r22, r1
     bf2:	09 c0       	rjmp	.+18     	; 0xc06 <udi_cdc_multi_get_free_tx_buffer+0x58>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 b6 20 	sts	0x20B6, r24
     bfa:	40 93 ba 20 	sts	0x20BA, r20
     bfe:	20 e4       	ldi	r18, 0x40	; 64
     c00:	31 e0       	ldi	r19, 0x01	; 1
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	5f bf       	out	0x3f, r21	; 63
     c08:	28 0f       	add	r18, r24
     c0a:	39 1f       	adc	r19, r25
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	82 1b       	sub	r24, r18
     c12:	93 0b       	sbc	r25, r19
     c14:	08 95       	ret

00000c16 <udi_cdc_multi_is_tx_ready>:
     c16:	cb df       	rcall	.-106    	; 0xbae <udi_cdc_multi_get_free_tx_buffer>
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	89 2b       	or	r24, r25
     c1c:	09 f4       	brne	.+2      	; 0xc20 <udi_cdc_multi_is_tx_ready+0xa>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	82 2f       	mov	r24, r18
     c22:	08 95       	ret

00000c24 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	f6 2e       	mov	r15, r22
     c30:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     c32:	01 e0       	ldi	r16, 0x01	; 1
     c34:	80 91 de 25 	lds	r24, 0x25DE
     c38:	89 30       	cpi	r24, 0x09	; 9
     c3a:	09 f0       	breq	.+2      	; 0xc3e <udi_cdc_multi_putc+0x1a>
     c3c:	00 e0       	ldi	r16, 0x00	; 0
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     c3e:	c0 e4       	ldi	r28, 0x40	; 64
     c40:	d1 e0       	ldi	r29, 0x01	; 1

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	e8 df       	rcall	.-48     	; 0xc16 <udi_cdc_multi_is_tx_ready>
     c46:	81 11       	cpse	r24, r1
     c48:	07 c0       	rjmp	.+14     	; 0xc58 <udi_cdc_multi_putc+0x34>
		if (!udi_cdc_data_running) {
     c4a:	80 91 c8 25 	lds	r24, 0x25C8
     c4e:	81 11       	cpse	r24, r1
     c50:	f8 cf       	rjmp	.-16     	; 0xc42 <udi_cdc_multi_putc+0x1e>
			return false;
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	28 c0       	rjmp	.+80     	; 0xca8 <udi_cdc_multi_putc+0x84>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     c58:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     c5a:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     c5c:	20 91 ba 20 	lds	r18, 0x20BA
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	ee 0f       	add	r30, r30
     c66:	ff 1f       	adc	r31, r31
     c68:	e5 54       	subi	r30, 0x45	; 69
     c6a:	ff 4d       	sbci	r31, 0xDF	; 223
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	ac 01       	movw	r20, r24
     c72:	4f 5f       	subi	r20, 0xFF	; 255
     c74:	5f 4f       	sbci	r21, 0xFF	; 255
     c76:	40 83       	st	Z, r20
     c78:	51 83       	std	Z+1, r21	; 0x01
     c7a:	2c 9f       	mul	r18, r28
     c7c:	f0 01       	movw	r30, r0
     c7e:	2d 9f       	mul	r18, r29
     c80:	f0 0d       	add	r31, r0
     c82:	3c 9f       	mul	r19, r28
     c84:	f0 0d       	add	r31, r0
     c86:	11 24       	eor	r1, r1
     c88:	8e 0f       	add	r24, r30
     c8a:	9f 1f       	adc	r25, r31
     c8c:	fc 01       	movw	r30, r24
     c8e:	e0 54       	subi	r30, 0x40	; 64
     c90:	ff 4d       	sbci	r31, 0xDF	; 223
     c92:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c94:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     c96:	00 23       	and	r16, r16
     c98:	29 f0       	breq	.+10     	; 0xca4 <udi_cdc_multi_putc+0x80>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     c9a:	f1 2e       	mov	r15, r17
     c9c:	11 0f       	add	r17, r17
     c9e:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     ca0:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     ca2:	cf cf       	rjmp	.-98     	; 0xc42 <udi_cdc_multi_putc+0x1e>
	}
	return true;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	08 95       	ret

00000cb4 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     cb4:	bc 01       	movw	r22, r24
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	b5 cf       	rjmp	.-150    	; 0xc24 <udi_cdc_multi_putc>
}
     cba:	08 95       	ret

00000cbc <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     cbc:	e0 91 e4 25 	lds	r30, 0x25E4
     cc0:	f0 91 e5 25 	lds	r31, 0x25E5
     cc4:	01 90       	ld	r0, Z+
     cc6:	f0 81       	ld	r31, Z
     cc8:	e0 2d       	mov	r30, r0
     cca:	22 81       	ldd	r18, Z+2	; 0x02
     ccc:	33 81       	ldd	r19, Z+3	; 0x03
     cce:	2e 0f       	add	r18, r30
     cd0:	3f 1f       	adc	r19, r31
     cd2:	fc 01       	movw	r30, r24
     cd4:	40 81       	ld	r20, Z
     cd6:	e4 0f       	add	r30, r20
     cd8:	f1 1d       	adc	r31, r1
     cda:	e2 17       	cp	r30, r18
     cdc:	f3 07       	cpc	r31, r19
     cde:	a0 f4       	brcc	.+40     	; 0xd08 <udc_next_desc_in_iface+0x4c>
     ce0:	81 81       	ldd	r24, Z+1	; 0x01
     ce2:	84 30       	cpi	r24, 0x04	; 4
     ce4:	a1 f0       	breq	.+40     	; 0xd0e <udc_next_desc_in_iface+0x52>
     ce6:	86 13       	cpse	r24, r22
     ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <udc_next_desc_in_iface+0x3a>
     cea:	14 c0       	rjmp	.+40     	; 0xd14 <udc_next_desc_in_iface+0x58>
     cec:	81 81       	ldd	r24, Z+1	; 0x01
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	a1 f0       	breq	.+40     	; 0xd1a <udc_next_desc_in_iface+0x5e>
     cf2:	86 17       	cp	r24, r22
     cf4:	a9 f0       	breq	.+42     	; 0xd20 <udc_next_desc_in_iface+0x64>
     cf6:	80 81       	ld	r24, Z
     cf8:	e8 0f       	add	r30, r24
     cfa:	f1 1d       	adc	r31, r1
     cfc:	e2 17       	cp	r30, r18
     cfe:	f3 07       	cpc	r31, r19
     d00:	a8 f3       	brcs	.-22     	; 0xcec <udc_next_desc_in_iface+0x30>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	08 95       	ret
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	08 95       	ret
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	08 95       	ret
     d14:	8e 2f       	mov	r24, r30
     d16:	9f 2f       	mov	r25, r31
     d18:	08 95       	ret
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	08 95       	ret
     d20:	8e 2f       	mov	r24, r30
     d22:	9f 2f       	mov	r25, r31
     d24:	08 95       	ret

00000d26 <udc_valid_address>:
     d26:	80 91 27 27 	lds	r24, 0x2727
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	05 c7       	rjmp	.+3594   	; 0x1b38 <udd_set_address>
     d2e:	08 95       	ret

00000d30 <udc_update_iface_desc>:
     d30:	90 91 e6 25 	lds	r25, 0x25E6
     d34:	99 23       	and	r25, r25
     d36:	81 f1       	breq	.+96     	; 0xd98 <udc_update_iface_desc+0x68>
     d38:	e0 91 e4 25 	lds	r30, 0x25E4
     d3c:	f0 91 e5 25 	lds	r31, 0x25E5
     d40:	01 90       	ld	r0, Z+
     d42:	f0 81       	ld	r31, Z
     d44:	e0 2d       	mov	r30, r0
     d46:	94 81       	ldd	r25, Z+4	; 0x04
     d48:	89 17       	cp	r24, r25
     d4a:	40 f5       	brcc	.+80     	; 0xd9c <udc_update_iface_desc+0x6c>
     d4c:	e0 93 e2 25 	sts	0x25E2, r30
     d50:	f0 93 e3 25 	sts	0x25E3, r31
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	33 81       	ldd	r19, Z+3	; 0x03
     d58:	2e 0f       	add	r18, r30
     d5a:	3f 1f       	adc	r19, r31
     d5c:	e2 17       	cp	r30, r18
     d5e:	f3 07       	cpc	r31, r19
     d60:	f8 f4       	brcc	.+62     	; 0xda0 <udc_update_iface_desc+0x70>
     d62:	91 81       	ldd	r25, Z+1	; 0x01
     d64:	94 30       	cpi	r25, 0x04	; 4
     d66:	61 f4       	brne	.+24     	; 0xd80 <udc_update_iface_desc+0x50>
     d68:	92 81       	ldd	r25, Z+2	; 0x02
     d6a:	98 13       	cpse	r25, r24
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <udc_update_iface_desc+0x50>
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	96 13       	cpse	r25, r22
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <udc_update_iface_desc+0x50>
     d74:	e0 93 e2 25 	sts	0x25E2, r30
     d78:	f0 93 e3 25 	sts	0x25E3, r31
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	08 95       	ret
     d80:	90 81       	ld	r25, Z
     d82:	e9 0f       	add	r30, r25
     d84:	f1 1d       	adc	r31, r1
     d86:	e2 17       	cp	r30, r18
     d88:	f3 07       	cpc	r31, r19
     d8a:	58 f3       	brcs	.-42     	; 0xd62 <udc_update_iface_desc+0x32>
     d8c:	e0 93 e2 25 	sts	0x25E2, r30
     d90:	f0 93 e3 25 	sts	0x25E3, r31
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	08 95       	ret
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	08 95       	ret
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	08 95       	ret
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	08 95       	ret

00000da4 <udc_iface_disable>:
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	c8 2f       	mov	r28, r24
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	be df       	rcall	.-132    	; 0xd30 <udc_update_iface_desc>
     db4:	f8 2e       	mov	r15, r24
     db6:	88 23       	and	r24, r24
     db8:	81 f1       	breq	.+96     	; 0xe1a <udc_iface_disable+0x76>
     dba:	a0 91 e4 25 	lds	r26, 0x25E4
     dbe:	b0 91 e5 25 	lds	r27, 0x25E5
     dc2:	ec 2f       	mov	r30, r28
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	e2 0f       	add	r30, r18
     dd4:	f3 1f       	adc	r31, r19
     dd6:	00 81       	ld	r16, Z
     dd8:	11 81       	ldd	r17, Z+1	; 0x01
     dda:	d8 01       	movw	r26, r16
     ddc:	16 96       	adiw	r26, 0x06	; 6
     dde:	ed 91       	ld	r30, X+
     de0:	fc 91       	ld	r31, X
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	09 95       	icall
     de6:	68 2f       	mov	r22, r24
     de8:	8c 2f       	mov	r24, r28
     dea:	a2 df       	rcall	.-188    	; 0xd30 <udc_update_iface_desc>
     dec:	f8 2e       	mov	r15, r24
     dee:	88 23       	and	r24, r24
     df0:	a1 f0       	breq	.+40     	; 0xe1a <udc_iface_disable+0x76>
     df2:	c0 91 e2 25 	lds	r28, 0x25E2
     df6:	d0 91 e3 25 	lds	r29, 0x25E3
     dfa:	65 e0       	ldi	r22, 0x05	; 5
     dfc:	ce 01       	movw	r24, r28
     dfe:	5e df       	rcall	.-324    	; 0xcbc <udc_next_desc_in_iface>
     e00:	ec 01       	movw	r28, r24
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	21 f0       	breq	.+8      	; 0xe0e <udc_iface_disable+0x6a>
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <udd_ep_free>
     e0c:	f6 cf       	rjmp	.-20     	; 0xdfa <udc_iface_disable+0x56>
     e0e:	d8 01       	movw	r26, r16
     e10:	12 96       	adiw	r26, 0x02	; 2
     e12:	ed 91       	ld	r30, X+
     e14:	fc 91       	ld	r31, X
     e16:	13 97       	sbiw	r26, 0x03	; 3
     e18:	09 95       	icall
     e1a:	8f 2d       	mov	r24, r15
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	08 95       	ret

00000e28 <udc_iface_enable>:
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	18 2f       	mov	r17, r24
     e30:	7f df       	rcall	.-258    	; 0xd30 <udc_update_iface_desc>
     e32:	88 23       	and	r24, r24
     e34:	39 f1       	breq	.+78     	; 0xe84 <udc_iface_enable+0x5c>
     e36:	c0 91 e2 25 	lds	r28, 0x25E2
     e3a:	d0 91 e3 25 	lds	r29, 0x25E3
     e3e:	65 e0       	ldi	r22, 0x05	; 5
     e40:	ce 01       	movw	r24, r28
     e42:	3c df       	rcall	.-392    	; 0xcbc <udc_next_desc_in_iface>
     e44:	ec 01       	movw	r28, r24
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	41 f0       	breq	.+16     	; 0xe5a <udc_iface_enable+0x32>
     e4a:	4c 81       	ldd	r20, Y+4	; 0x04
     e4c:	5d 81       	ldd	r21, Y+5	; 0x05
     e4e:	6b 81       	ldd	r22, Y+3	; 0x03
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	89 d6       	rcall	.+3346   	; 0x1b66 <udd_ep_alloc>
     e54:	81 11       	cpse	r24, r1
     e56:	f3 cf       	rjmp	.-26     	; 0xe3e <udc_iface_enable+0x16>
     e58:	15 c0       	rjmp	.+42     	; 0xe84 <udc_iface_enable+0x5c>
     e5a:	a0 91 e4 25 	lds	r26, 0x25E4
     e5e:	b0 91 e5 25 	lds	r27, 0x25E5
     e62:	81 2f       	mov	r24, r17
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	12 96       	adiw	r26, 0x02	; 2
     e6c:	ed 91       	ld	r30, X+
     e6e:	fc 91       	ld	r31, X
     e70:	13 97       	sbiw	r26, 0x03	; 3
     e72:	e8 0f       	add	r30, r24
     e74:	f9 1f       	adc	r31, r25
     e76:	01 90       	ld	r0, Z+
     e78:	f0 81       	ld	r31, Z
     e7a:	e0 2d       	mov	r30, r0
     e7c:	01 90       	ld	r0, Z+
     e7e:	f0 81       	ld	r31, Z
     e80:	e0 2d       	mov	r30, r0
     e82:	09 95       	icall
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	08 95       	ret

00000e8c <udc_start>:
     e8c:	e1 c5       	rjmp	.+3010   	; 0x1a50 <udd_enable>
     e8e:	08 95       	ret

00000e90 <udc_reset>:
     e90:	cf 93       	push	r28
     e92:	80 91 e6 25 	lds	r24, 0x25E6
     e96:	88 23       	and	r24, r24
     e98:	c1 f0       	breq	.+48     	; 0xeca <udc_reset+0x3a>
     e9a:	e0 91 e4 25 	lds	r30, 0x25E4
     e9e:	f0 91 e5 25 	lds	r31, 0x25E5
     ea2:	01 90       	ld	r0, Z+
     ea4:	f0 81       	ld	r31, Z
     ea6:	e0 2d       	mov	r30, r0
     ea8:	84 81       	ldd	r24, Z+4	; 0x04
     eaa:	88 23       	and	r24, r24
     eac:	71 f0       	breq	.+28     	; 0xeca <udc_reset+0x3a>
     eae:	c0 e0       	ldi	r28, 0x00	; 0
     eb0:	8c 2f       	mov	r24, r28
     eb2:	78 df       	rcall	.-272    	; 0xda4 <udc_iface_disable>
     eb4:	cf 5f       	subi	r28, 0xFF	; 255
     eb6:	e0 91 e4 25 	lds	r30, 0x25E4
     eba:	f0 91 e5 25 	lds	r31, 0x25E5
     ebe:	01 90       	ld	r0, Z+
     ec0:	f0 81       	ld	r31, Z
     ec2:	e0 2d       	mov	r30, r0
     ec4:	84 81       	ldd	r24, Z+4	; 0x04
     ec6:	c8 17       	cp	r28, r24
     ec8:	98 f3       	brcs	.-26     	; 0xeb0 <udc_reset+0x20>
     eca:	10 92 e6 25 	sts	0x25E6, r1
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	80 93 e7 25 	sts	0x25E7, r24
     ed6:	90 93 e8 25 	sts	0x25E8, r25
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     ede:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     ee0:	80 91 e6 25 	lds	r24, 0x25E6
     ee4:	88 23       	and	r24, r24
     ee6:	41 f1       	breq	.+80     	; 0xf38 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ee8:	e0 91 e4 25 	lds	r30, 0x25E4
     eec:	f0 91 e5 25 	lds	r31, 0x25E5
     ef0:	a0 81       	ld	r26, Z
     ef2:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ef4:	14 96       	adiw	r26, 0x04	; 4
     ef6:	8c 91       	ld	r24, X
     ef8:	88 23       	and	r24, r24
     efa:	f1 f0       	breq	.+60     	; 0xf38 <udc_sof_notify+0x5a>
     efc:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     efe:	8c 2f       	mov	r24, r28
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	02 80       	ldd	r0, Z+2	; 0x02
     f08:	f3 81       	ldd	r31, Z+3	; 0x03
     f0a:	e0 2d       	mov	r30, r0
     f0c:	e8 0f       	add	r30, r24
     f0e:	f9 1f       	adc	r31, r25
     f10:	01 90       	ld	r0, Z+
     f12:	f0 81       	ld	r31, Z
     f14:	e0 2d       	mov	r30, r0
     f16:	00 84       	ldd	r0, Z+8	; 0x08
     f18:	f1 85       	ldd	r31, Z+9	; 0x09
     f1a:	e0 2d       	mov	r30, r0
     f1c:	30 97       	sbiw	r30, 0x00	; 0
     f1e:	09 f0       	breq	.+2      	; 0xf22 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     f20:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     f22:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f24:	e0 91 e4 25 	lds	r30, 0x25E4
     f28:	f0 91 e5 25 	lds	r31, 0x25E5
     f2c:	a0 81       	ld	r26, Z
     f2e:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     f30:	14 96       	adiw	r26, 0x04	; 4
     f32:	8c 91       	ld	r24, X
     f34:	c8 17       	cp	r28, r24
     f36:	18 f3       	brcs	.-58     	; 0xefe <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     f48:	10 92 2f 27 	sts	0x272F, r1
     f4c:	10 92 30 27 	sts	0x2730, r1
	udd_g_ctrlreq.callback = NULL;
     f50:	10 92 31 27 	sts	0x2731, r1
     f54:	10 92 32 27 	sts	0x2732, r1
	udd_g_ctrlreq.over_under_run = NULL;
     f58:	10 92 33 27 	sts	0x2733, r1
     f5c:	10 92 34 27 	sts	0x2734, r1

	if (Udd_setup_is_in()) {
     f60:	20 91 25 27 	lds	r18, 0x2725
     f64:	22 23       	and	r18, r18
     f66:	0c f0       	brlt	.+2      	; 0xf6a <udc_process_setup+0x2e>
     f68:	78 c2       	rjmp	.+1264   	; 0x145a <udc_process_setup+0x51e>
		if (udd_g_ctrlreq.req.wLength == 0) {
     f6a:	80 91 2b 27 	lds	r24, 0x272B
     f6e:	90 91 2c 27 	lds	r25, 0x272C
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	09 f0       	breq	.+2      	; 0xf78 <udc_process_setup+0x3c>
     f76:	76 c2       	rjmp	.+1260   	; 0x1464 <udc_process_setup+0x528>
     f78:	6c c2       	rjmp	.+1240   	; 0x1452 <udc_process_setup+0x516>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     f7a:	2f 71       	andi	r18, 0x1F	; 31
     f7c:	09 f0       	breq	.+2      	; 0xf80 <udc_process_setup+0x44>
     f7e:	9e c0       	rjmp	.+316    	; 0x10bc <udc_process_setup+0x180>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     f80:	30 91 26 27 	lds	r19, 0x2726
     f84:	36 30       	cpi	r19, 0x06	; 6
     f86:	81 f0       	breq	.+32     	; 0xfa8 <udc_process_setup+0x6c>
     f88:	38 30       	cpi	r19, 0x08	; 8
     f8a:	09 f4       	brne	.+2      	; 0xf8e <udc_process_setup+0x52>
     f8c:	8c c0       	rjmp	.+280    	; 0x10a6 <udc_process_setup+0x16a>
     f8e:	31 11       	cpse	r19, r1
     f90:	95 c0       	rjmp	.+298    	; 0x10bc <udc_process_setup+0x180>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     f92:	02 97       	sbiw	r24, 0x02	; 2
     f94:	39 f4       	brne	.+14     	; 0xfa4 <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     f96:	62 e0       	ldi	r22, 0x02	; 2
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	87 ee       	ldi	r24, 0xE7	; 231
     f9c:	95 e2       	ldi	r25, 0x25	; 37
     f9e:	da d5       	rcall	.+2996   	; 0x1b54 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     fa0:	01 e0       	ldi	r16, 0x01	; 1
     fa2:	da c1       	rjmp	.+948    	; 0x1358 <udc_process_setup+0x41c>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     fa4:	00 e0       	ldi	r16, 0x00	; 0
     fa6:	d8 c1       	rjmp	.+944    	; 0x1358 <udc_process_setup+0x41c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     fa8:	20 91 27 27 	lds	r18, 0x2727
     fac:	30 91 28 27 	lds	r19, 0x2728

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     fb0:	83 2f       	mov	r24, r19
     fb2:	99 27       	eor	r25, r25
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	91 05       	cpc	r25, r1
     fb8:	79 f0       	breq	.+30     	; 0xfd8 <udc_process_setup+0x9c>
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	91 05       	cpc	r25, r1
     fbe:	69 f1       	breq	.+90     	; 0x101a <udc_process_setup+0xde>
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <udc_process_setup+0x8a>
     fc4:	68 c0       	rjmp	.+208    	; 0x1096 <udc_process_setup+0x15a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     fc6:	80 91 14 20 	lds	r24, 0x2014
     fca:	90 91 15 20 	lds	r25, 0x2015
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     fce:	dc 01       	movw	r26, r24
     fd0:	6c 91       	ld	r22, X
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	bf d5       	rcall	.+2942   	; 0x1b54 <udd_set_setup_payload>
     fd6:	4e c0       	rjmp	.+156    	; 0x1074 <udc_process_setup+0x138>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     fd8:	e0 91 14 20 	lds	r30, 0x2014
     fdc:	f0 91 15 20 	lds	r31, 0x2015
     fe0:	81 89       	ldd	r24, Z+17	; 0x11
     fe2:	28 17       	cp	r18, r24
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <udc_process_setup+0xac>
     fe6:	59 c0       	rjmp	.+178    	; 0x109a <udc_process_setup+0x15e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     fe8:	c9 01       	movw	r24, r18
     fea:	99 27       	eor	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	e0 91 16 20 	lds	r30, 0x2016
     ff8:	f0 91 17 20 	lds	r31, 0x2017
     ffc:	e8 0f       	add	r30, r24
     ffe:	f9 1f       	adc	r31, r25
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1004:	fc 01       	movw	r30, r24
    1006:	62 81       	ldd	r22, Z+2	; 0x02
    1008:	73 81       	ldd	r23, Z+3	; 0x03
    100a:	a4 d5       	rcall	.+2888   	; 0x1b54 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    100c:	e0 91 2d 27 	lds	r30, 0x272D
    1010:	f0 91 2e 27 	lds	r31, 0x272E
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	81 83       	std	Z+1, r24	; 0x01
    1018:	2d c0       	rjmp	.+90     	; 0x1074 <udc_process_setup+0x138>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    101a:	33 27       	eor	r19, r19
    101c:	21 30       	cpi	r18, 0x01	; 1
    101e:	31 05       	cpc	r19, r1
    1020:	81 f0       	breq	.+32     	; 0x1042 <udc_process_setup+0x106>
    1022:	48 f0       	brcs	.+18     	; 0x1036 <udc_process_setup+0xfa>
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <udc_process_setup+0xf0>
    102a:	21 c2       	rjmp	.+1090   	; 0x146e <udc_process_setup+0x532>
    102c:	23 30       	cpi	r18, 0x03	; 3
    102e:	31 05       	cpc	r19, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <udc_process_setup+0xf8>
    1032:	21 c2       	rjmp	.+1090   	; 0x1476 <udc_process_setup+0x53a>
    1034:	34 c0       	rjmp	.+104    	; 0x109e <udc_process_setup+0x162>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1036:	64 e0       	ldi	r22, 0x04	; 4
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	8c ea       	ldi	r24, 0xAC	; 172
    103c:	90 e2       	ldi	r25, 0x20	; 32
    103e:	8a d5       	rcall	.+2836   	; 0x1b54 <udd_set_setup_payload>
    1040:	19 c0       	rjmp	.+50     	; 0x1074 <udc_process_setup+0x138>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1042:	8d e9       	ldi	r24, 0x9D	; 157
    1044:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1046:	2e e0       	ldi	r18, 0x0E	; 14
    1048:	38 2f       	mov	r19, r24
    104a:	a8 e7       	ldi	r26, 0x78	; 120
    104c:	b0 e2       	ldi	r27, 0x20	; 32
    104e:	e8 2f       	mov	r30, r24
    1050:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1052:	81 91       	ld	r24, Z+
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	8d 93       	st	X+, r24
    1058:	9d 93       	st	X+, r25
    105a:	8e 2f       	mov	r24, r30
    105c:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    105e:	82 17       	cp	r24, r18
    1060:	c0 f3       	brcs	.-16     	; 0x1052 <udc_process_setup+0x116>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1062:	22 0f       	add	r18, r18
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	62 0f       	add	r22, r18
    1068:	60 93 76 20 	sts	0x2076, r22
		udd_set_setup_payload(
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	86 e7       	ldi	r24, 0x76	; 118
    1070:	90 e2       	ldi	r25, 0x20	; 32
    1072:	70 d5       	rcall	.+2784   	; 0x1b54 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1074:	80 91 2b 27 	lds	r24, 0x272B
    1078:	90 91 2c 27 	lds	r25, 0x272C
    107c:	20 91 2f 27 	lds	r18, 0x272F
    1080:	30 91 30 27 	lds	r19, 0x2730
    1084:	82 17       	cp	r24, r18
    1086:	93 07       	cpc	r25, r19
    1088:	60 f4       	brcc	.+24     	; 0x10a2 <udc_process_setup+0x166>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    108a:	80 93 2f 27 	sts	0x272F, r24
    108e:	90 93 30 27 	sts	0x2730, r25
	}
	return true;
    1092:	01 e0       	ldi	r16, 0x01	; 1
    1094:	61 c1       	rjmp	.+706    	; 0x1358 <udc_process_setup+0x41c>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1096:	00 e0       	ldi	r16, 0x00	; 0
    1098:	5f c1       	rjmp	.+702    	; 0x1358 <udc_process_setup+0x41c>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    109a:	00 e0       	ldi	r16, 0x00	; 0
    109c:	5d c1       	rjmp	.+698    	; 0x1358 <udc_process_setup+0x41c>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    109e:	00 e0       	ldi	r16, 0x00	; 0
    10a0:	5b c1       	rjmp	.+694    	; 0x1358 <udc_process_setup+0x41c>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    10a2:	01 e0       	ldi	r16, 0x01	; 1
    10a4:	59 c1       	rjmp	.+690    	; 0x1358 <udc_process_setup+0x41c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	39 f4       	brne	.+14     	; 0x10b8 <udc_process_setup+0x17c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	86 ee       	ldi	r24, 0xE6	; 230
    10b0:	95 e2       	ldi	r25, 0x25	; 37
    10b2:	50 d5       	rcall	.+2720   	; 0x1b54 <udd_set_setup_payload>
	return true;
    10b4:	01 e0       	ldi	r16, 0x01	; 1
    10b6:	50 c1       	rjmp	.+672    	; 0x1358 <udc_process_setup+0x41c>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    10b8:	00 e0       	ldi	r16, 0x00	; 0
    10ba:	4e c1       	rjmp	.+668    	; 0x1358 <udc_process_setup+0x41c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    10bc:	21 30       	cpi	r18, 0x01	; 1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <udc_process_setup+0x186>
    10c0:	3f c0       	rjmp	.+126    	; 0x1140 <udc_process_setup+0x204>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    10c2:	30 91 26 27 	lds	r19, 0x2726
    10c6:	3a 30       	cpi	r19, 0x0A	; 10
    10c8:	d9 f5       	brne	.+118    	; 0x1140 <udc_process_setup+0x204>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	99 f5       	brne	.+102    	; 0x1134 <udc_process_setup+0x1f8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    10ce:	80 91 e6 25 	lds	r24, 0x25E6
    10d2:	88 23       	and	r24, r24
    10d4:	89 f1       	breq	.+98     	; 0x1138 <udc_process_setup+0x1fc>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    10d6:	c0 91 29 27 	lds	r28, 0x2729
    10da:	d0 91 2a 27 	lds	r29, 0x272A
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    10de:	e0 90 e4 25 	lds	r14, 0x25E4
    10e2:	f0 90 e5 25 	lds	r15, 0x25E5
    10e6:	d7 01       	movw	r26, r14
    10e8:	ed 91       	ld	r30, X+
    10ea:	fc 91       	ld	r31, X
    10ec:	84 81       	ldd	r24, Z+4	; 0x04
    10ee:	c8 17       	cp	r28, r24
    10f0:	28 f5       	brcc	.+74     	; 0x113c <udc_process_setup+0x200>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	8c 2f       	mov	r24, r28
    10f6:	1c de       	rcall	.-968    	; 0xd30 <udc_update_iface_desc>
    10f8:	08 2f       	mov	r16, r24
    10fa:	88 23       	and	r24, r24
    10fc:	09 f4       	brne	.+2      	; 0x1100 <udc_process_setup+0x1c4>
    10fe:	2c c1       	rjmp	.+600    	; 0x1358 <udc_process_setup+0x41c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1100:	ce 01       	movw	r24, r28
    1102:	99 27       	eor	r25, r25
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	d7 01       	movw	r26, r14
    110a:	12 96       	adiw	r26, 0x02	; 2
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	13 97       	sbiw	r26, 0x03	; 3
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1116:	01 90       	ld	r0, Z+
    1118:	f0 81       	ld	r31, Z
    111a:	e0 2d       	mov	r30, r0
    111c:	06 80       	ldd	r0, Z+6	; 0x06
    111e:	f7 81       	ldd	r31, Z+7	; 0x07
    1120:	e0 2d       	mov	r30, r0
    1122:	09 95       	icall
    1124:	80 93 e1 25 	sts	0x25E1, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	81 ee       	ldi	r24, 0xE1	; 225
    112e:	95 e2       	ldi	r25, 0x25	; 37
    1130:	11 d5       	rcall	.+2594   	; 0x1b54 <udd_set_setup_payload>
    1132:	12 c1       	rjmp	.+548    	; 0x1358 <udc_process_setup+0x41c>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    1134:	00 e0       	ldi	r16, 0x00	; 0
    1136:	10 c1       	rjmp	.+544    	; 0x1358 <udc_process_setup+0x41c>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    1138:	00 e0       	ldi	r16, 0x00	; 0
    113a:	0e c1       	rjmp	.+540    	; 0x1358 <udc_process_setup+0x41c>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    113c:	00 e0       	ldi	r16, 0x00	; 0
    113e:	0c c1       	rjmp	.+536    	; 0x1358 <udc_process_setup+0x41c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	09 f0       	breq	.+2      	; 0x1146 <udc_process_setup+0x20a>
    1144:	0b c1       	rjmp	.+534    	; 0x135c <udc_process_setup+0x420>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1146:	20 91 26 27 	lds	r18, 0x2726
    114a:	21 11       	cpse	r18, r1
    114c:	00 c1       	rjmp	.+512    	; 0x134e <udc_process_setup+0x412>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    114e:	02 97       	sbiw	r24, 0x02	; 2
    1150:	79 f4       	brne	.+30     	; 0x1170 <udc_process_setup+0x234>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1152:	80 91 29 27 	lds	r24, 0x2729
    1156:	69 d5       	rcall	.+2770   	; 0x1c2a <udd_ep_is_halted>
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	80 93 df 25 	sts	0x25DF, r24
    115e:	90 93 e0 25 	sts	0x25E0, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1162:	62 e0       	ldi	r22, 0x02	; 2
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	8f ed       	ldi	r24, 0xDF	; 223
    1168:	95 e2       	ldi	r25, 0x25	; 37
    116a:	f4 d4       	rcall	.+2536   	; 0x1b54 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    116c:	01 e0       	ldi	r16, 0x01	; 1
    116e:	f4 c0       	rjmp	.+488    	; 0x1358 <udc_process_setup+0x41c>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    1170:	00 e0       	ldi	r16, 0x00	; 0
    1172:	f2 c0       	rjmp	.+484    	; 0x1358 <udc_process_setup+0x41c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1174:	2f 71       	andi	r18, 0x1F	; 31
    1176:	09 f0       	breq	.+2      	; 0x117a <udc_process_setup+0x23e>
    1178:	90 c0       	rjmp	.+288    	; 0x129a <udc_process_setup+0x35e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    117a:	80 91 26 27 	lds	r24, 0x2726
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	09 f4       	brne	.+2      	; 0x1184 <udc_process_setup+0x248>
    1182:	e7 c0       	rjmp	.+462    	; 0x1352 <udc_process_setup+0x416>
    1184:	18 f4       	brcc	.+6      	; 0x118c <udc_process_setup+0x250>
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	b1 f0       	breq	.+44     	; 0x11b6 <udc_process_setup+0x27a>
    118a:	87 c0       	rjmp	.+270    	; 0x129a <udc_process_setup+0x35e>
    118c:	85 30       	cpi	r24, 0x05	; 5
    118e:	19 f0       	breq	.+6      	; 0x1196 <udc_process_setup+0x25a>
    1190:	89 30       	cpi	r24, 0x09	; 9
    1192:	61 f1       	breq	.+88     	; 0x11ec <udc_process_setup+0x2b0>
    1194:	82 c0       	rjmp	.+260    	; 0x129a <udc_process_setup+0x35e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1196:	80 91 2b 27 	lds	r24, 0x272B
    119a:	90 91 2c 27 	lds	r25, 0x272C
    119e:	89 2b       	or	r24, r25
    11a0:	41 f4       	brne	.+16     	; 0x11b2 <udc_process_setup+0x276>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    11a2:	83 e9       	ldi	r24, 0x93	; 147
    11a4:	96 e0       	ldi	r25, 0x06	; 6
    11a6:	80 93 31 27 	sts	0x2731, r24
    11aa:	90 93 32 27 	sts	0x2732, r25
	return true;
    11ae:	01 e0       	ldi	r16, 0x01	; 1
    11b0:	d3 c0       	rjmp	.+422    	; 0x1358 <udc_process_setup+0x41c>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    11b2:	00 e0       	ldi	r16, 0x00	; 0
    11b4:	d1 c0       	rjmp	.+418    	; 0x1358 <udc_process_setup+0x41c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    11b6:	80 91 2b 27 	lds	r24, 0x272B
    11ba:	90 91 2c 27 	lds	r25, 0x272C
    11be:	89 2b       	or	r24, r25
    11c0:	89 f4       	brne	.+34     	; 0x11e4 <udc_process_setup+0x2a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    11c2:	80 91 27 27 	lds	r24, 0x2727
    11c6:	90 91 28 27 	lds	r25, 0x2728
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	69 f4       	brne	.+26     	; 0x11e8 <udc_process_setup+0x2ac>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    11ce:	80 91 e7 25 	lds	r24, 0x25E7
    11d2:	90 91 e8 25 	lds	r25, 0x25E8
    11d6:	8d 7f       	andi	r24, 0xFD	; 253
    11d8:	80 93 e7 25 	sts	0x25E7, r24
    11dc:	90 93 e8 25 	sts	0x25E8, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    11e0:	01 e0       	ldi	r16, 0x01	; 1
    11e2:	ba c0       	rjmp	.+372    	; 0x1358 <udc_process_setup+0x41c>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    11e4:	00 e0       	ldi	r16, 0x00	; 0
    11e6:	b8 c0       	rjmp	.+368    	; 0x1358 <udc_process_setup+0x41c>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    11e8:	00 e0       	ldi	r16, 0x00	; 0
    11ea:	b6 c0       	rjmp	.+364    	; 0x1358 <udc_process_setup+0x41c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    11ec:	80 91 2b 27 	lds	r24, 0x272B
    11f0:	90 91 2c 27 	lds	r25, 0x272C
    11f4:	89 2b       	or	r24, r25
    11f6:	09 f0       	breq	.+2      	; 0x11fa <udc_process_setup+0x2be>
    11f8:	46 c0       	rjmp	.+140    	; 0x1286 <udc_process_setup+0x34a>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    11fa:	a1 d4       	rcall	.+2370   	; 0x1b3e <udd_getaddress>
    11fc:	88 23       	and	r24, r24
    11fe:	09 f4       	brne	.+2      	; 0x1202 <udc_process_setup+0x2c6>
    1200:	44 c0       	rjmp	.+136    	; 0x128a <udc_process_setup+0x34e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1202:	20 91 27 27 	lds	r18, 0x2727
    1206:	30 91 28 27 	lds	r19, 0x2728
    120a:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    120c:	e0 91 14 20 	lds	r30, 0x2014
    1210:	f0 91 15 20 	lds	r31, 0x2015
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1214:	81 89       	ldd	r24, Z+17	; 0x11
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	82 17       	cp	r24, r18
    121a:	93 07       	cpc	r25, r19
    121c:	c0 f1       	brcs	.+112    	; 0x128e <udc_process_setup+0x352>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    121e:	38 de       	rcall	.-912    	; 0xe90 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1220:	80 91 27 27 	lds	r24, 0x2727
    1224:	90 91 28 27 	lds	r25, 0x2728
    1228:	80 93 e6 25 	sts	0x25E6, r24
	if (udc_num_configuration == 0) {
    122c:	88 23       	and	r24, r24
    122e:	89 f1       	breq	.+98     	; 0x1292 <udc_process_setup+0x356>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1230:	99 27       	eor	r25, r25
    1232:	81 50       	subi	r24, 0x01	; 1
    1234:	90 4c       	sbci	r25, 0xC0	; 192
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	e0 91 16 20 	lds	r30, 0x2016
    1242:	f0 91 17 20 	lds	r31, 0x2017
    1246:	e8 0f       	add	r30, r24
    1248:	f9 1f       	adc	r31, r25
    124a:	e0 93 e4 25 	sts	0x25E4, r30
    124e:	f0 93 e5 25 	sts	0x25E5, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1252:	01 90       	ld	r0, Z+
    1254:	f0 81       	ld	r31, Z
    1256:	e0 2d       	mov	r30, r0
    1258:	84 81       	ldd	r24, Z+4	; 0x04
    125a:	88 23       	and	r24, r24
    125c:	e1 f0       	breq	.+56     	; 0x1296 <udc_process_setup+0x35a>
    125e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	8c 2f       	mov	r24, r28
    1264:	e1 dd       	rcall	.-1086   	; 0xe28 <udc_iface_enable>
    1266:	08 2f       	mov	r16, r24
    1268:	88 23       	and	r24, r24
    126a:	09 f4       	brne	.+2      	; 0x126e <udc_process_setup+0x332>
    126c:	75 c0       	rjmp	.+234    	; 0x1358 <udc_process_setup+0x41c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    126e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1270:	e0 91 e4 25 	lds	r30, 0x25E4
    1274:	f0 91 e5 25 	lds	r31, 0x25E5
    1278:	01 90       	ld	r0, Z+
    127a:	f0 81       	ld	r31, Z
    127c:	e0 2d       	mov	r30, r0
    127e:	84 81       	ldd	r24, Z+4	; 0x04
    1280:	c8 17       	cp	r28, r24
    1282:	70 f3       	brcs	.-36     	; 0x1260 <udc_process_setup+0x324>
    1284:	69 c0       	rjmp	.+210    	; 0x1358 <udc_process_setup+0x41c>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	67 c0       	rjmp	.+206    	; 0x1358 <udc_process_setup+0x41c>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    128a:	00 e0       	ldi	r16, 0x00	; 0
    128c:	65 c0       	rjmp	.+202    	; 0x1358 <udc_process_setup+0x41c>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	63 c0       	rjmp	.+198    	; 0x1358 <udc_process_setup+0x41c>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    1292:	01 e0       	ldi	r16, 0x01	; 1
    1294:	61 c0       	rjmp	.+194    	; 0x1358 <udc_process_setup+0x41c>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    1296:	01 e0       	ldi	r16, 0x01	; 1
    1298:	5f c0       	rjmp	.+190    	; 0x1358 <udc_process_setup+0x41c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	09 f5       	brne	.+66     	; 0x12e0 <udc_process_setup+0x3a4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    129e:	80 91 26 27 	lds	r24, 0x2726
    12a2:	8b 30       	cpi	r24, 0x0B	; 11
    12a4:	e9 f4       	brne	.+58     	; 0x12e0 <udc_process_setup+0x3a4>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    12a6:	80 91 2b 27 	lds	r24, 0x272B
    12aa:	90 91 2c 27 	lds	r25, 0x272C
    12ae:	89 2b       	or	r24, r25
    12b0:	99 f4       	brne	.+38     	; 0x12d8 <udc_process_setup+0x39c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    12b2:	80 91 e6 25 	lds	r24, 0x25E6
    12b6:	88 23       	and	r24, r24
    12b8:	89 f0       	breq	.+34     	; 0x12dc <udc_process_setup+0x3a0>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    12ba:	c0 91 29 27 	lds	r28, 0x2729
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    12be:	d0 91 27 27 	lds	r29, 0x2727

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    12c2:	8c 2f       	mov	r24, r28
    12c4:	6f dd       	rcall	.-1314   	; 0xda4 <udc_iface_disable>
    12c6:	08 2f       	mov	r16, r24
    12c8:	88 23       	and	r24, r24
    12ca:	09 f4       	brne	.+2      	; 0x12ce <udc_process_setup+0x392>
    12cc:	45 c0       	rjmp	.+138    	; 0x1358 <udc_process_setup+0x41c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    12ce:	6d 2f       	mov	r22, r29
    12d0:	8c 2f       	mov	r24, r28
    12d2:	aa dd       	rcall	.-1196   	; 0xe28 <udc_iface_enable>
    12d4:	08 2f       	mov	r16, r24
    12d6:	40 c0       	rjmp	.+128    	; 0x1358 <udc_process_setup+0x41c>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    12d8:	00 e0       	ldi	r16, 0x00	; 0
    12da:	3e c0       	rjmp	.+124    	; 0x1358 <udc_process_setup+0x41c>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    12dc:	00 e0       	ldi	r16, 0x00	; 0
    12de:	3c c0       	rjmp	.+120    	; 0x1358 <udc_process_setup+0x41c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <udc_process_setup+0x3aa>
    12e4:	3b c0       	rjmp	.+118    	; 0x135c <udc_process_setup+0x420>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    12e6:	80 91 26 27 	lds	r24, 0x2726
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <udc_process_setup+0x3b8>
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	b1 f0       	breq	.+44     	; 0x131e <udc_process_setup+0x3e2>
    12f2:	31 c0       	rjmp	.+98     	; 0x1356 <udc_process_setup+0x41a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    12f4:	80 91 2b 27 	lds	r24, 0x272B
    12f8:	90 91 2c 27 	lds	r25, 0x272C
    12fc:	89 2b       	or	r24, r25
    12fe:	59 f4       	brne	.+22     	; 0x1316 <udc_process_setup+0x3da>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1300:	80 91 27 27 	lds	r24, 0x2727
    1304:	90 91 28 27 	lds	r25, 0x2728
    1308:	89 2b       	or	r24, r25
    130a:	39 f4       	brne	.+14     	; 0x131a <udc_process_setup+0x3de>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    130c:	80 91 29 27 	lds	r24, 0x2729
    1310:	a7 d4       	rcall	.+2382   	; 0x1c60 <udd_ep_clear_halt>
    1312:	08 2f       	mov	r16, r24
    1314:	21 c0       	rjmp	.+66     	; 0x1358 <udc_process_setup+0x41c>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1316:	00 e0       	ldi	r16, 0x00	; 0
    1318:	1f c0       	rjmp	.+62     	; 0x1358 <udc_process_setup+0x41c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    131a:	00 e0       	ldi	r16, 0x00	; 0
    131c:	1d c0       	rjmp	.+58     	; 0x1358 <udc_process_setup+0x41c>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    131e:	80 91 2b 27 	lds	r24, 0x272B
    1322:	90 91 2c 27 	lds	r25, 0x272C
    1326:	89 2b       	or	r24, r25
    1328:	71 f4       	brne	.+28     	; 0x1346 <udc_process_setup+0x40a>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    132a:	80 91 27 27 	lds	r24, 0x2727
    132e:	90 91 28 27 	lds	r25, 0x2728
    1332:	89 2b       	or	r24, r25
    1334:	51 f4       	brne	.+20     	; 0x134a <udc_process_setup+0x40e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1336:	c9 e2       	ldi	r28, 0x29	; 41
    1338:	d7 e2       	ldi	r29, 0x27	; 39
    133a:	88 81       	ld	r24, Y
    133c:	42 d5       	rcall	.+2692   	; 0x1dc2 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    133e:	88 81       	ld	r24, Y
    1340:	97 d5       	rcall	.+2862   	; 0x1e70 <udd_ep_set_halt>
    1342:	08 2f       	mov	r16, r24
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <udc_process_setup+0x41c>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1346:	00 e0       	ldi	r16, 0x00	; 0
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <udc_process_setup+0x41c>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <udc_process_setup+0x41c>
				break;
			}
		}
#endif
	}
	return false;
    134e:	00 e0       	ldi	r16, 0x00	; 0
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <udc_process_setup+0x41c>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1352:	00 e0       	ldi	r16, 0x00	; 0
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <udc_process_setup+0x41c>
				break;
			}
		}
#endif
	}
	return false;
    1356:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1358:	01 11       	cpse	r16, r1
    135a:	91 c0       	rjmp	.+290    	; 0x147e <udc_process_setup+0x542>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    135c:	80 91 25 27 	lds	r24, 0x2725
    1360:	8f 71       	andi	r24, 0x1F	; 31
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	c1 f5       	brne	.+112    	; 0x13d6 <udc_process_setup+0x49a>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1366:	80 91 e6 25 	lds	r24, 0x25E6
    136a:	88 23       	and	r24, r24
    136c:	a1 f1       	breq	.+104    	; 0x13d6 <udc_process_setup+0x49a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    136e:	c0 91 29 27 	lds	r28, 0x2729
    1372:	d0 91 2a 27 	lds	r29, 0x272A
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1376:	00 91 e4 25 	lds	r16, 0x25E4
    137a:	10 91 e5 25 	lds	r17, 0x25E5
    137e:	d8 01       	movw	r26, r16
    1380:	ed 91       	ld	r30, X+
    1382:	fc 91       	ld	r31, X
    1384:	84 81       	ldd	r24, Z+4	; 0x04
    1386:	c8 17       	cp	r28, r24
    1388:	30 f5       	brcc	.+76     	; 0x13d6 <udc_process_setup+0x49a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	8c 2f       	mov	r24, r28
    138e:	d0 dc       	rcall	.-1632   	; 0xd30 <udc_update_iface_desc>
    1390:	88 23       	and	r24, r24
    1392:	09 f1       	breq	.+66     	; 0x13d6 <udc_process_setup+0x49a>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1394:	ce 01       	movw	r24, r28
    1396:	99 27       	eor	r25, r25
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	d8 01       	movw	r26, r16
    139e:	12 96       	adiw	r26, 0x02	; 2
    13a0:	ed 91       	ld	r30, X+
    13a2:	fc 91       	ld	r31, X
    13a4:	13 97       	sbiw	r26, 0x03	; 3
    13a6:	e8 0f       	add	r30, r24
    13a8:	f9 1f       	adc	r31, r25
    13aa:	00 81       	ld	r16, Z
    13ac:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    13ae:	d8 01       	movw	r26, r16
    13b0:	16 96       	adiw	r26, 0x06	; 6
    13b2:	ed 91       	ld	r30, X+
    13b4:	fc 91       	ld	r31, X
    13b6:	17 97       	sbiw	r26, 0x07	; 7
    13b8:	09 95       	icall
    13ba:	68 2f       	mov	r22, r24
    13bc:	8c 2f       	mov	r24, r28
    13be:	b8 dc       	rcall	.-1680   	; 0xd30 <udc_update_iface_desc>
    13c0:	88 23       	and	r24, r24
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <udc_process_setup+0x49a>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    13c4:	d8 01       	movw	r26, r16
    13c6:	14 96       	adiw	r26, 0x04	; 4
    13c8:	ed 91       	ld	r30, X+
    13ca:	fc 91       	ld	r31, X
    13cc:	15 97       	sbiw	r26, 0x05	; 5
    13ce:	09 95       	icall
    13d0:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    13d2:	81 11       	cpse	r24, r1
    13d4:	54 c0       	rjmp	.+168    	; 0x147e <udc_process_setup+0x542>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    13d6:	80 91 25 27 	lds	r24, 0x2725
    13da:	8f 71       	andi	r24, 0x1F	; 31
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	d9 f5       	brne	.+118    	; 0x1456 <udc_process_setup+0x51a>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    13e0:	80 91 e6 25 	lds	r24, 0x25E6
    13e4:	88 23       	and	r24, r24
    13e6:	89 f1       	breq	.+98     	; 0x144a <udc_process_setup+0x50e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13e8:	e0 91 e4 25 	lds	r30, 0x25E4
    13ec:	f0 91 e5 25 	lds	r31, 0x25E5
    13f0:	a0 81       	ld	r26, Z
    13f2:	b1 81       	ldd	r27, Z+1	; 0x01
    13f4:	14 96       	adiw	r26, 0x04	; 4
    13f6:	8c 91       	ld	r24, X
    13f8:	88 23       	and	r24, r24
    13fa:	49 f1       	breq	.+82     	; 0x144e <udc_process_setup+0x512>
    13fc:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    13fe:	21 2f       	mov	r18, r17
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	02 80       	ldd	r0, Z+2	; 0x02
    1408:	f3 81       	ldd	r31, Z+3	; 0x03
    140a:	e0 2d       	mov	r30, r0
    140c:	e2 0f       	add	r30, r18
    140e:	f3 1f       	adc	r31, r19
    1410:	c0 81       	ld	r28, Z
    1412:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1414:	ee 81       	ldd	r30, Y+6	; 0x06
    1416:	ff 81       	ldd	r31, Y+7	; 0x07
    1418:	09 95       	icall
    141a:	68 2f       	mov	r22, r24
    141c:	81 2f       	mov	r24, r17
    141e:	88 dc       	rcall	.-1776   	; 0xd30 <udc_update_iface_desc>
    1420:	08 2f       	mov	r16, r24
    1422:	88 23       	and	r24, r24
    1424:	61 f1       	breq	.+88     	; 0x147e <udc_process_setup+0x542>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1426:	ec 81       	ldd	r30, Y+4	; 0x04
    1428:	fd 81       	ldd	r31, Y+5	; 0x05
    142a:	09 95       	icall
    142c:	08 2f       	mov	r16, r24
    142e:	81 11       	cpse	r24, r1
    1430:	26 c0       	rjmp	.+76     	; 0x147e <udc_process_setup+0x542>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1432:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1434:	e0 91 e4 25 	lds	r30, 0x25E4
    1438:	f0 91 e5 25 	lds	r31, 0x25E5
    143c:	a0 81       	ld	r26, Z
    143e:	b1 81       	ldd	r27, Z+1	; 0x01
    1440:	14 96       	adiw	r26, 0x04	; 4
    1442:	8c 91       	ld	r24, X
    1444:	18 17       	cp	r17, r24
    1446:	d8 f2       	brcs	.-74     	; 0x13fe <udc_process_setup+0x4c2>
    1448:	1a c0       	rjmp	.+52     	; 0x147e <udc_process_setup+0x542>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    144a:	00 e0       	ldi	r16, 0x00	; 0
    144c:	18 c0       	rjmp	.+48     	; 0x147e <udc_process_setup+0x542>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    144e:	00 e0       	ldi	r16, 0x00	; 0
    1450:	16 c0       	rjmp	.+44     	; 0x147e <udc_process_setup+0x542>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1452:	00 e0       	ldi	r16, 0x00	; 0
    1454:	14 c0       	rjmp	.+40     	; 0x147e <udc_process_setup+0x542>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1456:	00 e0       	ldi	r16, 0x00	; 0
    1458:	12 c0       	rjmp	.+36     	; 0x147e <udc_process_setup+0x542>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    145a:	82 2f       	mov	r24, r18
    145c:	80 76       	andi	r24, 0x60	; 96
    145e:	09 f0       	breq	.+2      	; 0x1462 <udc_process_setup+0x526>
    1460:	7d cf       	rjmp	.-262    	; 0x135c <udc_process_setup+0x420>
    1462:	88 ce       	rjmp	.-752    	; 0x1174 <udc_process_setup+0x238>
    1464:	32 2f       	mov	r19, r18
    1466:	30 76       	andi	r19, 0x60	; 96
    1468:	09 f0       	breq	.+2      	; 0x146c <udc_process_setup+0x530>
    146a:	78 cf       	rjmp	.-272    	; 0x135c <udc_process_setup+0x420>
    146c:	86 cd       	rjmp	.-1268   	; 0xf7a <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    146e:	28 e0       	ldi	r18, 0x08	; 8
		str = udc_string_product_name;
    1470:	84 e9       	ldi	r24, 0x94	; 148
    1472:	90 e2       	ldi	r25, 0x20	; 32
    1474:	e9 cd       	rjmp	.-1070   	; 0x1048 <udc_process_setup+0x10c>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1476:	21 e0       	ldi	r18, 0x01	; 1
		str = udc_get_string_serial_name();
    1478:	81 eb       	ldi	r24, 0xB1	; 177
    147a:	90 e2       	ldi	r25, 0x20	; 32
    147c:	e5 cd       	rjmp	.-1078   	; 0x1048 <udc_process_setup+0x10c>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    147e:	80 2f       	mov	r24, r16
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	08 95       	ret

0000148e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    148e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1490:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1492:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1494:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1496:	60 83       	st	Z, r22
	ret                             // Return to caller
    1498:	08 95       	ret

0000149a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    149a:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    149e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    14a0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    14a2:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    14a6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    14a8:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    14ac:	08 95       	ret

000014ae <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    14ae:	81 11       	cpse	r24, r1
    14b0:	18 c0       	rjmp	.+48     	; 0x14e2 <udd_sleep_mode+0x34>
    14b2:	90 91 14 27 	lds	r25, 0x2714
    14b6:	99 23       	and	r25, r25
    14b8:	89 f0       	breq	.+34     	; 0x14dc <udd_sleep_mode+0x2e>
    14ba:	9f b7       	in	r25, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	e0 e2       	ldi	r30, 0x20	; 32
    14c0:	f7 e2       	ldi	r31, 0x27	; 39
    14c2:	20 81       	ld	r18, Z
    14c4:	21 50       	subi	r18, 0x01	; 1
    14c6:	20 83       	st	Z, r18
    14c8:	9f bf       	out	0x3f, r25	; 63
    14ca:	08 c0       	rjmp	.+16     	; 0x14dc <udd_sleep_mode+0x2e>
    14cc:	9f b7       	in	r25, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	e0 e2       	ldi	r30, 0x20	; 32
    14d2:	f7 e2       	ldi	r31, 0x27	; 39
    14d4:	20 81       	ld	r18, Z
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	20 83       	st	Z, r18
    14da:	9f bf       	out	0x3f, r25	; 63
    14dc:	80 93 14 27 	sts	0x2714, r24
    14e0:	08 95       	ret
    14e2:	90 91 14 27 	lds	r25, 0x2714
    14e6:	99 23       	and	r25, r25
    14e8:	89 f3       	breq	.-30     	; 0x14cc <udd_sleep_mode+0x1e>
    14ea:	f8 cf       	rjmp	.-16     	; 0x14dc <udd_sleep_mode+0x2e>

000014ec <udd_ctrl_init>:
    14ec:	0f 93       	push	r16
    14ee:	e8 ec       	ldi	r30, 0xC8	; 200
    14f0:	f4 e0       	ldi	r31, 0x04	; 4
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 7d       	andi	r24, 0xDF	; 223
    14f6:	80 83       	st	Z, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 7d       	andi	r24, 0xDF	; 223
    14fc:	80 83       	st	Z, r24
    14fe:	e8 ee       	ldi	r30, 0xE8	; 232
    1500:	f6 e2       	ldi	r31, 0x26	; 38
    1502:	02 e0       	ldi	r16, 0x02	; 2
    1504:	05 93       	las	Z, r16
    1506:	10 92 ea 26 	sts	0x26EA, r1
    150a:	10 92 eb 26 	sts	0x26EB, r1
    150e:	00 e2       	ldi	r16, 0x20	; 32
    1510:	06 93       	lac	Z, r16
    1512:	00 e4       	ldi	r16, 0x40	; 64
    1514:	06 93       	lac	Z, r16
    1516:	e0 ee       	ldi	r30, 0xE0	; 224
    1518:	f6 e2       	ldi	r31, 0x26	; 38
    151a:	00 e2       	ldi	r16, 0x20	; 32
    151c:	06 93       	lac	Z, r16
    151e:	00 e4       	ldi	r16, 0x40	; 64
    1520:	06 93       	lac	Z, r16
    1522:	10 92 31 27 	sts	0x2731, r1
    1526:	10 92 32 27 	sts	0x2732, r1
    152a:	10 92 33 27 	sts	0x2733, r1
    152e:	10 92 34 27 	sts	0x2734, r1
    1532:	10 92 2f 27 	sts	0x272F, r1
    1536:	10 92 30 27 	sts	0x2730, r1
    153a:	10 92 d2 26 	sts	0x26D2, r1
    153e:	10 92 d3 26 	sts	0x26D3, r1
    1542:	0f 91       	pop	r16
    1544:	08 95       	ret

00001546 <udd_ctrl_stall_data>:
    1546:	0f 93       	push	r16
    1548:	85 e0       	ldi	r24, 0x05	; 5
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	80 93 d2 26 	sts	0x26D2, r24
    1550:	90 93 d3 26 	sts	0x26D3, r25
    1554:	e9 ee       	ldi	r30, 0xE9	; 233
    1556:	f6 e2       	ldi	r31, 0x26	; 38
    1558:	04 e0       	ldi	r16, 0x04	; 4
    155a:	05 93       	las	Z, r16
    155c:	e1 ee       	ldi	r30, 0xE1	; 225
    155e:	f6 e2       	ldi	r31, 0x26	; 38
    1560:	04 e0       	ldi	r16, 0x04	; 4
    1562:	05 93       	las	Z, r16
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <udd_ctrl_send_zlp_in>:
    1568:	0f 93       	push	r16
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	80 93 d2 26 	sts	0x26D2, r24
    1572:	90 93 d3 26 	sts	0x26D3, r25
    1576:	10 92 ea 26 	sts	0x26EA, r1
    157a:	10 92 eb 26 	sts	0x26EB, r1
    157e:	e8 ee       	ldi	r30, 0xE8	; 232
    1580:	f6 e2       	ldi	r31, 0x26	; 38
    1582:	02 e0       	ldi	r16, 0x02	; 2
    1584:	06 93       	lac	Z, r16
    1586:	0f 91       	pop	r16
    1588:	08 95       	ret

0000158a <udd_ctrl_endofrequest>:
    158a:	e0 91 31 27 	lds	r30, 0x2731
    158e:	f0 91 32 27 	lds	r31, 0x2732
    1592:	30 97       	sbiw	r30, 0x00	; 0
    1594:	09 f0       	breq	.+2      	; 0x1598 <udd_ctrl_endofrequest+0xe>
    1596:	09 95       	icall
    1598:	08 95       	ret

0000159a <udd_ctrl_in_sent>:
    159a:	0f 93       	push	r16
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	80 91 d2 26 	lds	r24, 0x26D2
    15a4:	90 91 d3 26 	lds	r25, 0x26D3
    15a8:	03 97       	sbiw	r24, 0x03	; 3
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <udd_ctrl_in_sent+0x18>
    15ac:	ee df       	rcall	.-36     	; 0x158a <udd_ctrl_endofrequest>
    15ae:	9e df       	rcall	.-196    	; 0x14ec <udd_ctrl_init>
    15b0:	63 c0       	rjmp	.+198    	; 0x1678 <udd_ctrl_in_sent+0xde>
    15b2:	80 91 ce 26 	lds	r24, 0x26CE
    15b6:	90 91 cf 26 	lds	r25, 0x26CF
    15ba:	c0 91 2f 27 	lds	r28, 0x272F
    15be:	d0 91 30 27 	lds	r29, 0x2730
    15c2:	c8 1b       	sub	r28, r24
    15c4:	d9 0b       	sbc	r29, r25
    15c6:	89 f5       	brne	.+98     	; 0x162a <udd_ctrl_in_sent+0x90>
    15c8:	20 91 d0 26 	lds	r18, 0x26D0
    15cc:	30 91 d1 26 	lds	r19, 0x26D1
    15d0:	82 0f       	add	r24, r18
    15d2:	93 1f       	adc	r25, r19
    15d4:	80 93 d0 26 	sts	0x26D0, r24
    15d8:	90 93 d1 26 	sts	0x26D1, r25
    15dc:	20 91 2b 27 	lds	r18, 0x272B
    15e0:	30 91 2c 27 	lds	r19, 0x272C
    15e4:	82 17       	cp	r24, r18
    15e6:	93 07       	cpc	r25, r19
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <udd_ctrl_in_sent+0x58>
    15ea:	80 91 e9 25 	lds	r24, 0x25E9
    15ee:	88 23       	and	r24, r24
    15f0:	59 f0       	breq	.+22     	; 0x1608 <udd_ctrl_in_sent+0x6e>
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	80 93 d2 26 	sts	0x26D2, r24
    15fa:	90 93 d3 26 	sts	0x26D3, r25
    15fe:	e0 ee       	ldi	r30, 0xE0	; 224
    1600:	f6 e2       	ldi	r31, 0x26	; 38
    1602:	02 e0       	ldi	r16, 0x02	; 2
    1604:	06 93       	lac	Z, r16
    1606:	38 c0       	rjmp	.+112    	; 0x1678 <udd_ctrl_in_sent+0xde>
    1608:	e0 91 33 27 	lds	r30, 0x2733
    160c:	f0 91 34 27 	lds	r31, 0x2734
    1610:	30 97       	sbiw	r30, 0x00	; 0
    1612:	99 f0       	breq	.+38     	; 0x163a <udd_ctrl_in_sent+0xa0>
    1614:	09 95       	icall
    1616:	88 23       	and	r24, r24
    1618:	81 f0       	breq	.+32     	; 0x163a <udd_ctrl_in_sent+0xa0>
    161a:	10 92 ce 26 	sts	0x26CE, r1
    161e:	10 92 cf 26 	sts	0x26CF, r1
    1622:	c0 91 2f 27 	lds	r28, 0x272F
    1626:	d0 91 30 27 	lds	r29, 0x2730
    162a:	c0 34       	cpi	r28, 0x40	; 64
    162c:	d1 05       	cpc	r29, r1
    162e:	28 f0       	brcs	.+10     	; 0x163a <udd_ctrl_in_sent+0xa0>
    1630:	10 92 e9 25 	sts	0x25E9, r1
    1634:	c0 e4       	ldi	r28, 0x40	; 64
    1636:	d0 e0       	ldi	r29, 0x00	; 0
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <udd_ctrl_in_sent+0xa6>
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	80 93 e9 25 	sts	0x25E9, r24
    1640:	c0 93 ea 26 	sts	0x26EA, r28
    1644:	d0 93 eb 26 	sts	0x26EB, r29
    1648:	80 91 ce 26 	lds	r24, 0x26CE
    164c:	90 91 cf 26 	lds	r25, 0x26CF
    1650:	20 91 2d 27 	lds	r18, 0x272D
    1654:	30 91 2e 27 	lds	r19, 0x272E
    1658:	28 0f       	add	r18, r24
    165a:	39 1f       	adc	r19, r25
    165c:	20 93 ec 26 	sts	0x26EC, r18
    1660:	30 93 ed 26 	sts	0x26ED, r19
    1664:	c8 0f       	add	r28, r24
    1666:	d9 1f       	adc	r29, r25
    1668:	c0 93 ce 26 	sts	0x26CE, r28
    166c:	d0 93 cf 26 	sts	0x26CF, r29
    1670:	e8 ee       	ldi	r30, 0xE8	; 232
    1672:	f6 e2       	ldi	r31, 0x26	; 38
    1674:	02 e0       	ldi	r16, 0x02	; 2
    1676:	06 93       	lac	Z, r16
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	0f 91       	pop	r16
    167e:	08 95       	ret

00001680 <udd_ep_get_size>:
    1680:	fc 01       	movw	r30, r24
    1682:	81 81       	ldd	r24, Z+1	; 0x01
    1684:	87 70       	andi	r24, 0x07	; 7
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	fc 01       	movw	r30, r24
    168a:	31 97       	sbiw	r30, 0x01	; 1
    168c:	e7 30       	cpi	r30, 0x07	; 7
    168e:	f1 05       	cpc	r31, r1
    1690:	18 f4       	brcc	.+6      	; 0x1698 <udd_ep_get_size+0x18>
    1692:	e2 50       	subi	r30, 0x02	; 2
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	fb c6       	rjmp	.+3574   	; 0x248e <__tablejump2__>
    1698:	88 e0       	ldi	r24, 0x08	; 8
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	08 95       	ret
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	08 95       	ret
    16a4:	80 e4       	ldi	r24, 0x40	; 64
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	08 95       	ret
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	08 95       	ret
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	08 95       	ret
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	92 e0       	ldi	r25, 0x02	; 2
    16ba:	08 95       	ret
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	93 e0       	ldi	r25, 0x03	; 3
    16c0:	08 95       	ret
    16c2:	80 e1       	ldi	r24, 0x10	; 16
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	08 95       	ret

000016c8 <udd_ep_get_job>:
    16c8:	28 2f       	mov	r18, r24
    16ca:	2f 70       	andi	r18, 0x0F	; 15
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	22 0f       	add	r18, r18
    16d0:	33 1f       	adc	r19, r19
    16d2:	99 27       	eor	r25, r25
    16d4:	87 fd       	sbrc	r24, 7
    16d6:	90 95       	com	r25
    16d8:	88 27       	eor	r24, r24
    16da:	99 0f       	add	r25, r25
    16dc:	88 1f       	adc	r24, r24
    16de:	99 27       	eor	r25, r25
    16e0:	82 0f       	add	r24, r18
    16e2:	93 1f       	adc	r25, r19
    16e4:	02 97       	sbiw	r24, 0x02	; 2
    16e6:	9c 01       	movw	r18, r24
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	22 0f       	add	r18, r18
    16f2:	33 1f       	adc	r19, r19
    16f4:	82 0f       	add	r24, r18
    16f6:	93 1f       	adc	r25, r19
    16f8:	86 59       	subi	r24, 0x96	; 150
    16fa:	99 4d       	sbci	r25, 0xD9	; 217
    16fc:	08 95       	ret

000016fe <udd_ctrl_interrupt_tc_setup>:
    16fe:	0f 93       	push	r16
    1700:	cf 93       	push	r28
    1702:	80 91 cc 04 	lds	r24, 0x04CC
    1706:	80 ff       	sbrs	r24, 0
    1708:	6a c0       	rjmp	.+212    	; 0x17de <udd_ctrl_interrupt_tc_setup+0xe0>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	80 93 cc 04 	sts	0x04CC, r24
    1710:	e0 ee       	ldi	r30, 0xE0	; 224
    1712:	f6 e2       	ldi	r31, 0x26	; 38
    1714:	00 e8       	ldi	r16, 0x80	; 128
    1716:	06 93       	lac	Z, r16
    1718:	e8 ee       	ldi	r30, 0xE8	; 232
    171a:	f6 e2       	ldi	r31, 0x26	; 38
    171c:	00 e8       	ldi	r16, 0x80	; 128
    171e:	06 93       	lac	Z, r16
    1720:	80 93 ca 04 	sts	0x04CA, r24
    1724:	e0 ee       	ldi	r30, 0xE0	; 224
    1726:	f6 e2       	ldi	r31, 0x26	; 38
    1728:	00 e1       	ldi	r16, 0x10	; 16
    172a:	06 93       	lac	Z, r16
    172c:	80 91 d2 26 	lds	r24, 0x26D2
    1730:	90 91 d3 26 	lds	r25, 0x26D3
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	29 f0       	breq	.+10     	; 0x1742 <udd_ctrl_interrupt_tc_setup+0x44>
    1738:	03 97       	sbiw	r24, 0x03	; 3
    173a:	02 97       	sbiw	r24, 0x02	; 2
    173c:	08 f4       	brcc	.+2      	; 0x1740 <udd_ctrl_interrupt_tc_setup+0x42>
    173e:	25 df       	rcall	.-438    	; 0x158a <udd_ctrl_endofrequest>
    1740:	d5 de       	rcall	.-598    	; 0x14ec <udd_ctrl_init>
    1742:	80 91 e2 26 	lds	r24, 0x26E2
    1746:	90 91 e3 26 	lds	r25, 0x26E3
    174a:	08 97       	sbiw	r24, 0x08	; 8
    174c:	09 f0       	breq	.+2      	; 0x1750 <udd_ctrl_interrupt_tc_setup+0x52>
    174e:	49 c0       	rjmp	.+146    	; 0x17e2 <udd_ctrl_interrupt_tc_setup+0xe4>
    1750:	88 e0       	ldi	r24, 0x08	; 8
    1752:	ee e8       	ldi	r30, 0x8E	; 142
    1754:	f6 e2       	ldi	r31, 0x26	; 38
    1756:	a5 e2       	ldi	r26, 0x25	; 37
    1758:	b7 e2       	ldi	r27, 0x27	; 39
    175a:	01 90       	ld	r0, Z+
    175c:	0d 92       	st	X+, r0
    175e:	8a 95       	dec	r24
    1760:	e1 f7       	brne	.-8      	; 0x175a <udd_ctrl_interrupt_tc_setup+0x5c>
    1762:	e8 ec       	ldi	r30, 0xC8	; 200
    1764:	f4 e0       	ldi	r31, 0x04	; 4
    1766:	80 81       	ld	r24, Z
    1768:	80 62       	ori	r24, 0x20	; 32
    176a:	80 83       	st	Z, r24
    176c:	80 81       	ld	r24, Z
    176e:	80 62       	ori	r24, 0x20	; 32
    1770:	80 83       	st	Z, r24
    1772:	e4 db       	rcall	.-2104   	; 0xf3c <udc_process_setup>
    1774:	c8 2f       	mov	r28, r24
    1776:	81 11       	cpse	r24, r1
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <udd_ctrl_interrupt_tc_setup+0x82>
    177a:	e5 de       	rcall	.-566    	; 0x1546 <udd_ctrl_stall_data>
    177c:	c1 e0       	ldi	r28, 0x01	; 1
    177e:	32 c0       	rjmp	.+100    	; 0x17e4 <udd_ctrl_interrupt_tc_setup+0xe6>
    1780:	80 91 25 27 	lds	r24, 0x2725
    1784:	88 23       	and	r24, r24
    1786:	84 f4       	brge	.+32     	; 0x17a8 <udd_ctrl_interrupt_tc_setup+0xaa>
    1788:	10 92 d0 26 	sts	0x26D0, r1
    178c:	10 92 d1 26 	sts	0x26D1, r1
    1790:	10 92 ce 26 	sts	0x26CE, r1
    1794:	10 92 cf 26 	sts	0x26CF, r1
    1798:	22 e0       	ldi	r18, 0x02	; 2
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	20 93 d2 26 	sts	0x26D2, r18
    17a0:	30 93 d3 26 	sts	0x26D3, r19
    17a4:	fa de       	rcall	.-524    	; 0x159a <udd_ctrl_in_sent>
    17a6:	1e c0       	rjmp	.+60     	; 0x17e4 <udd_ctrl_interrupt_tc_setup+0xe6>
    17a8:	20 91 2b 27 	lds	r18, 0x272B
    17ac:	30 91 2c 27 	lds	r19, 0x272C
    17b0:	23 2b       	or	r18, r19
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <udd_ctrl_interrupt_tc_setup+0xba>
    17b4:	d9 de       	rcall	.-590    	; 0x1568 <udd_ctrl_send_zlp_in>
    17b6:	16 c0       	rjmp	.+44     	; 0x17e4 <udd_ctrl_interrupt_tc_setup+0xe6>
    17b8:	10 92 d0 26 	sts	0x26D0, r1
    17bc:	10 92 d1 26 	sts	0x26D1, r1
    17c0:	10 92 ce 26 	sts	0x26CE, r1
    17c4:	10 92 cf 26 	sts	0x26CF, r1
    17c8:	21 e0       	ldi	r18, 0x01	; 1
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	20 93 d2 26 	sts	0x26D2, r18
    17d0:	30 93 d3 26 	sts	0x26D3, r19
    17d4:	e0 ee       	ldi	r30, 0xE0	; 224
    17d6:	f6 e2       	ldi	r31, 0x26	; 38
    17d8:	02 e0       	ldi	r16, 0x02	; 2
    17da:	06 93       	lac	Z, r16
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <udd_ctrl_interrupt_tc_setup+0xe6>
    17de:	c0 e0       	ldi	r28, 0x00	; 0
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <udd_ctrl_interrupt_tc_setup+0xe6>
    17e2:	c1 e0       	ldi	r28, 0x01	; 1
    17e4:	8c 2f       	mov	r24, r28
    17e6:	cf 91       	pop	r28
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <udd_ep_trans_complet>:
    17ec:	bf 92       	push	r11
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	b8 2e       	mov	r11, r24
    1800:	63 df       	rcall	.-314    	; 0x16c8 <udd_ep_get_job>
    1802:	ec 01       	movw	r28, r24
    1804:	1b 2d       	mov	r17, r11
    1806:	11 1f       	adc	r17, r17
    1808:	11 27       	eor	r17, r17
    180a:	11 1f       	adc	r17, r17
    180c:	8b 2d       	mov	r24, r11
    180e:	8f 70       	andi	r24, 0x0F	; 15
    1810:	e8 2e       	mov	r14, r24
    1812:	f1 2c       	mov	r15, r1
    1814:	ee 0c       	add	r14, r14
    1816:	ff 1c       	adc	r15, r15
    1818:	e1 0e       	add	r14, r17
    181a:	f1 1c       	adc	r15, r1
    181c:	c7 01       	movw	r24, r14
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	9c 01       	movw	r18, r24
    182c:	20 52       	subi	r18, 0x20	; 32
    182e:	39 4d       	sbci	r19, 0xD9	; 217
    1830:	79 01       	movw	r14, r18
    1832:	c9 01       	movw	r24, r18
    1834:	25 df       	rcall	.-438    	; 0x1680 <udd_ep_get_size>
    1836:	6c 01       	movw	r12, r24
    1838:	11 23       	and	r17, r17
    183a:	09 f4       	brne	.+2      	; 0x183e <udd_ep_trans_complet+0x52>
    183c:	59 c0       	rjmp	.+178    	; 0x18f0 <udd_ep_trans_complet+0x104>
    183e:	d7 01       	movw	r26, r14
    1840:	16 96       	adiw	r26, 0x06	; 6
    1842:	2d 91       	ld	r18, X+
    1844:	3c 91       	ld	r19, X
    1846:	17 97       	sbiw	r26, 0x07	; 7
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	28 0f       	add	r18, r24
    184e:	39 1f       	adc	r19, r25
    1850:	2d 83       	std	Y+5, r18	; 0x05
    1852:	3e 83       	std	Y+6, r19	; 0x06
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	28 17       	cp	r18, r24
    185a:	39 07       	cpc	r19, r25
    185c:	b9 f1       	breq	.+110    	; 0x18cc <udd_ep_trans_complet+0xe0>
    185e:	fc 01       	movw	r30, r24
    1860:	e2 1b       	sub	r30, r18
    1862:	f3 0b       	sbc	r31, r19
    1864:	9f 01       	movw	r18, r30
    1866:	21 15       	cp	r18, r1
    1868:	f4 e0       	ldi	r31, 0x04	; 4
    186a:	3f 07       	cpc	r19, r31
    186c:	38 f0       	brcs	.+14     	; 0x187c <udd_ep_trans_complet+0x90>
    186e:	2f ef       	ldi	r18, 0xFF	; 255
    1870:	33 e0       	ldi	r19, 0x03	; 3
    1872:	c9 01       	movw	r24, r18
    1874:	b6 01       	movw	r22, r12
    1876:	f7 d5       	rcall	.+3054   	; 0x2466 <__udivmodhi4>
    1878:	28 1b       	sub	r18, r24
    187a:	39 0b       	sbc	r19, r25
    187c:	88 81       	ld	r24, Y
    187e:	81 ff       	sbrs	r24, 1
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <udd_ep_trans_complet+0xa8>
    1882:	c9 01       	movw	r24, r18
    1884:	b6 01       	movw	r22, r12
    1886:	ef d5       	rcall	.+3038   	; 0x2466 <__udivmodhi4>
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	89 2b       	or	r24, r25
    188c:	09 f0       	breq	.+2      	; 0x1890 <udd_ep_trans_complet+0xa4>
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	94 2f       	mov	r25, r20
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <udd_ep_trans_complet+0xaa>
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	88 81       	ld	r24, Y
    1898:	90 fb       	bst	r25, 0
    189a:	81 f9       	bld	r24, 1
    189c:	88 83       	st	Y, r24
    189e:	d7 01       	movw	r26, r14
    18a0:	16 96       	adiw	r26, 0x06	; 6
    18a2:	1d 92       	st	X+, r1
    18a4:	1c 92       	st	X, r1
    18a6:	17 97       	sbiw	r26, 0x07	; 7
    18a8:	12 96       	adiw	r26, 0x02	; 2
    18aa:	2d 93       	st	X+, r18
    18ac:	3c 93       	st	X, r19
    18ae:	13 97       	sbiw	r26, 0x03	; 3
    18b0:	29 81       	ldd	r18, Y+1	; 0x01
    18b2:	3a 81       	ldd	r19, Y+2	; 0x02
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	82 0f       	add	r24, r18
    18ba:	93 1f       	adc	r25, r19
    18bc:	14 96       	adiw	r26, 0x04	; 4
    18be:	8d 93       	st	X+, r24
    18c0:	9c 93       	st	X, r25
    18c2:	15 97       	sbiw	r26, 0x05	; 5
    18c4:	f7 01       	movw	r30, r14
    18c6:	02 e0       	ldi	r16, 0x02	; 2
    18c8:	06 93       	lac	Z, r16
    18ca:	95 c0       	rjmp	.+298    	; 0x19f6 <udd_ep_trans_complet+0x20a>
    18cc:	88 81       	ld	r24, Y
    18ce:	81 ff       	sbrs	r24, 1
    18d0:	83 c0       	rjmp	.+262    	; 0x19d8 <udd_ep_trans_complet+0x1ec>
    18d2:	8d 7f       	andi	r24, 0xFD	; 253
    18d4:	88 83       	st	Y, r24
    18d6:	d7 01       	movw	r26, r14
    18d8:	16 96       	adiw	r26, 0x06	; 6
    18da:	1d 92       	st	X+, r1
    18dc:	1c 92       	st	X, r1
    18de:	17 97       	sbiw	r26, 0x07	; 7
    18e0:	12 96       	adiw	r26, 0x02	; 2
    18e2:	1d 92       	st	X+, r1
    18e4:	1c 92       	st	X, r1
    18e6:	13 97       	sbiw	r26, 0x03	; 3
    18e8:	f7 01       	movw	r30, r14
    18ea:	02 e0       	ldi	r16, 0x02	; 2
    18ec:	06 93       	lac	Z, r16
    18ee:	83 c0       	rjmp	.+262    	; 0x19f6 <udd_ep_trans_complet+0x20a>
    18f0:	d7 01       	movw	r26, r14
    18f2:	12 96       	adiw	r26, 0x02	; 2
    18f4:	0d 91       	ld	r16, X+
    18f6:	1c 91       	ld	r17, X
    18f8:	13 97       	sbiw	r26, 0x03	; 3
    18fa:	88 81       	ld	r24, Y
    18fc:	82 ff       	sbrs	r24, 2
    18fe:	13 c0       	rjmp	.+38     	; 0x1926 <udd_ep_trans_complet+0x13a>
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	2d 81       	ldd	r18, Y+5	; 0x05
    1906:	3e 81       	ldd	r19, Y+6	; 0x06
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	b6 01       	movw	r22, r12
    190e:	ab d5       	rcall	.+2902   	; 0x2466 <__udivmodhi4>
    1910:	b0 e4       	ldi	r27, 0x40	; 64
    1912:	bb 9e       	mul	r11, r27
    1914:	b0 01       	movw	r22, r0
    1916:	11 24       	eor	r1, r1
    1918:	66 55       	subi	r22, 0x56	; 86
    191a:	7a 4d       	sbci	r23, 0xDA	; 218
    191c:	ac 01       	movw	r20, r24
    191e:	cf 01       	movw	r24, r30
    1920:	82 0f       	add	r24, r18
    1922:	93 1f       	adc	r25, r19
    1924:	ba d5       	rcall	.+2932   	; 0x249a <memcpy>
    1926:	2d 81       	ldd	r18, Y+5	; 0x05
    1928:	3e 81       	ldd	r19, Y+6	; 0x06
    192a:	20 0f       	add	r18, r16
    192c:	31 1f       	adc	r19, r17
    192e:	2d 83       	std	Y+5, r18	; 0x05
    1930:	3e 83       	std	Y+6, r19	; 0x06
    1932:	eb 81       	ldd	r30, Y+3	; 0x03
    1934:	fc 81       	ldd	r31, Y+4	; 0x04
    1936:	e2 17       	cp	r30, r18
    1938:	f3 07       	cpc	r31, r19
    193a:	10 f4       	brcc	.+4      	; 0x1940 <udd_ep_trans_complet+0x154>
    193c:	ed 83       	std	Y+5, r30	; 0x05
    193e:	fe 83       	std	Y+6, r31	; 0x06
    1940:	d7 01       	movw	r26, r14
    1942:	16 96       	adiw	r26, 0x06	; 6
    1944:	8d 91       	ld	r24, X+
    1946:	9c 91       	ld	r25, X
    1948:	17 97       	sbiw	r26, 0x07	; 7
    194a:	80 17       	cp	r24, r16
    194c:	91 07       	cpc	r25, r17
    194e:	09 f0       	breq	.+2      	; 0x1952 <udd_ep_trans_complet+0x166>
    1950:	43 c0       	rjmp	.+134    	; 0x19d8 <udd_ep_trans_complet+0x1ec>
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	e8 17       	cp	r30, r24
    1958:	f9 07       	cpc	r31, r25
    195a:	09 f4       	brne	.+2      	; 0x195e <udd_ep_trans_complet+0x172>
    195c:	3d c0       	rjmp	.+122    	; 0x19d8 <udd_ep_trans_complet+0x1ec>
    195e:	e8 1b       	sub	r30, r24
    1960:	f9 0b       	sbc	r31, r25
    1962:	e1 15       	cp	r30, r1
    1964:	b4 e0       	ldi	r27, 0x04	; 4
    1966:	fb 07       	cpc	r31, r27
    1968:	40 f0       	brcs	.+16     	; 0x197a <udd_ep_trans_complet+0x18e>
    196a:	ef ef       	ldi	r30, 0xFF	; 255
    196c:	f3 e0       	ldi	r31, 0x03	; 3
    196e:	cf 01       	movw	r24, r30
    1970:	b6 01       	movw	r22, r12
    1972:	79 d5       	rcall	.+2802   	; 0x2466 <__udivmodhi4>
    1974:	e8 1b       	sub	r30, r24
    1976:	f9 0b       	sbc	r31, r25
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <udd_ep_trans_complet+0x198>
    197a:	cf 01       	movw	r24, r30
    197c:	b6 01       	movw	r22, r12
    197e:	73 d5       	rcall	.+2790   	; 0x2466 <__udivmodhi4>
    1980:	e8 1b       	sub	r30, r24
    1982:	f9 0b       	sbc	r31, r25
    1984:	d7 01       	movw	r26, r14
    1986:	12 96       	adiw	r26, 0x02	; 2
    1988:	1d 92       	st	X+, r1
    198a:	1c 92       	st	X, r1
    198c:	13 97       	sbiw	r26, 0x03	; 3
    198e:	ec 15       	cp	r30, r12
    1990:	fd 05       	cpc	r31, r13
    1992:	78 f4       	brcc	.+30     	; 0x19b2 <udd_ep_trans_complet+0x1c6>
    1994:	88 81       	ld	r24, Y
    1996:	84 60       	ori	r24, 0x04	; 4
    1998:	88 83       	st	Y, r24
    199a:	b0 e4       	ldi	r27, 0x40	; 64
    199c:	bb 9e       	mul	r11, r27
    199e:	c0 01       	movw	r24, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	86 55       	subi	r24, 0x56	; 86
    19a4:	9a 4d       	sbci	r25, 0xDA	; 218
    19a6:	f7 01       	movw	r30, r14
    19a8:	84 83       	std	Z+4, r24	; 0x04
    19aa:	95 83       	std	Z+5, r25	; 0x05
    19ac:	c6 82       	std	Z+6, r12	; 0x06
    19ae:	d7 82       	std	Z+7, r13	; 0x07
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <udd_ep_trans_complet+0x1e4>
    19b2:	29 81       	ldd	r18, Y+1	; 0x01
    19b4:	3a 81       	ldd	r19, Y+2	; 0x02
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	d7 01       	movw	r26, r14
    19c0:	14 96       	adiw	r26, 0x04	; 4
    19c2:	8d 93       	st	X+, r24
    19c4:	9c 93       	st	X, r25
    19c6:	15 97       	sbiw	r26, 0x05	; 5
    19c8:	16 96       	adiw	r26, 0x06	; 6
    19ca:	ed 93       	st	X+, r30
    19cc:	fc 93       	st	X, r31
    19ce:	17 97       	sbiw	r26, 0x07	; 7
    19d0:	f7 01       	movw	r30, r14
    19d2:	02 e0       	ldi	r16, 0x02	; 2
    19d4:	06 93       	lac	Z, r16
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <udd_ep_trans_complet+0x20a>
    19d8:	88 81       	ld	r24, Y
    19da:	80 ff       	sbrs	r24, 0
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <udd_ep_trans_complet+0x20a>
    19de:	8e 7f       	andi	r24, 0xFE	; 254
    19e0:	88 83       	st	Y, r24
    19e2:	ef 81       	ldd	r30, Y+7	; 0x07
    19e4:	f8 85       	ldd	r31, Y+8	; 0x08
    19e6:	30 97       	sbiw	r30, 0x00	; 0
    19e8:	31 f0       	breq	.+12     	; 0x19f6 <udd_ep_trans_complet+0x20a>
    19ea:	6d 81       	ldd	r22, Y+5	; 0x05
    19ec:	7e 81       	ldd	r23, Y+6	; 0x06
    19ee:	4b 2d       	mov	r20, r11
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	09 95       	icall
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
    1a06:	bf 90       	pop	r11
    1a08:	08 95       	ret

00001a0a <udd_attach>:
    1a0a:	cf 93       	push	r28
    1a0c:	cf b7       	in	r28, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	4d dd       	rcall	.-1382   	; 0x14ae <udd_sleep_mode>
    1a14:	ea ec       	ldi	r30, 0xCA	; 202
    1a16:	f4 e0       	ldi	r31, 0x04	; 4
    1a18:	80 e4       	ldi	r24, 0x40	; 64
    1a1a:	80 83       	st	Z, r24
    1a1c:	80 e2       	ldi	r24, 0x20	; 32
    1a1e:	80 83       	st	Z, r24
    1a20:	e1 ec       	ldi	r30, 0xC1	; 193
    1a22:	f4 e0       	ldi	r31, 0x04	; 4
    1a24:	80 81       	ld	r24, Z
    1a26:	81 60       	ori	r24, 0x01	; 1
    1a28:	80 83       	st	Z, r24
    1a2a:	a9 ec       	ldi	r26, 0xC9	; 201
    1a2c:	b4 e0       	ldi	r27, 0x04	; 4
    1a2e:	8c 91       	ld	r24, X
    1a30:	82 60       	ori	r24, 0x02	; 2
    1a32:	8c 93       	st	X, r24
    1a34:	e8 ec       	ldi	r30, 0xC8	; 200
    1a36:	f4 e0       	ldi	r31, 0x04	; 4
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 64       	ori	r24, 0x40	; 64
    1a3c:	80 83       	st	Z, r24
    1a3e:	8c 91       	ld	r24, X
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	8c 93       	st	X, r24
    1a44:	80 81       	ld	r24, Z
    1a46:	80 68       	ori	r24, 0x80	; 128
    1a48:	80 83       	st	Z, r24
    1a4a:	cf bf       	out	0x3f, r28	; 63
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <udd_enable>:
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	c0 e6       	ldi	r28, 0x60	; 96
    1a56:	d0 e0       	ldi	r29, 0x00	; 0
    1a58:	18 82       	st	Y, r1
    1a5a:	80 e3       	ldi	r24, 0x30	; 48
    1a5c:	0e 94 25 03 	call	0x64a	; 0x64a <sysclk_enable_usb>
    1a60:	e0 ec       	ldi	r30, 0xC0	; 192
    1a62:	f4 e0       	ldi	r31, 0x04	; 4
    1a64:	80 81       	ld	r24, Z
    1a66:	80 64       	ori	r24, 0x40	; 64
    1a68:	80 83       	st	Z, r24
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	88 83       	st	Y, r24
    1a6e:	cf b7       	in	r28, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	10 92 e1 26 	sts	0x26E1, r1
    1a76:	10 92 e9 26 	sts	0x26E9, r1
    1a7a:	10 92 f1 26 	sts	0x26F1, r1
    1a7e:	10 92 f9 26 	sts	0x26F9, r1
    1a82:	10 92 01 27 	sts	0x2701, r1
    1a86:	10 92 09 27 	sts	0x2709, r1
    1a8a:	ea e6       	ldi	r30, 0x6A	; 106
    1a8c:	f6 e2       	ldi	r31, 0x26	; 38
    1a8e:	80 81       	ld	r24, Z
    1a90:	8e 7f       	andi	r24, 0xFE	; 254
    1a92:	80 83       	st	Z, r24
    1a94:	e3 e7       	ldi	r30, 0x73	; 115
    1a96:	f6 e2       	ldi	r31, 0x26	; 38
    1a98:	80 81       	ld	r24, Z
    1a9a:	8e 7f       	andi	r24, 0xFE	; 254
    1a9c:	80 83       	st	Z, r24
    1a9e:	ec e7       	ldi	r30, 0x7C	; 124
    1aa0:	f6 e2       	ldi	r31, 0x26	; 38
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8e 7f       	andi	r24, 0xFE	; 254
    1aa6:	80 83       	st	Z, r24
    1aa8:	e5 e8       	ldi	r30, 0x85	; 133
    1aaa:	f6 e2       	ldi	r31, 0x26	; 38
    1aac:	80 81       	ld	r24, Z
    1aae:	8e 7f       	andi	r24, 0xFE	; 254
    1ab0:	80 83       	st	Z, r24
    1ab2:	6a e1       	ldi	r22, 0x1A	; 26
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	f0 dc       	rcall	.-1568   	; 0x149a <nvm_read_byte>
    1aba:	8f 3f       	cpi	r24, 0xFF	; 255
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <udd_enable+0x74>
    1abe:	80 93 fa 04 	sts	0x04FA, r24
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <udd_enable+0x7a>
    1ac4:	8f e1       	ldi	r24, 0x1F	; 31
    1ac6:	80 93 fa 04 	sts	0x04FA, r24
    1aca:	6b e1       	ldi	r22, 0x1B	; 27
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	e4 dc       	rcall	.-1592   	; 0x149a <nvm_read_byte>
    1ad2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad4:	19 f0       	breq	.+6      	; 0x1adc <udd_enable+0x8c>
    1ad6:	80 93 fb 04 	sts	0x04FB, r24
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <udd_enable+0x92>
    1adc:	8f e1       	ldi	r24, 0x1F	; 31
    1ade:	80 93 fb 04 	sts	0x04FB, r24
    1ae2:	e0 ec       	ldi	r30, 0xC0	; 192
    1ae4:	f4 e0       	ldi	r31, 0x04	; 4
    1ae6:	80 81       	ld	r24, Z
    1ae8:	82 60       	ori	r24, 0x02	; 2
    1aea:	80 83       	st	Z, r24
    1aec:	80 81       	ld	r24, Z
    1aee:	80 68       	ori	r24, 0x80	; 128
    1af0:	80 83       	st	Z, r24
    1af2:	80 81       	ld	r24, Z
    1af4:	80 61       	ori	r24, 0x10	; 16
    1af6:	80 83       	st	Z, r24
    1af8:	80 ee       	ldi	r24, 0xE0	; 224
    1afa:	96 e2       	ldi	r25, 0x26	; 38
    1afc:	86 83       	std	Z+6, r24	; 0x06
    1afe:	97 83       	std	Z+7, r25	; 0x07
    1b00:	80 81       	ld	r24, Z
    1b02:	80 62       	ori	r24, 0x20	; 32
    1b04:	80 83       	st	Z, r24
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	80 93 c5 04 	sts	0x04C5, r24
    1b0c:	e8 ec       	ldi	r30, 0xC8	; 200
    1b0e:	f4 e0       	ldi	r31, 0x04	; 4
    1b10:	80 81       	ld	r24, Z
    1b12:	81 60       	ori	r24, 0x01	; 1
    1b14:	80 83       	st	Z, r24
    1b16:	10 92 14 27 	sts	0x2714, r1
    1b1a:	8f b7       	in	r24, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	e4 e2       	ldi	r30, 0x24	; 36
    1b20:	f7 e2       	ldi	r31, 0x27	; 39
    1b22:	90 81       	ld	r25, Z
    1b24:	9f 5f       	subi	r25, 0xFF	; 255
    1b26:	90 83       	st	Z, r25
    1b28:	8f bf       	out	0x3f, r24	; 63
    1b2a:	6f df       	rcall	.-290    	; 0x1a0a <udd_attach>
    1b2c:	cf bf       	out	0x3f, r28	; 63
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <udd_is_high_speed>:
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	08 95       	ret

00001b38 <udd_set_address>:
    1b38:	80 93 c3 04 	sts	0x04C3, r24
    1b3c:	08 95       	ret

00001b3e <udd_getaddress>:
    1b3e:	80 91 c3 04 	lds	r24, 0x04C3
    1b42:	08 95       	ret

00001b44 <udd_get_frame_number>:
    1b44:	80 91 10 27 	lds	r24, 0x2710
    1b48:	90 91 11 27 	lds	r25, 0x2711
    1b4c:	08 95       	ret

00001b4e <udd_get_micro_frame_number>:
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	08 95       	ret

00001b54 <udd_set_setup_payload>:
    1b54:	80 93 2d 27 	sts	0x272D, r24
    1b58:	90 93 2e 27 	sts	0x272E, r25
    1b5c:	60 93 2f 27 	sts	0x272F, r22
    1b60:	70 93 30 27 	sts	0x2730, r23
    1b64:	08 95       	ret

00001b66 <udd_ep_alloc>:
    1b66:	e8 2f       	mov	r30, r24
    1b68:	ef 70       	andi	r30, 0x0F	; 15
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	99 27       	eor	r25, r25
    1b72:	87 fd       	sbrc	r24, 7
    1b74:	90 95       	com	r25
    1b76:	88 27       	eor	r24, r24
    1b78:	99 0f       	add	r25, r25
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	99 27       	eor	r25, r25
    1b7e:	e8 0f       	add	r30, r24
    1b80:	f9 1f       	adc	r31, r25
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	e0 52       	subi	r30, 0x20	; 32
    1b90:	f9 4d       	sbci	r31, 0xD9	; 217
    1b92:	81 81       	ldd	r24, Z+1	; 0x01
    1b94:	80 7c       	andi	r24, 0xC0	; 192
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <udd_ep_alloc+0x34>
    1b98:	44 c0       	rjmp	.+136    	; 0x1c22 <udd_ep_alloc+0xbc>
    1b9a:	63 70       	andi	r22, 0x03	; 3
    1b9c:	61 30       	cpi	r22, 0x01	; 1
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <udd_ep_alloc+0x3e>
    1ba0:	18 f4       	brcc	.+6      	; 0x1ba8 <udd_ep_alloc+0x42>
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <udd_ep_alloc+0x46>
    1ba4:	20 ec       	ldi	r18, 0xC0	; 192
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <udd_ep_alloc+0x48>
    1ba8:	20 e8       	ldi	r18, 0x80	; 128
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <udd_ep_alloc+0x48>
    1bac:	20 e4       	ldi	r18, 0x40	; 64
    1bae:	40 38       	cpi	r20, 0x80	; 128
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	e1 f0       	breq	.+56     	; 0x1bec <udd_ep_alloc+0x86>
    1bb4:	50 f4       	brcc	.+20     	; 0x1bca <udd_ep_alloc+0x64>
    1bb6:	40 32       	cpi	r20, 0x20	; 32
    1bb8:	51 05       	cpc	r21, r1
    1bba:	a1 f0       	breq	.+40     	; 0x1be4 <udd_ep_alloc+0x7e>
    1bbc:	40 34       	cpi	r20, 0x40	; 64
    1bbe:	51 05       	cpc	r21, r1
    1bc0:	99 f0       	breq	.+38     	; 0x1be8 <udd_ep_alloc+0x82>
    1bc2:	40 31       	cpi	r20, 0x10	; 16
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	61 f4       	brne	.+24     	; 0x1be0 <udd_ep_alloc+0x7a>
    1bc8:	19 c0       	rjmp	.+50     	; 0x1bfc <udd_ep_alloc+0x96>
    1bca:	41 15       	cp	r20, r1
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	58 07       	cpc	r21, r24
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <udd_ep_alloc+0x8e>
    1bd2:	4f 3f       	cpi	r20, 0xFF	; 255
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	58 07       	cpc	r21, r24
    1bd8:	79 f0       	breq	.+30     	; 0x1bf8 <udd_ep_alloc+0x92>
    1bda:	41 15       	cp	r20, r1
    1bdc:	51 40       	sbci	r21, 0x01	; 1
    1bde:	41 f0       	breq	.+16     	; 0x1bf0 <udd_ep_alloc+0x8a>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	0d c0       	rjmp	.+26     	; 0x1bfe <udd_ep_alloc+0x98>
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	0b c0       	rjmp	.+22     	; 0x1bfe <udd_ep_alloc+0x98>
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	09 c0       	rjmp	.+18     	; 0x1bfe <udd_ep_alloc+0x98>
    1bec:	84 e0       	ldi	r24, 0x04	; 4
    1bee:	07 c0       	rjmp	.+14     	; 0x1bfe <udd_ep_alloc+0x98>
    1bf0:	85 e0       	ldi	r24, 0x05	; 5
    1bf2:	05 c0       	rjmp	.+10     	; 0x1bfe <udd_ep_alloc+0x98>
    1bf4:	86 e0       	ldi	r24, 0x06	; 6
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <udd_ep_alloc+0x98>
    1bf8:	87 e0       	ldi	r24, 0x07	; 7
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <udd_ep_alloc+0x98>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	11 82       	std	Z+1, r1	; 0x01
    1c00:	96 e0       	ldi	r25, 0x06	; 6
    1c02:	90 83       	st	Z, r25
    1c04:	82 2b       	or	r24, r18
    1c06:	81 83       	std	Z+1, r24	; 0x01
    1c08:	81 81       	ldd	r24, Z+1	; 0x01
    1c0a:	80 7c       	andi	r24, 0xC0	; 192
    1c0c:	80 3c       	cpi	r24, 0xC0	; 192
    1c0e:	21 f4       	brne	.+8      	; 0x1c18 <udd_ep_alloc+0xb2>
    1c10:	81 81       	ldd	r24, Z+1	; 0x01
    1c12:	87 70       	andi	r24, 0x07	; 7
    1c14:	87 30       	cpi	r24, 0x07	; 7
    1c16:	39 f0       	breq	.+14     	; 0x1c26 <udd_ep_alloc+0xc0>
    1c18:	81 81       	ldd	r24, Z+1	; 0x01
    1c1a:	80 62       	ori	r24, 0x20	; 32
    1c1c:	81 83       	std	Z+1, r24	; 0x01
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	08 95       	ret
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	08 95       	ret
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	08 95       	ret

00001c2a <udd_ep_is_halted>:
    1c2a:	e8 2f       	mov	r30, r24
    1c2c:	ef 70       	andi	r30, 0x0F	; 15
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	99 27       	eor	r25, r25
    1c36:	87 fd       	sbrc	r24, 7
    1c38:	90 95       	com	r25
    1c3a:	88 27       	eor	r24, r24
    1c3c:	99 0f       	add	r25, r25
    1c3e:	88 1f       	adc	r24, r24
    1c40:	99 27       	eor	r25, r25
    1c42:	e8 0f       	add	r30, r24
    1c44:	f9 1f       	adc	r31, r25
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	ee 0f       	add	r30, r30
    1c50:	ff 1f       	adc	r31, r31
    1c52:	e0 52       	subi	r30, 0x20	; 32
    1c54:	f9 4d       	sbci	r31, 0xD9	; 217
    1c56:	81 81       	ldd	r24, Z+1	; 0x01
    1c58:	82 fb       	bst	r24, 2
    1c5a:	88 27       	eor	r24, r24
    1c5c:	80 f9       	bld	r24, 0
    1c5e:	08 95       	ret

00001c60 <udd_ep_clear_halt>:
    1c60:	e8 2f       	mov	r30, r24
    1c62:	ef 70       	andi	r30, 0x0F	; 15
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	ee 0f       	add	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	33 27       	eor	r19, r19
    1c6e:	27 fd       	sbrc	r18, 7
    1c70:	30 95       	com	r19
    1c72:	22 27       	eor	r18, r18
    1c74:	33 0f       	add	r19, r19
    1c76:	22 1f       	adc	r18, r18
    1c78:	33 27       	eor	r19, r19
    1c7a:	e2 0f       	add	r30, r18
    1c7c:	f3 1f       	adc	r31, r19
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	ee 0f       	add	r30, r30
    1c84:	ff 1f       	adc	r31, r31
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	e0 52       	subi	r30, 0x20	; 32
    1c8c:	f9 4d       	sbci	r31, 0xD9	; 217
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	92 ff       	sbrs	r25, 2
    1c92:	0e c0       	rjmp	.+28     	; 0x1cb0 <udd_ep_clear_halt+0x50>
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	9b 7f       	andi	r25, 0xFB	; 251
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	16 dd       	rcall	.-1492   	; 0x16c8 <udd_ep_get_job>
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 ff       	sbrs	r24, 0
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <udd_ep_clear_halt+0x50>
    1ca4:	8e 7f       	andi	r24, 0xFE	; 254
    1ca6:	80 83       	st	Z, r24
    1ca8:	07 80       	ldd	r0, Z+7	; 0x07
    1caa:	f0 85       	ldd	r31, Z+8	; 0x08
    1cac:	e0 2d       	mov	r30, r0
    1cae:	09 95       	icall
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	08 95       	ret

00001cb4 <udd_ep_run>:
    1cb4:	7f 92       	push	r7
    1cb6:	8f 92       	push	r8
    1cb8:	9f 92       	push	r9
    1cba:	af 92       	push	r10
    1cbc:	bf 92       	push	r11
    1cbe:	cf 92       	push	r12
    1cc0:	df 92       	push	r13
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	98 2e       	mov	r9, r24
    1cd0:	86 2e       	mov	r8, r22
    1cd2:	5a 01       	movw	r10, r20
    1cd4:	69 01       	movw	r12, r18
    1cd6:	f8 dc       	rcall	.-1552   	; 0x16c8 <udd_ep_get_job>
    1cd8:	7c 01       	movw	r14, r24
    1cda:	79 2c       	mov	r7, r9
    1cdc:	77 1c       	adc	r7, r7
    1cde:	77 24       	eor	r7, r7
    1ce0:	77 1c       	adc	r7, r7
    1ce2:	c9 2d       	mov	r28, r9
    1ce4:	cf 70       	andi	r28, 0x0F	; 15
    1ce6:	d0 e0       	ldi	r29, 0x00	; 0
    1ce8:	cc 0f       	add	r28, r28
    1cea:	dd 1f       	adc	r29, r29
    1cec:	c7 0d       	add	r28, r7
    1cee:	d1 1d       	adc	r29, r1
    1cf0:	cc 0f       	add	r28, r28
    1cf2:	dd 1f       	adc	r29, r29
    1cf4:	cc 0f       	add	r28, r28
    1cf6:	dd 1f       	adc	r29, r29
    1cf8:	cc 0f       	add	r28, r28
    1cfa:	dd 1f       	adc	r29, r29
    1cfc:	c0 52       	subi	r28, 0x20	; 32
    1cfe:	d9 4d       	sbci	r29, 0xD9	; 217
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	80 7c       	andi	r24, 0xC0	; 192
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <udd_ep_run+0x54>
    1d06:	4b c0       	rjmp	.+150    	; 0x1d9e <udd_ep_run+0xea>
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	80 7c       	andi	r24, 0xC0	; 192
    1d0c:	80 3c       	cpi	r24, 0xC0	; 192
    1d0e:	19 f0       	breq	.+6      	; 0x1d16 <udd_ep_run+0x62>
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	82 fd       	sbrc	r24, 2
    1d14:	46 c0       	rjmp	.+140    	; 0x1da2 <udd_ep_run+0xee>
    1d16:	8f b7       	in	r24, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	f7 01       	movw	r30, r14
    1d1c:	90 81       	ld	r25, Z
    1d1e:	90 ff       	sbrs	r25, 0
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <udd_ep_run+0x74>
    1d22:	8f bf       	out	0x3f, r24	; 63
    1d24:	71 2c       	mov	r7, r1
    1d26:	3e c0       	rjmp	.+124    	; 0x1da4 <udd_ep_run+0xf0>
    1d28:	f7 01       	movw	r30, r14
    1d2a:	90 81       	ld	r25, Z
    1d2c:	91 60       	ori	r25, 0x01	; 1
    1d2e:	90 83       	st	Z, r25
    1d30:	8f bf       	out	0x3f, r24	; 63
    1d32:	f7 01       	movw	r30, r14
    1d34:	a1 82       	std	Z+1, r10	; 0x01
    1d36:	b2 82       	std	Z+2, r11	; 0x02
    1d38:	c3 82       	std	Z+3, r12	; 0x03
    1d3a:	d4 82       	std	Z+4, r13	; 0x04
    1d3c:	15 82       	std	Z+5, r1	; 0x05
    1d3e:	16 82       	std	Z+6, r1	; 0x06
    1d40:	07 83       	std	Z+7, r16	; 0x07
    1d42:	10 87       	std	Z+8, r17	; 0x08
    1d44:	81 10       	cpse	r8, r1
    1d46:	06 c0       	rjmp	.+12     	; 0x1d54 <udd_ep_run+0xa0>
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	c1 14       	cp	r12, r1
    1d4c:	d1 04       	cpc	r13, r1
    1d4e:	19 f0       	breq	.+6      	; 0x1d56 <udd_ep_run+0xa2>
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	01 c0       	rjmp	.+2      	; 0x1d56 <udd_ep_run+0xa2>
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	f7 01       	movw	r30, r14
    1d58:	80 81       	ld	r24, Z
    1d5a:	90 fb       	bst	r25, 0
    1d5c:	81 f9       	bld	r24, 1
    1d5e:	8b 7f       	andi	r24, 0xFB	; 251
    1d60:	80 83       	st	Z, r24
    1d62:	77 20       	and	r7, r7
    1d64:	19 f0       	breq	.+6      	; 0x1d6c <udd_ep_run+0xb8>
    1d66:	1e 82       	std	Y+6, r1	; 0x06
    1d68:	1f 82       	std	Y+7, r1	; 0x07
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <udd_ep_run+0xe0>
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	80 7c       	andi	r24, 0xC0	; 192
    1d70:	80 3c       	cpi	r24, 0xC0	; 192
    1d72:	61 f4       	brne	.+24     	; 0x1d8c <udd_ep_run+0xd8>
    1d74:	ce 01       	movw	r24, r28
    1d76:	84 dc       	rcall	.-1784   	; 0x1680 <udd_ep_get_size>
    1d78:	bc 01       	movw	r22, r24
    1d7a:	c6 01       	movw	r24, r12
    1d7c:	74 d3       	rcall	.+1768   	; 0x2466 <__udivmodhi4>
    1d7e:	89 2b       	or	r24, r25
    1d80:	29 f0       	breq	.+10     	; 0x1d8c <udd_ep_run+0xd8>
    1d82:	f7 01       	movw	r30, r14
    1d84:	80 81       	ld	r24, Z
    1d86:	8e 7f       	andi	r24, 0xFE	; 254
    1d88:	80 83       	st	Z, r24
    1d8a:	0c c0       	rjmp	.+24     	; 0x1da4 <udd_ep_run+0xf0>
    1d8c:	1a 82       	std	Y+2, r1	; 0x02
    1d8e:	1b 82       	std	Y+3, r1	; 0x03
    1d90:	1e 82       	std	Y+6, r1	; 0x06
    1d92:	1f 82       	std	Y+7, r1	; 0x07
    1d94:	89 2d       	mov	r24, r9
    1d96:	2a dd       	rcall	.-1452   	; 0x17ec <udd_ep_trans_complet>
    1d98:	77 24       	eor	r7, r7
    1d9a:	73 94       	inc	r7
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <udd_ep_run+0xf0>
    1d9e:	71 2c       	mov	r7, r1
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <udd_ep_run+0xf0>
    1da2:	71 2c       	mov	r7, r1
    1da4:	87 2d       	mov	r24, r7
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	bf 90       	pop	r11
    1db8:	af 90       	pop	r10
    1dba:	9f 90       	pop	r9
    1dbc:	8f 90       	pop	r8
    1dbe:	7f 90       	pop	r7
    1dc0:	08 95       	ret

00001dc2 <udd_ep_abort>:
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	18 2f       	mov	r17, r24
    1dce:	f8 2e       	mov	r15, r24
    1dd0:	ff 1c       	adc	r15, r15
    1dd2:	ff 24       	eor	r15, r15
    1dd4:	ff 1c       	adc	r15, r15
    1dd6:	c8 2f       	mov	r28, r24
    1dd8:	cf 70       	andi	r28, 0x0F	; 15
    1dda:	d0 e0       	ldi	r29, 0x00	; 0
    1ddc:	cc 0f       	add	r28, r28
    1dde:	dd 1f       	adc	r29, r29
    1de0:	cf 0d       	add	r28, r15
    1de2:	d1 1d       	adc	r29, r1
    1de4:	cc 0f       	add	r28, r28
    1de6:	dd 1f       	adc	r29, r29
    1de8:	cc 0f       	add	r28, r28
    1dea:	dd 1f       	adc	r29, r29
    1dec:	cc 0f       	add	r28, r28
    1dee:	dd 1f       	adc	r29, r29
    1df0:	c0 52       	subi	r28, 0x20	; 32
    1df2:	d9 4d       	sbci	r29, 0xD9	; 217
    1df4:	69 dc       	rcall	.-1838   	; 0x16c8 <udd_ep_get_job>
    1df6:	dc 01       	movw	r26, r24
    1df8:	fe 01       	movw	r30, r28
    1dfa:	02 e0       	ldi	r16, 0x02	; 2
    1dfc:	05 93       	las	Z, r16
    1dfe:	8c 91       	ld	r24, X
    1e00:	80 ff       	sbrs	r24, 0
    1e02:	13 c0       	rjmp	.+38     	; 0x1e2a <udd_ep_abort+0x68>
    1e04:	8e 7f       	andi	r24, 0xFE	; 254
    1e06:	8c 93       	st	X, r24
    1e08:	17 96       	adiw	r26, 0x07	; 7
    1e0a:	ed 91       	ld	r30, X+
    1e0c:	fc 91       	ld	r31, X
    1e0e:	18 97       	sbiw	r26, 0x08	; 8
    1e10:	30 97       	sbiw	r30, 0x00	; 0
    1e12:	59 f0       	breq	.+22     	; 0x1e2a <udd_ep_abort+0x68>
    1e14:	ff 20       	and	r15, r15
    1e16:	19 f0       	breq	.+6      	; 0x1e1e <udd_ep_abort+0x5c>
    1e18:	6e 81       	ldd	r22, Y+6	; 0x06
    1e1a:	7f 81       	ldd	r23, Y+7	; 0x07
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <udd_ep_abort+0x60>
    1e1e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e20:	7b 81       	ldd	r23, Y+3	; 0x03
    1e22:	41 2f       	mov	r20, r17
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	09 95       	icall
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	ff 90       	pop	r15
    1e34:	08 95       	ret

00001e36 <udd_ep_free>:
    1e36:	cf 93       	push	r28
    1e38:	c8 2f       	mov	r28, r24
    1e3a:	c3 df       	rcall	.-122    	; 0x1dc2 <udd_ep_abort>
    1e3c:	ec 2f       	mov	r30, r28
    1e3e:	ef 70       	andi	r30, 0x0F	; 15
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	8c 2f       	mov	r24, r28
    1e48:	99 27       	eor	r25, r25
    1e4a:	87 fd       	sbrc	r24, 7
    1e4c:	90 95       	com	r25
    1e4e:	88 27       	eor	r24, r24
    1e50:	99 0f       	add	r25, r25
    1e52:	88 1f       	adc	r24, r24
    1e54:	99 27       	eor	r25, r25
    1e56:	e8 0f       	add	r30, r24
    1e58:	f9 1f       	adc	r31, r25
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	ee 0f       	add	r30, r30
    1e60:	ff 1f       	adc	r31, r31
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	e0 52       	subi	r30, 0x20	; 32
    1e68:	f9 4d       	sbci	r31, 0xD9	; 217
    1e6a:	11 82       	std	Z+1, r1	; 0x01
    1e6c:	cf 91       	pop	r28
    1e6e:	08 95       	ret

00001e70 <udd_ep_set_halt>:
    1e70:	0f 93       	push	r16
    1e72:	e8 2f       	mov	r30, r24
    1e74:	ef 70       	andi	r30, 0x0F	; 15
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	33 27       	eor	r19, r19
    1e80:	27 fd       	sbrc	r18, 7
    1e82:	30 95       	com	r19
    1e84:	22 27       	eor	r18, r18
    1e86:	33 0f       	add	r19, r19
    1e88:	22 1f       	adc	r18, r18
    1e8a:	33 27       	eor	r19, r19
    1e8c:	e2 0f       	add	r30, r18
    1e8e:	f3 1f       	adc	r31, r19
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	e0 52       	subi	r30, 0x20	; 32
    1e9e:	f9 4d       	sbci	r31, 0xD9	; 217
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	94 60       	ori	r25, 0x04	; 4
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	01 e0       	ldi	r16, 0x01	; 1
    1ea8:	06 93       	lac	Z, r16
    1eaa:	8b df       	rcall	.-234    	; 0x1dc2 <udd_ep_abort>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0f 91       	pop	r16
    1eb0:	08 95       	ret

00001eb2 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1eb2:	1f 92       	push	r1
    1eb4:	0f 92       	push	r0
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	0f 92       	push	r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	0b b6       	in	r0, 0x3b	; 59
    1ebe:	0f 92       	push	r0
    1ec0:	0f 93       	push	r16
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1eda:	80 91 cb 04 	lds	r24, 0x04CB
    1ede:	88 23       	and	r24, r24
    1ee0:	34 f4       	brge	.+12     	; 0x1eee <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    1ee2:	80 e8       	ldi	r24, 0x80	; 128
    1ee4:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1ee8:	0e 94 6f 07 	call	0xede	; 0xede <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1eec:	91 c0       	rjmp	.+290    	; 0x2010 <__vector_125+0x15e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1eee:	80 91 cb 04 	lds	r24, 0x04CB
    1ef2:	82 ff       	sbrs	r24, 2
    1ef4:	23 c0       	rjmp	.+70     	; 0x1f3c <__vector_125+0x8a>
		udd_ack_underflow_event();
    1ef6:	84 e0       	ldi	r24, 0x04	; 4
    1ef8:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1efc:	80 91 e8 26 	lds	r24, 0x26E8
    1f00:	86 ff       	sbrs	r24, 6
    1f02:	86 c0       	rjmp	.+268    	; 0x2010 <__vector_125+0x15e>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1f04:	80 91 cc 04 	lds	r24, 0x04CC
    1f08:	81 fd       	sbrc	r24, 1
    1f0a:	82 c0       	rjmp	.+260    	; 0x2010 <__vector_125+0x15e>
    1f0c:	f8 db       	rcall	.-2064   	; 0x16fe <udd_ctrl_interrupt_tc_setup>
    1f0e:	81 11       	cpse	r24, r1
    1f10:	7f c0       	rjmp	.+254    	; 0x2010 <__vector_125+0x15e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1f12:	80 91 d2 26 	lds	r24, 0x26D2
    1f16:	90 91 d3 26 	lds	r25, 0x26D3
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <__vector_125+0x72>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1f20:	23 db       	rcall	.-2490   	; 0x1568 <udd_ctrl_send_zlp_in>
    1f22:	76 c0       	rjmp	.+236    	; 0x2010 <__vector_125+0x15e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1f24:	04 97       	sbiw	r24, 0x04	; 4
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <__vector_125+0x78>
    1f28:	73 c0       	rjmp	.+230    	; 0x2010 <__vector_125+0x15e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1f2a:	e9 ee       	ldi	r30, 0xE9	; 233
    1f2c:	f6 e2       	ldi	r31, 0x26	; 38
    1f2e:	04 e0       	ldi	r16, 0x04	; 4
    1f30:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1f32:	e1 ee       	ldi	r30, 0xE1	; 225
    1f34:	f6 e2       	ldi	r31, 0x26	; 38
    1f36:	04 e0       	ldi	r16, 0x04	; 4
    1f38:	05 93       	las	Z, r16
    1f3a:	6a c0       	rjmp	.+212    	; 0x2010 <__vector_125+0x15e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1f3c:	80 91 cb 04 	lds	r24, 0x04CB
    1f40:	81 ff       	sbrs	r24, 1
    1f42:	61 c0       	rjmp	.+194    	; 0x2006 <__vector_125+0x154>
		udd_ack_overflow_event();
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1f4a:	80 91 e0 26 	lds	r24, 0x26E0
    1f4e:	86 ff       	sbrs	r24, 6
    1f50:	5f c0       	rjmp	.+190    	; 0x2010 <__vector_125+0x15e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1f52:	80 91 cc 04 	lds	r24, 0x04CC
    1f56:	81 fd       	sbrc	r24, 1
    1f58:	5b c0       	rjmp	.+182    	; 0x2010 <__vector_125+0x15e>
    1f5a:	d1 db       	rcall	.-2142   	; 0x16fe <udd_ctrl_interrupt_tc_setup>
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	58 c0       	rjmp	.+176    	; 0x2010 <__vector_125+0x15e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1f60:	80 91 d2 26 	lds	r24, 0x26D2
    1f64:	90 91 d3 26 	lds	r25, 0x26D3
    1f68:	82 30       	cpi	r24, 0x02	; 2
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	59 f4       	brne	.+22     	; 0x1f84 <__vector_125+0xd2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1f6e:	84 e0       	ldi	r24, 0x04	; 4
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	80 93 d2 26 	sts	0x26D2, r24
    1f76:	90 93 d3 26 	sts	0x26D3, r25
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1f7a:	e0 ee       	ldi	r30, 0xE0	; 224
    1f7c:	f6 e2       	ldi	r31, 0x26	; 38
    1f7e:	02 e0       	ldi	r16, 0x02	; 2
    1f80:	06 93       	lac	Z, r16
    1f82:	46 c0       	rjmp	.+140    	; 0x2010 <__vector_125+0x15e>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1f84:	03 97       	sbiw	r24, 0x03	; 3
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <__vector_125+0xd8>
    1f88:	43 c0       	rjmp	.+134    	; 0x2010 <__vector_125+0x15e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1f8a:	e9 ee       	ldi	r30, 0xE9	; 233
    1f8c:	f6 e2       	ldi	r31, 0x26	; 38
    1f8e:	04 e0       	ldi	r16, 0x04	; 4
    1f90:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1f92:	e1 ee       	ldi	r30, 0xE1	; 225
    1f94:	f6 e2       	ldi	r31, 0x26	; 38
    1f96:	04 e0       	ldi	r16, 0x04	; 4
    1f98:	05 93       	las	Z, r16
    1f9a:	3a c0       	rjmp	.+116    	; 0x2010 <__vector_125+0x15e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1f9c:	80 e1       	ldi	r24, 0x10	; 16
    1f9e:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	0e df       	rcall	.-484    	; 0x1dc2 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1fa6:	81 e8       	ldi	r24, 0x81	; 129
    1fa8:	0c df       	rcall	.-488    	; 0x1dc2 <udd_ep_abort>
		}
#endif
		udc_reset();
    1faa:	0e 94 48 07 	call	0xe90	; 0xe90 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1fae:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1fb2:	e1 ee       	ldi	r30, 0xE1	; 225
    1fb4:	f6 e2       	ldi	r31, 0x26	; 38
    1fb6:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1fb8:	96 e0       	ldi	r25, 0x06	; 6
    1fba:	90 93 e0 26 	sts	0x26E0, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1fbe:	83 e4       	ldi	r24, 0x43	; 67
    1fc0:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1fc2:	e9 ee       	ldi	r30, 0xE9	; 233
    1fc4:	f6 e2       	ldi	r31, 0x26	; 38
    1fc6:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1fc8:	90 93 e8 26 	sts	0x26E8, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1fcc:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1fce:	8e e8       	ldi	r24, 0x8E	; 142
    1fd0:	96 e2       	ldi	r25, 0x26	; 38
    1fd2:	80 93 e4 26 	sts	0x26E4, r24
    1fd6:	90 93 e5 26 	sts	0x26E5, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1fda:	88 da       	rcall	.-2800   	; 0x14ec <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1fdc:	19 c0       	rjmp	.+50     	; 0x2010 <__vector_125+0x15e>
	}

	if (udd_is_suspend_event()) {
    1fde:	80 91 cb 04 	lds	r24, 0x04CB
    1fe2:	86 ff       	sbrs	r24, 6
    1fe4:	06 c0       	rjmp	.+12     	; 0x1ff2 <__vector_125+0x140>
		udd_ack_suspend_event();
    1fe6:	80 e4       	ldi	r24, 0x40	; 64
    1fe8:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	5f da       	rcall	.-2882   	; 0x14ae <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <__vector_125+0x15e>
	}

	if (udd_is_resume_event()) {
    1ff2:	80 91 cb 04 	lds	r24, 0x04CB
    1ff6:	85 ff       	sbrs	r24, 5
    1ff8:	0b c0       	rjmp	.+22     	; 0x2010 <__vector_125+0x15e>
		udd_ack_resume_event();
    1ffa:	80 e2       	ldi	r24, 0x20	; 32
    1ffc:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	55 da       	rcall	.-2902   	; 0x14ae <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <__vector_125+0x15e>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2006:	80 91 cb 04 	lds	r24, 0x04CB
    200a:	84 ff       	sbrs	r24, 4
    200c:	e8 cf       	rjmp	.-48     	; 0x1fde <__vector_125+0x12c>
    200e:	c6 cf       	rjmp	.-116    	; 0x1f9c <__vector_125+0xea>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2010:	ff 91       	pop	r31
    2012:	ef 91       	pop	r30
    2014:	bf 91       	pop	r27
    2016:	af 91       	pop	r26
    2018:	9f 91       	pop	r25
    201a:	8f 91       	pop	r24
    201c:	7f 91       	pop	r23
    201e:	6f 91       	pop	r22
    2020:	5f 91       	pop	r21
    2022:	4f 91       	pop	r20
    2024:	3f 91       	pop	r19
    2026:	2f 91       	pop	r18
    2028:	0f 91       	pop	r16
    202a:	0f 90       	pop	r0
    202c:	0b be       	out	0x3b, r0	; 59
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2038:	1f 92       	push	r1
    203a:	0f 92       	push	r0
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	0f 92       	push	r0
    2040:	11 24       	eor	r1, r1
    2042:	0b b6       	in	r0, 0x3b	; 59
    2044:	0f 92       	push	r0
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	2f 93       	push	r18
    204c:	3f 93       	push	r19
    204e:	4f 93       	push	r20
    2050:	5f 93       	push	r21
    2052:	6f 93       	push	r22
    2054:	7f 93       	push	r23
    2056:	8f 93       	push	r24
    2058:	9f 93       	push	r25
    205a:	af 93       	push	r26
    205c:	bf 93       	push	r27
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	ef 93       	push	r30
    2064:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2066:	80 91 cc 04 	lds	r24, 0x04CC
    206a:	81 fd       	sbrc	r24, 1
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    206e:	47 db       	rcall	.-2418   	; 0x16fe <udd_ctrl_interrupt_tc_setup>
    2070:	81 11       	cpse	r24, r1
    2072:	ba c0       	rjmp	.+372    	; 0x21e8 <__vector_126+0x1b0>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    207a:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    207e:	81 95       	neg	r24
    2080:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2082:	e0 ee       	ldi	r30, 0xE0	; 224
    2084:	f6 e2       	ldi	r31, 0x26	; 38
    2086:	e8 1b       	sub	r30, r24
    2088:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    208a:	20 81       	ld	r18, Z
    208c:	31 81       	ldd	r19, Z+1	; 0x01
    208e:	20 5e       	subi	r18, 0xE0	; 224
    2090:	36 42       	sbci	r19, 0x26	; 38
    2092:	36 95       	lsr	r19
    2094:	27 95       	ror	r18
    2096:	36 95       	lsr	r19
    2098:	27 95       	ror	r18
    209a:	36 95       	lsr	r19
    209c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    209e:	82 2f       	mov	r24, r18
    20a0:	86 95       	lsr	r24
    20a2:	20 ff       	sbrs	r18, 0
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <__vector_126+0x72>
    20a6:	90 e8       	ldi	r25, 0x80	; 128
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <__vector_126+0x74>
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    20ae:	e8 2f       	mov	r30, r24
    20b0:	ef 70       	andi	r30, 0x0F	; 15
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	ee 0f       	add	r30, r30
    20b6:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    20b8:	28 2f       	mov	r18, r24
    20ba:	33 27       	eor	r19, r19
    20bc:	27 fd       	sbrc	r18, 7
    20be:	30 95       	com	r19
    20c0:	22 27       	eor	r18, r18
    20c2:	33 0f       	add	r19, r19
    20c4:	22 1f       	adc	r18, r18
    20c6:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    20c8:	e2 0f       	add	r30, r18
    20ca:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	ee 0f       	add	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	e0 52       	subi	r30, 0x20	; 32
    20da:	f9 4d       	sbci	r31, 0xD9	; 217
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    20dc:	90 81       	ld	r25, Z
    20de:	95 ff       	sbrs	r25, 5
    20e0:	83 c0       	rjmp	.+262    	; 0x21e8 <__vector_126+0x1b0>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    20e2:	00 e2       	ldi	r16, 0x20	; 32
    20e4:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    20e6:	81 11       	cpse	r24, r1
    20e8:	7a c0       	rjmp	.+244    	; 0x21de <__vector_126+0x1a6>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    20ea:	80 91 d2 26 	lds	r24, 0x26D2
    20ee:	90 91 d3 26 	lds	r25, 0x26D3
    20f2:	04 97       	sbiw	r24, 0x04	; 4
    20f4:	19 f4       	brne	.+6      	; 0x20fc <__vector_126+0xc4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    20f6:	49 da       	rcall	.-2926   	; 0x158a <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    20f8:	f9 d9       	rcall	.-3086   	; 0x14ec <udd_ctrl_init>
    20fa:	76 c0       	rjmp	.+236    	; 0x21e8 <__vector_126+0x1b0>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    20fc:	c0 91 e2 26 	lds	r28, 0x26E2
    2100:	d0 91 e3 26 	lds	r29, 0x26E3

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2104:	80 91 2f 27 	lds	r24, 0x272F
    2108:	90 91 30 27 	lds	r25, 0x2730
    210c:	00 91 ce 26 	lds	r16, 0x26CE
    2110:	10 91 cf 26 	lds	r17, 0x26CF
    2114:	98 01       	movw	r18, r16
    2116:	2c 0f       	add	r18, r28
    2118:	3d 1f       	adc	r19, r29
    211a:	82 17       	cp	r24, r18
    211c:	93 07       	cpc	r25, r19
    211e:	18 f4       	brcc	.+6      	; 0x2126 <__vector_126+0xee>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2120:	ec 01       	movw	r28, r24
    2122:	c0 1b       	sub	r28, r16
    2124:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2126:	80 91 2d 27 	lds	r24, 0x272D
    212a:	90 91 2e 27 	lds	r25, 0x272E
    212e:	ae 01       	movw	r20, r28
    2130:	6e e8       	ldi	r22, 0x8E	; 142
    2132:	76 e2       	ldi	r23, 0x26	; 38
    2134:	80 0f       	add	r24, r16
    2136:	91 1f       	adc	r25, r17
    2138:	b0 d1       	rcall	.+864    	; 0x249a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    213a:	0c 0f       	add	r16, r28
    213c:	1d 1f       	adc	r17, r29
    213e:	00 93 ce 26 	sts	0x26CE, r16
    2142:	10 93 cf 26 	sts	0x26CF, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2146:	c0 34       	cpi	r28, 0x40	; 64
    2148:	d1 05       	cpc	r29, r1
    214a:	69 f4       	brne	.+26     	; 0x2166 <__vector_126+0x12e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    214c:	80 91 d0 26 	lds	r24, 0x26D0
    2150:	90 91 d1 26 	lds	r25, 0x26D1
    2154:	80 0f       	add	r24, r16
    2156:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2158:	20 91 2b 27 	lds	r18, 0x272B
    215c:	30 91 2c 27 	lds	r19, 0x272C
    2160:	82 17       	cp	r24, r18
    2162:	93 07       	cpc	r25, r19
    2164:	88 f0       	brcs	.+34     	; 0x2188 <__vector_126+0x150>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2166:	00 93 2f 27 	sts	0x272F, r16
    216a:	10 93 30 27 	sts	0x2730, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    216e:	e0 91 33 27 	lds	r30, 0x2733
    2172:	f0 91 34 27 	lds	r31, 0x2734
    2176:	30 97       	sbiw	r30, 0x00	; 0
    2178:	29 f0       	breq	.+10     	; 0x2184 <__vector_126+0x14c>
			if (!udd_g_ctrlreq.over_under_run()) {
    217a:	09 95       	icall
    217c:	81 11       	cpse	r24, r1
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <__vector_126+0x14c>
				// Stall ZLP
				udd_ctrl_stall_data();
    2180:	e2 d9       	rcall	.-3132   	; 0x1546 <udd_ctrl_stall_data>
    2182:	32 c0       	rjmp	.+100    	; 0x21e8 <__vector_126+0x1b0>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2184:	f1 d9       	rcall	.-3102   	; 0x1568 <udd_ctrl_send_zlp_in>
    2186:	30 c0       	rjmp	.+96     	; 0x21e8 <__vector_126+0x1b0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2188:	80 91 2f 27 	lds	r24, 0x272F
    218c:	90 91 30 27 	lds	r25, 0x2730
    2190:	08 17       	cp	r16, r24
    2192:	19 07       	cpc	r17, r25
    2194:	f9 f4       	brne	.+62     	; 0x21d4 <__vector_126+0x19c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2196:	e0 91 33 27 	lds	r30, 0x2733
    219a:	f0 91 34 27 	lds	r31, 0x2734
    219e:	30 97       	sbiw	r30, 0x00	; 0
    21a0:	11 f4       	brne	.+4      	; 0x21a6 <__vector_126+0x16e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    21a2:	d1 d9       	rcall	.-3166   	; 0x1546 <udd_ctrl_stall_data>
    21a4:	21 c0       	rjmp	.+66     	; 0x21e8 <__vector_126+0x1b0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    21a6:	09 95       	icall
    21a8:	81 11       	cpse	r24, r1
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <__vector_126+0x178>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    21ac:	cc d9       	rcall	.-3176   	; 0x1546 <udd_ctrl_stall_data>
    21ae:	1c c0       	rjmp	.+56     	; 0x21e8 <__vector_126+0x1b0>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    21b0:	20 91 d0 26 	lds	r18, 0x26D0
    21b4:	30 91 d1 26 	lds	r19, 0x26D1
    21b8:	80 91 ce 26 	lds	r24, 0x26CE
    21bc:	90 91 cf 26 	lds	r25, 0x26CF
    21c0:	82 0f       	add	r24, r18
    21c2:	93 1f       	adc	r25, r19
    21c4:	80 93 d0 26 	sts	0x26D0, r24
    21c8:	90 93 d1 26 	sts	0x26D1, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    21cc:	10 92 ce 26 	sts	0x26CE, r1
    21d0:	10 92 cf 26 	sts	0x26CF, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    21d4:	e0 ee       	ldi	r30, 0xE0	; 224
    21d6:	f6 e2       	ldi	r31, 0x26	; 38
    21d8:	02 e0       	ldi	r16, 0x02	; 2
    21da:	06 93       	lac	Z, r16
    21dc:	05 c0       	rjmp	.+10     	; 0x21e8 <__vector_126+0x1b0>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    21de:	80 38       	cpi	r24, 0x80	; 128
    21e0:	11 f4       	brne	.+4      	; 0x21e6 <__vector_126+0x1ae>
		udd_ctrl_in_sent();
    21e2:	db d9       	rcall	.-3146   	; 0x159a <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <__vector_126+0x1b0>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    21e6:	02 db       	rcall	.-2556   	; 0x17ec <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    21e8:	ff 91       	pop	r31
    21ea:	ef 91       	pop	r30
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	bf 91       	pop	r27
    21f2:	af 91       	pop	r26
    21f4:	9f 91       	pop	r25
    21f6:	8f 91       	pop	r24
    21f8:	7f 91       	pop	r23
    21fa:	6f 91       	pop	r22
    21fc:	5f 91       	pop	r21
    21fe:	4f 91       	pop	r20
    2200:	3f 91       	pop	r19
    2202:	2f 91       	pop	r18
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	0f 90       	pop	r0
    220a:	0b be       	out	0x3b, r0	; 59
    220c:	0f 90       	pop	r0
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	0f 90       	pop	r0
    2212:	1f 90       	pop	r1
    2214:	18 95       	reti

00002216 <toUint8_t>:
		
	}
}

uint8_t toUint8_t(char ch){
	switch(ch) {
    2216:	99 27       	eor	r25, r25
    2218:	87 fd       	sbrc	r24, 7
    221a:	90 95       	com	r25
    221c:	a9 2f       	mov	r26, r25
    221e:	b9 2f       	mov	r27, r25
    2220:	fc 01       	movw	r30, r24
    2222:	f1 97       	sbiw	r30, 0x31	; 49
    2224:	e6 33       	cpi	r30, 0x36	; 54
    2226:	f1 05       	cpc	r31, r1
    2228:	18 f4       	brcc	.+6      	; 0x2230 <toUint8_t+0x1a>
    222a:	eb 5f       	subi	r30, 0xFB	; 251
    222c:	fe 4f       	sbci	r31, 0xFE	; 254
    222e:	2f c1       	rjmp	.+606    	; 0x248e <__tablejump2__>
	case '0': return 0x0;
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	08 95       	ret
	case '1': return 0x1;
	case '2': return 0x2;
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	08 95       	ret
	case '3': return 0x3;
    2238:	83 e0       	ldi	r24, 0x03	; 3
    223a:	08 95       	ret
	case '4': return 0x4;
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	08 95       	ret
	case '5': return 0x5;
    2240:	85 e0       	ldi	r24, 0x05	; 5
    2242:	08 95       	ret
	case '6': return 0x6;
    2244:	86 e0       	ldi	r24, 0x06	; 6
    2246:	08 95       	ret
	case '7': return 0x7;
    2248:	87 e0       	ldi	r24, 0x07	; 7
    224a:	08 95       	ret
	case '8': return 0x8;
    224c:	88 e0       	ldi	r24, 0x08	; 8
    224e:	08 95       	ret
	case '9': return 0x9;
    2250:	89 e0       	ldi	r24, 0x09	; 9
    2252:	08 95       	ret
	case 'A': return 0xA;
    2254:	8a e0       	ldi	r24, 0x0A	; 10
    2256:	08 95       	ret
	case 'B': return 0xB;
    2258:	8b e0       	ldi	r24, 0x0B	; 11
    225a:	08 95       	ret
	case 'C': return 0xC;
    225c:	8c e0       	ldi	r24, 0x0C	; 12
    225e:	08 95       	ret
	case 'D': return 0xD;
    2260:	8d e0       	ldi	r24, 0x0D	; 13
    2262:	08 95       	ret
	case 'E': return 0xE;
    2264:	8e e0       	ldi	r24, 0x0E	; 14
    2266:	08 95       	ret
	case 'F': return 0xF;
    2268:	8f e0       	ldi	r24, 0x0F	; 15
    226a:	08 95       	ret
	case 'a': return 0xA;
    226c:	8a e0       	ldi	r24, 0x0A	; 10
    226e:	08 95       	ret
	case 'b': return 0xB;
    2270:	8b e0       	ldi	r24, 0x0B	; 11
    2272:	08 95       	ret
	case 'c': return 0xC;
    2274:	8c e0       	ldi	r24, 0x0C	; 12
    2276:	08 95       	ret
	case 'd': return 0xD;
    2278:	8d e0       	ldi	r24, 0x0D	; 13
    227a:	08 95       	ret
	case 'e': return 0xE;
    227c:	8e e0       	ldi	r24, 0x0E	; 14
    227e:	08 95       	ret
	case 'f': return 0xF;
    2280:	8f e0       	ldi	r24, 0x0F	; 15
    2282:	08 95       	ret
}

uint8_t toUint8_t(char ch){
	switch(ch) {
	case '0': return 0x0;
	case '1': return 0x1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
	case 'd': return 0xD;
	case 'e': return 0xE;
	case 'f': return 0xF;
	default: return 0x0;
	}
}
    2286:	08 95       	ret

00002288 <uart_rx_notify>:
}



void uart_rx_notify(uint8_t port) 
{	
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
	static uint8_t nibble = 1;
	static uint16_t buffer_idx = 0;
	int ch = 0;
	uint8_t temp_value = 0;
    2290:	00 e0       	ldi	r16, 0x00	; 0
	while(udi_cdc_is_rx_ready()) {
		ch = udi_cdc_getc();
		
		if ((char)ch == '\n' || (char)ch == '\r'){
			buffer_idx = 0;
			nibble=1;
    2292:	11 e0       	ldi	r17, 0x01	; 1
{	
	static uint8_t nibble = 1;
	static uint16_t buffer_idx = 0;
	int ch = 0;
	uint8_t temp_value = 0;
	while(udi_cdc_is_rx_ready()) {
    2294:	29 c0       	rjmp	.+82     	; 0x22e8 <uart_rx_notify+0x60>
		ch = udi_cdc_getc();
    2296:	0e 94 d4 05 	call	0xba8	; 0xba8 <udi_cdc_getc>
		
		if ((char)ch == '\n' || (char)ch == '\r'){
    229a:	8a 30       	cpi	r24, 0x0A	; 10
    229c:	11 f0       	breq	.+4      	; 0x22a2 <uart_rx_notify+0x1a>
    229e:	8d 30       	cpi	r24, 0x0D	; 13
    22a0:	39 f4       	brne	.+14     	; 0x22b0 <uart_rx_notify+0x28>
			buffer_idx = 0;
    22a2:	10 92 15 27 	sts	0x2715, r1
    22a6:	10 92 16 27 	sts	0x2716, r1
			nibble=1;
    22aa:	10 93 b0 20 	sts	0x20B0, r17
    22ae:	1c c0       	rjmp	.+56     	; 0x22e8 <uart_rx_notify+0x60>
		}else{
			if (nibble == 0) {
    22b0:	90 91 b0 20 	lds	r25, 0x20B0
    22b4:	91 11       	cpse	r25, r1
    22b6:	12 c0       	rjmp	.+36     	; 0x22dc <uart_rx_notify+0x54>
				buffer[buffer_idx] = temp_value | toUint8_t((char)ch);
    22b8:	c0 91 15 27 	lds	r28, 0x2715
    22bc:	d0 91 16 27 	lds	r29, 0x2716
    22c0:	aa df       	rcall	.-172    	; 0x2216 <toUint8_t>
    22c2:	fe 01       	movw	r30, r28
    22c4:	eb 5c       	subi	r30, 0xCB	; 203
    22c6:	f8 4d       	sbci	r31, 0xD8	; 216
    22c8:	80 2b       	or	r24, r16
    22ca:	80 83       	st	Z, r24
				nibble = 1;
    22cc:	10 93 b0 20 	sts	0x20B0, r17
				buffer_idx++;
    22d0:	21 96       	adiw	r28, 0x01	; 1
    22d2:	c0 93 15 27 	sts	0x2715, r28
    22d6:	d0 93 16 27 	sts	0x2716, r29
    22da:	06 c0       	rjmp	.+12     	; 0x22e8 <uart_rx_notify+0x60>
			} else {
				temp_value = toUint8_t((char)ch) << 4;
    22dc:	9c df       	rcall	.-200    	; 0x2216 <toUint8_t>
    22de:	08 2f       	mov	r16, r24
    22e0:	02 95       	swap	r16
    22e2:	00 7f       	andi	r16, 0xF0	; 240
				nibble = 0;
    22e4:	10 92 b0 20 	sts	0x20B0, r1
{	
	static uint8_t nibble = 1;
	static uint16_t buffer_idx = 0;
	int ch = 0;
	uint8_t temp_value = 0;
	while(udi_cdc_is_rx_ready()) {
    22e8:	0e 94 84 05 	call	0xb08	; 0xb08 <udi_cdc_is_rx_ready>
    22ec:	81 11       	cpse	r24, r1
    22ee:	d3 cf       	rjmp	.-90     	; 0x2296 <uart_rx_notify+0xe>
				nibble = 0;
			}
		}
		
	}
}
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret

000022fa <init>:
	case 'f': return 0xF;
	default: return 0x0;
	}
}

void init(void){
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
	//USART initialization should use the following sequence:
	//1. Set the TxD pin value high, and optionally set the XCK pin low.
	PORTC.OUT |= (1 << 7);
    22fe:	e0 e4       	ldi	r30, 0x40	; 64
    2300:	f6 e0       	ldi	r31, 0x06	; 6
    2302:	84 81       	ldd	r24, Z+4	; 0x04
    2304:	80 68       	ori	r24, 0x80	; 128
    2306:	84 83       	std	Z+4, r24	; 0x04
	//2. Set the TxD and optionally the XCK pin as output.
	PORTC.DIR |= (1 << 5)|(1 << 7);
    2308:	80 81       	ld	r24, Z
    230a:	80 6a       	ori	r24, 0xA0	; 160
    230c:	80 83       	st	Z, r24
	//3. Set the baud rate and frame format. BAUD = 250k (7)
	USARTC1.BAUDCTRLA = 5;
    230e:	a0 eb       	ldi	r26, 0xB0	; 176
    2310:	b8 e0       	ldi	r27, 0x08	; 8
    2312:	85 e0       	ldi	r24, 0x05	; 5
    2314:	16 96       	adiw	r26, 0x06	; 6
    2316:	8c 93       	st	X, r24
    2318:	16 97       	sbiw	r26, 0x06	; 6
	USARTC1.BAUDCTRLB = 0;
    231a:	17 96       	adiw	r26, 0x07	; 7
    231c:	1c 92       	st	X, r1
    231e:	17 97       	sbiw	r26, 0x07	; 7
	//4. Set the mode of operation (enables XCK pin output in synchronous mode)., no parity, 2 stop bits, 8-bit length
	USARTC1.CTRLC |= (1 << 0)|(1 << 1)|(1 << 3);
    2320:	15 96       	adiw	r26, 0x05	; 5
    2322:	8c 91       	ld	r24, X
    2324:	15 97       	sbiw	r26, 0x05	; 5
    2326:	8b 60       	ori	r24, 0x0B	; 11
    2328:	15 96       	adiw	r26, 0x05	; 5
    232a:	8c 93       	st	X, r24
    232c:	15 97       	sbiw	r26, 0x05	; 5
	//5. Enable the transmitter
	USARTC1.CTRLB |= (1 << 3);
    232e:	14 96       	adiw	r26, 0x04	; 4
    2330:	8c 91       	ld	r24, X
    2332:	14 97       	sbiw	r26, 0x04	; 4
    2334:	88 60       	ori	r24, 0x08	; 8
    2336:	14 96       	adiw	r26, 0x04	; 4
    2338:	8c 93       	st	X, r24
    233a:	14 97       	sbiw	r26, 0x04	; 4
	
	PORTC.OUT |= (1 << 5);   //enable transmit
    233c:	84 81       	ldd	r24, Z+4	; 0x04
    233e:	80 62       	ori	r24, 0x20	; 32
    2340:	84 83       	std	Z+4, r24	; 0x04
	PORTC.OUT |= (1 << 4);
    2342:	84 81       	ldd	r24, Z+4	; 0x04
    2344:	80 61       	ori	r24, 0x10	; 16
    2346:	84 83       	std	Z+4, r24	; 0x04
	
	memset(&dmach_conf, 0, sizeof(dmach_conf));
    2348:	8b e0       	ldi	r24, 0x0B	; 11
    234a:	e5 e3       	ldi	r30, 0x35	; 53
    234c:	f9 e2       	ldi	r31, 0x29	; 41
    234e:	ef 01       	movw	r28, r30
    2350:	19 92       	st	Y+, r1
    2352:	8a 95       	dec	r24
    2354:	e9 f7       	brne	.-6      	; 0x2350 <init+0x56>
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	92 e0       	ldi	r25, 0x02	; 2
    235a:	80 93 39 29 	sts	0x2939, r24
    235e:	90 93 3a 29 	sts	0x293A, r25
static inline void dma_channel_set_src_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_SRCDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_SRCDIR_gm;
	config->addrctrl |= mode;
    2362:	8c ed       	ldi	r24, 0xDC	; 220
    2364:	80 93 37 29 	sts	0x2937, r24
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    2368:	85 e3       	ldi	r24, 0x35	; 53
    236a:	97 e2       	ldi	r25, 0x27	; 39
    236c:	80 93 3c 29 	sts	0x293C, r24
    2370:	90 93 3d 29 	sts	0x293D, r25
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    2374:	a0 93 3e 29 	sts	0x293E, r26
    2378:	b0 93 3f 29 	sts	0x293F, r27
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    237c:	8f e4       	ldi	r24, 0x4F	; 79
    237e:	80 93 38 29 	sts	0x2938, r24
	(uint16_t)(uintptr_t)buffer);
	dma_channel_set_dest_dir_mode(&dmach_conf, DMA_CH_DESTDIR_FIXED_gc);
	dma_channel_set_destination_address(&dmach_conf,
	(uint16_t)(uintptr_t)&USARTC1.DATA);
	dma_channel_set_trigger_source(&dmach_conf, DMA_CH_TRIGSRC_USARTC1_DRE_gc);
	dma_enable();
    2382:	0e 94 c2 01 	call	0x384	; 0x384 <dma_enable>
	
}
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	08 95       	ret

0000238c <sendDMXPacket>:

void sendDMXPacket(void){
	while ( !( USARTC1.STATUS & USART_TXCIF_bm) );
    238c:	e0 eb       	ldi	r30, 0xB0	; 176
    238e:	f8 e0       	ldi	r31, 0x08	; 8
    2390:	81 81       	ldd	r24, Z+1	; 0x01
    2392:	86 ff       	sbrs	r24, 6
    2394:	fd cf       	rjmp	.-6      	; 0x2390 <sendDMXPacket+0x4>
	USARTC1.STATUS |= USART_TXCIF_bm;
    2396:	e0 eb       	ldi	r30, 0xB0	; 176
    2398:	f8 e0       	ldi	r31, 0x08	; 8
    239a:	81 81       	ldd	r24, Z+1	; 0x01
    239c:	80 64       	ori	r24, 0x40	; 64
    239e:	81 83       	std	Z+1, r24	; 0x01
	USARTC1.BAUDCTRLA = 25;
    23a0:	89 e1       	ldi	r24, 0x19	; 25
    23a2:	86 83       	std	Z+6, r24	; 0x06
	USARTC1.BAUDCTRLB = 0;
    23a4:	17 82       	std	Z+7, r1	; 0x07
	
	while ( !( USARTC1.STATUS & USART_DREIF_bm) );
    23a6:	81 81       	ldd	r24, Z+1	; 0x01
    23a8:	85 ff       	sbrs	r24, 5
    23aa:	fd cf       	rjmp	.-6      	; 0x23a6 <sendDMXPacket+0x1a>
	USARTC1.DATA = 0x00; // Break+Mark
    23ac:	10 92 b0 08 	sts	0x08B0, r1

	while ( !( USARTC1.STATUS & USART_TXCIF_bm) );
    23b0:	e0 eb       	ldi	r30, 0xB0	; 176
    23b2:	f8 e0       	ldi	r31, 0x08	; 8
    23b4:	81 81       	ldd	r24, Z+1	; 0x01
    23b6:	86 ff       	sbrs	r24, 6
    23b8:	fd cf       	rjmp	.-6      	; 0x23b4 <sendDMXPacket+0x28>
	USARTC1.STATUS |= USART_TXCIF_bm;
    23ba:	e0 eb       	ldi	r30, 0xB0	; 176
    23bc:	f8 e0       	ldi	r31, 0x08	; 8
    23be:	81 81       	ldd	r24, Z+1	; 0x01
    23c0:	80 64       	ori	r24, 0x40	; 64
    23c2:	81 83       	std	Z+1, r24	; 0x01
	USARTC1.BAUDCTRLB = 0;
    23c4:	17 82       	std	Z+7, r1	; 0x07
	USARTC1.BAUDCTRLA = 5;
    23c6:	85 e0       	ldi	r24, 0x05	; 5
    23c8:	86 83       	std	Z+6, r24	; 0x06
	
	while ( !( USARTC1.STATUS & USART_DREIF_bm) );
    23ca:	81 81       	ldd	r24, Z+1	; 0x01
    23cc:	85 ff       	sbrs	r24, 5
    23ce:	fd cf       	rjmp	.-6      	; 0x23ca <sendDMXPacket+0x3e>

	// Send the start byte and then let the interrupt do the rest...
	USARTC1.DATA = 0x00; // send start byte
    23d0:	10 92 b0 08 	sts	0x08B0, r1
	
	dma_channel_write_config(0, &dmach_conf);
    23d4:	65 e3       	ldi	r22, 0x35	; 53
    23d6:	79 e2       	ldi	r23, 0x29	; 41
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	0e 94 75 02 	call	0x4ea	; 0x4ea <dma_channel_write_config>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    23de:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    23e0:	f8 94       	cli
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    23e2:	e0 e1       	ldi	r30, 0x10	; 16
    23e4:	f1 e0       	ldi	r31, 0x01	; 1
    23e6:	90 81       	ld	r25, Z
    23e8:	90 68       	ori	r25, 0x80	; 128
    23ea:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23ec:	8f bf       	out	0x3f, r24	; 63
 * \return Channel status given by a \ref dma_channel_status
 */
static inline enum dma_channel_status dma_get_channel_status(
		dma_channel_num_t num)
{
	uint8_t busy_pending    = DMA.STATUS;
    23ee:	e0 e0       	ldi	r30, 0x00	; 0
    23f0:	f1 e0       	ldi	r31, 0x01	; 1
    23f2:	84 81       	ldd	r24, Z+4	; 0x04
	uint8_t error_completed = DMA.INTFLAGS;
    23f4:	83 81       	ldd	r24, Z+3	; 0x03

	/*
	 * Check lower and upper nibble of INTFLAGS register to find possible
	 * error or transfer completed status.
	 */
	error_completed &= (1 << num) | (1 << (num + 4));
    23f6:	98 2f       	mov	r25, r24
    23f8:	91 71       	andi	r25, 0x11	; 17
	if (error_completed & (1 << (num + 4))) {
    23fa:	84 fd       	sbrc	r24, 4
    23fc:	fa cf       	rjmp	.-12     	; 0x23f2 <sendDMXPacket+0x66>
		return DMA_CH_TRANSFER_ERROR;
	} else if (error_completed & (1 << num)) {
    23fe:	90 ff       	sbrs	r25, 0
    2400:	f8 cf       	rjmp	.-16     	; 0x23f2 <sendDMXPacket+0x66>
	dma_channel_enable(0);
	//dma_channel_trigger_block_transfer0); 
	
	do {} while (dma_get_channel_status(0) != DMA_CH_TRANSFER_COMPLETED);
}
    2402:	08 95       	ret

00002404 <main>:
struct dma_channel_config dmach_conf;


int main (void)
{
	irq_initialize_vectors();
    2404:	87 e0       	ldi	r24, 0x07	; 7
    2406:	e0 ea       	ldi	r30, 0xA0	; 160
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    240c:	78 94       	sei
	sysclk_init();
    240e:	0e 94 ae 02 	call	0x55c	; 0x55c <sysclk_init>
	board_init();
    2412:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <board_init>
	
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2416:	60 e2       	ldi	r22, 0x20	; 32
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 1a 03 	call	0x634	; 0x634 <sysclk_enable_module>
	
	init();
    2420:	6c df       	rcall	.-296    	; 0x22fa <init>
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    2422:	0e 94 46 07 	call	0xe8c	; 0xe8c <udc_start>
	
	while ( !( USARTC1.STATUS & USART_DREIF_bm) );
    2426:	e0 eb       	ldi	r30, 0xB0	; 176
    2428:	f8 e0       	ldi	r31, 0x08	; 8
    242a:	81 81       	ldd	r24, Z+1	; 0x01
    242c:	85 ff       	sbrs	r24, 5
    242e:	fd cf       	rjmp	.-6      	; 0x242a <main+0x26>
	USARTC1.DATA = 0x00;
    2430:	10 92 b0 08 	sts	0x08B0, r1
    2434:	85 e3       	ldi	r24, 0x35	; 53
    2436:	97 e2       	ldi	r25, 0x27	; 39
    2438:	c5 e3       	ldi	r28, 0x35	; 53
    243a:	d9 e2       	ldi	r29, 0x29	; 41
    243c:	fc 01       	movw	r30, r24
	
	// Zero the buffer before we start
	for (int i = 0; i < 512; i++){
		buffer[i] = 0;
    243e:	11 92       	st	Z+, r1
	
	while ( !( USARTC1.STATUS & USART_DREIF_bm) );
	USARTC1.DATA = 0x00;
	
	// Zero the buffer before we start
	for (int i = 0; i < 512; i++){
    2440:	ec 17       	cp	r30, r28
    2442:	fd 07       	cpc	r31, r29
    2444:	e1 f7       	brne	.-8      	; 0x243e <main+0x3a>
		buffer[i] = 0;
	}
	
	while(1) {
		sendDMXPacket();
		udi_cdc_putc('a');
    2446:	08 2f       	mov	r16, r24
    2448:	19 2f       	mov	r17, r25
	for (int i = 0; i < 512; i++){
		buffer[i] = 0;
	}
	
	while(1) {
		sendDMXPacket();
    244a:	a0 df       	rcall	.-192    	; 0x238c <sendDMXPacket>
		udi_cdc_putc('a');
    244c:	81 e6       	ldi	r24, 0x61	; 97
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <udi_cdc_putc>
    2454:	e0 2f       	mov	r30, r16
    2456:	f1 2f       	mov	r31, r17
		// Test ramp
		for (int i = 0; i < 512; i++){
			buffer[i]++;
    2458:	80 81       	ld	r24, Z
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	81 93       	st	Z+, r24
	
	while(1) {
		sendDMXPacket();
		udi_cdc_putc('a');
		// Test ramp
		for (int i = 0; i < 512; i++){
    245e:	ec 17       	cp	r30, r28
    2460:	fd 07       	cpc	r31, r29
    2462:	d1 f7       	brne	.-12     	; 0x2458 <main+0x54>
    2464:	f2 cf       	rjmp	.-28     	; 0x244a <main+0x46>

00002466 <__udivmodhi4>:
    2466:	aa 1b       	sub	r26, r26
    2468:	bb 1b       	sub	r27, r27
    246a:	51 e1       	ldi	r21, 0x11	; 17
    246c:	07 c0       	rjmp	.+14     	; 0x247c <__udivmodhi4_ep>

0000246e <__udivmodhi4_loop>:
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	a6 17       	cp	r26, r22
    2474:	b7 07       	cpc	r27, r23
    2476:	10 f0       	brcs	.+4      	; 0x247c <__udivmodhi4_ep>
    2478:	a6 1b       	sub	r26, r22
    247a:	b7 0b       	sbc	r27, r23

0000247c <__udivmodhi4_ep>:
    247c:	88 1f       	adc	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	5a 95       	dec	r21
    2482:	a9 f7       	brne	.-22     	; 0x246e <__udivmodhi4_loop>
    2484:	80 95       	com	r24
    2486:	90 95       	com	r25
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	08 95       	ret

0000248e <__tablejump2__>:
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31

00002492 <__tablejump__>:
    2492:	05 90       	lpm	r0, Z+
    2494:	f4 91       	lpm	r31, Z
    2496:	e0 2d       	mov	r30, r0
    2498:	09 94       	ijmp

0000249a <memcpy>:
    249a:	fb 01       	movw	r30, r22
    249c:	dc 01       	movw	r26, r24
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <memcpy+0xa>
    24a0:	01 90       	ld	r0, Z+
    24a2:	0d 92       	st	X+, r0
    24a4:	41 50       	subi	r20, 0x01	; 1
    24a6:	50 40       	sbci	r21, 0x00	; 0
    24a8:	d8 f7       	brcc	.-10     	; 0x24a0 <memcpy+0x6>
    24aa:	08 95       	ret

000024ac <_exit>:
    24ac:	f8 94       	cli

000024ae <__stop_program>:
    24ae:	ff cf       	rjmp	.-2      	; 0x24ae <__stop_program>
