
DMX-Kontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001abe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00802000  00001abe  00001b52  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000276  00802080  00802080  00001bd4  2**2
                  ALLOC
  3 .stab         000007bc  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000017f  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000250f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005f0  00000000  00000000  00002540  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007d7d  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e45  00000000  00000000  0000a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000071a0  00000000  00000000  0000c6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ed0  00000000  00000000  00013894  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002c36c  00000000  00000000  00014764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041b2  00000000  00000000  00040ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000518  00000000  00000000  00044c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000a431  00000000  00000000  000451a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
       6:	00 00       	nop
       8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
       a:	00 00       	nop
       c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
       e:	00 00       	nop
      10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
      12:	00 00       	nop
      14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
      16:	00 00       	nop
      18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
      22:	00 00       	nop
      24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
      26:	00 00       	nop
      28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
      2e:	00 00       	nop
      30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
      32:	00 00       	nop
      34:	02 c1       	rjmp	.+516    	; 0x23a <__bad_interrupt>
      36:	00 00       	nop
      38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
      3e:	00 00       	nop
      40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
      42:	00 00       	nop
      44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
      46:	00 00       	nop
      48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
      4e:	00 00       	nop
      50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
      52:	00 00       	nop
      54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
      56:	00 00       	nop
      58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
      5e:	00 00       	nop
      60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
      62:	00 00       	nop
      64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
      66:	00 00       	nop
      68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
      6e:	00 00       	nop
      70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
      72:	00 00       	nop
      74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
      76:	00 00       	nop
      78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
      7e:	00 00       	nop
      80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
      82:	00 00       	nop
      84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
      86:	00 00       	nop
      88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
      8e:	00 00       	nop
      90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
      92:	00 00       	nop
      94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
      96:	00 00       	nop
      98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c0 c0       	rjmp	.+384    	; 0x23a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
      be:	00 00       	nop
      c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
      da:	00 00       	nop
      dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
      de:	00 00       	nop
      e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
      fe:	00 00       	nop
     100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
     102:	00 00       	nop
     104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
     106:	00 00       	nop
     108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
     10e:	00 00       	nop
     110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
     112:	00 00       	nop
     114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
     116:	00 00       	nop
     118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8e c0       	rjmp	.+284    	; 0x23a <__bad_interrupt>
     11e:	00 00       	nop
     120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
     122:	00 00       	nop
     124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
     126:	00 00       	nop
     128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
     12e:	00 00       	nop
     130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
     132:	00 00       	nop
     134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
     136:	00 00       	nop
     138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
     13e:	00 00       	nop
     140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
     142:	00 00       	nop
     144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
     146:	00 00       	nop
     148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
     14e:	00 00       	nop
     150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
     152:	00 00       	nop
     154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
     156:	00 00       	nop
     158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
     15e:	00 00       	nop
     160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
     162:	00 00       	nop
     164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
     166:	00 00       	nop
     168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
     16e:	00 00       	nop
     170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
     172:	00 00       	nop
     174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
     176:	00 00       	nop
     178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
     17e:	00 00       	nop
     180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
     182:	00 00       	nop
     184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
     186:	00 00       	nop
     188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
     18e:	00 00       	nop
     190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
     192:	00 00       	nop
     194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
     196:	00 00       	nop
     198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_125>
     1f8:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_126>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ee eb       	ldi	r30, 0xBE	; 190
     210:	fa e1       	ldi	r31, 0x1A	; 26
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0b bf       	out	0x3b, r16	; 59
     216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
     218:	07 90       	elpm	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	a0 38       	cpi	r26, 0x80	; 128
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
     222:	22 e2       	ldi	r18, 0x22	; 34
     224:	a0 e8       	ldi	r26, 0x80	; 128
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	a6 3f       	cpi	r26, 0xF6	; 246
     22e:	b2 07       	cpc	r27, r18
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <main>
     236:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <_exit>

0000023a <__bad_interrupt>:
     23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <ioport_configure_port_pin>:
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	fc 01       	movw	r30, r24
     242:	70 96       	adiw	r30, 0x10	; 16
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	c6 2f       	mov	r28, r22
     24a:	d0 e0       	ldi	r29, 0x00	; 0
     24c:	de 01       	movw	r26, r28
     24e:	02 2e       	mov	r0, r18
     250:	02 c0       	rjmp	.+4      	; 0x256 <ioport_configure_port_pin+0x1a>
     252:	b5 95       	asr	r27
     254:	a7 95       	ror	r26
     256:	0a 94       	dec	r0
     258:	e2 f7       	brpl	.-8      	; 0x252 <ioport_configure_port_pin+0x16>
     25a:	a0 fd       	sbrc	r26, 0
     25c:	50 83       	st	Z, r21
     25e:	2f 5f       	subi	r18, 0xFF	; 255
     260:	3f 4f       	sbci	r19, 0xFF	; 255
     262:	31 96       	adiw	r30, 0x01	; 1
     264:	28 30       	cpi	r18, 0x08	; 8
     266:	31 05       	cpc	r19, r1
     268:	89 f7       	brne	.-30     	; 0x24c <ioport_configure_port_pin+0x10>
     26a:	40 ff       	sbrs	r20, 0
     26c:	0a c0       	rjmp	.+20     	; 0x282 <ioport_configure_port_pin+0x46>
     26e:	41 ff       	sbrs	r20, 1
     270:	03 c0       	rjmp	.+6      	; 0x278 <ioport_configure_port_pin+0x3c>
     272:	fc 01       	movw	r30, r24
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     274:	65 83       	std	Z+5, r22	; 0x05
     276:	02 c0       	rjmp	.+4      	; 0x27c <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     278:	fc 01       	movw	r30, r24
     27a:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     27c:	fc 01       	movw	r30, r24
     27e:	61 83       	std	Z+1, r22	; 0x01
     280:	02 c0       	rjmp	.+4      	; 0x286 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     282:	fc 01       	movw	r30, r24
     284:	62 83       	std	Z+2, r22	; 0x02
	}
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
     28c:	10 92 89 20 	sts	0x2089, r1
     290:	10 92 8a 20 	sts	0x208A, r1
     294:	10 92 8b 20 	sts	0x208B, r1
     298:	81 ea       	ldi	r24, 0xA1	; 161
     29a:	80 93 8c 20 	sts	0x208C, r24
     29e:	80 e2       	ldi	r24, 0x20	; 32
     2a0:	80 93 8d 20 	sts	0x208D, r24
     2a4:	10 92 8e 20 	sts	0x208E, r1
     2a8:	10 92 8f 20 	sts	0x208F, r1
     2ac:	10 92 90 20 	sts	0x2090, r1
     2b0:	10 92 91 20 	sts	0x2091, r1
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	80 93 92 20 	sts	0x2092, r24
     2bc:	90 93 93 20 	sts	0x2093, r25
     2c0:	10 92 94 20 	sts	0x2094, r1
     2c4:	10 92 95 20 	sts	0x2095, r1
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	92 ec       	ldi	r25, 0xC2	; 194
     2cc:	a1 e0       	ldi	r26, 0x01	; 1
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	80 93 96 20 	sts	0x2096, r24
     2d4:	90 93 97 20 	sts	0x2097, r25
     2d8:	a0 93 98 20 	sts	0x2098, r26
     2dc:	b0 93 99 20 	sts	0x2099, r27
     2e0:	10 92 9a 20 	sts	0x209A, r1
     2e4:	10 92 9b 20 	sts	0x209B, r1
     2e8:	88 e0       	ldi	r24, 0x08	; 8
     2ea:	80 93 9c 20 	sts	0x209C, r24
     2ee:	80 91 89 20 	lds	r24, 0x2089
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	80 93 89 20 	sts	0x2089, r24
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	08 95       	ret

000002fc <udi_cdc_comm_disable>:
     2fc:	80 91 89 20 	lds	r24, 0x2089
     300:	81 50       	subi	r24, 0x01	; 1
     302:	80 93 89 20 	sts	0x2089, r24
     306:	08 95       	ret

00000308 <udi_cdc_data_disable>:
     308:	80 91 88 20 	lds	r24, 0x2088
     30c:	81 50       	subi	r24, 0x01	; 1
     30e:	80 93 88 20 	sts	0x2088, r24
     312:	80 91 88 20 	lds	r24, 0x2088
     316:	10 92 87 20 	sts	0x2087, r1
     31a:	08 95       	ret

0000031c <udi_cdc_data_setup>:
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	08 95       	ret

00000320 <udi_cdc_getsetting>:
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	08 95       	ret

00000324 <udi_cdc_comm_setup>:
     324:	80 91 e6 22 	lds	r24, 0x22E6
     328:	88 23       	and	r24, r24
     32a:	dc f4       	brge	.+54     	; 0x362 <udi_cdc_comm_setup+0x3e>
     32c:	80 76       	andi	r24, 0x60	; 96
     32e:	80 32       	cpi	r24, 0x20	; 32
     330:	e9 f5       	brne	.+122    	; 0x3ac <udi_cdc_comm_setup+0x88>
     332:	80 91 e7 22 	lds	r24, 0x22E7
     336:	81 32       	cpi	r24, 0x21	; 33
     338:	d9 f5       	brne	.+118    	; 0x3b0 <udi_cdc_comm_setup+0x8c>
     33a:	80 91 ec 22 	lds	r24, 0x22EC
     33e:	90 91 ed 22 	lds	r25, 0x22ED
     342:	07 97       	sbiw	r24, 0x07	; 7
     344:	b9 f5       	brne	.+110    	; 0x3b4 <udi_cdc_comm_setup+0x90>
     346:	86 e9       	ldi	r24, 0x96	; 150
     348:	90 e2       	ldi	r25, 0x20	; 32
     34a:	80 93 ee 22 	sts	0x22EE, r24
     34e:	90 93 ef 22 	sts	0x22EF, r25
     352:	87 e0       	ldi	r24, 0x07	; 7
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	80 93 f0 22 	sts	0x22F0, r24
     35a:	90 93 f1 22 	sts	0x22F1, r25
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	08 95       	ret
     362:	80 76       	andi	r24, 0x60	; 96
     364:	80 32       	cpi	r24, 0x20	; 32
     366:	41 f5       	brne	.+80     	; 0x3b8 <udi_cdc_comm_setup+0x94>
     368:	80 91 e7 22 	lds	r24, 0x22E7
     36c:	80 32       	cpi	r24, 0x20	; 32
     36e:	21 f0       	breq	.+8      	; 0x378 <udi_cdc_comm_setup+0x54>
     370:	82 32       	cpi	r24, 0x22	; 34
     372:	21 f5       	brne	.+72     	; 0x3bc <udi_cdc_comm_setup+0x98>
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	08 95       	ret
     378:	80 91 ec 22 	lds	r24, 0x22EC
     37c:	90 91 ed 22 	lds	r25, 0x22ED
     380:	07 97       	sbiw	r24, 0x07	; 7
     382:	f1 f4       	brne	.+60     	; 0x3c0 <udi_cdc_comm_setup+0x9c>
     384:	82 ee       	ldi	r24, 0xE2	; 226
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	80 93 f2 22 	sts	0x22F2, r24
     38c:	90 93 f3 22 	sts	0x22F3, r25
     390:	86 e9       	ldi	r24, 0x96	; 150
     392:	90 e2       	ldi	r25, 0x20	; 32
     394:	80 93 ee 22 	sts	0x22EE, r24
     398:	90 93 ef 22 	sts	0x22EF, r25
     39c:	87 e0       	ldi	r24, 0x07	; 7
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	80 93 f0 22 	sts	0x22F0, r24
     3a4:	90 93 f1 22 	sts	0x22F1, r25
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	08 95       	ret
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	08 95       	ret
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	08 95       	ret
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	08 95       	ret
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	08 95       	ret
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	08 95       	ret
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	08 95       	ret

000003c4 <udi_cdc_line_coding_received>:
     3c4:	08 95       	ret

000003c6 <udi_cdc_tx_send>:
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	80 91 81 20 	lds	r24, 0x2081
     3d4:	81 11       	cpse	r24, r1
     3d6:	9c c0       	rjmp	.+312    	; 0x510 <udi_cdc_tx_send+0x14a>
     3d8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <udd_is_high_speed>
     3dc:	88 23       	and	r24, r24
     3de:	51 f0       	breq	.+20     	; 0x3f4 <udi_cdc_tx_send+0x2e>
     3e0:	c0 91 a1 20 	lds	r28, 0x20A1
     3e4:	d0 91 a2 20 	lds	r29, 0x20A2
     3e8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <udd_get_micro_frame_number>
     3ec:	c8 17       	cp	r28, r24
     3ee:	d9 07       	cpc	r29, r25
     3f0:	59 f4       	brne	.+22     	; 0x408 <udi_cdc_tx_send+0x42>
     3f2:	8e c0       	rjmp	.+284    	; 0x510 <udi_cdc_tx_send+0x14a>
     3f4:	c0 91 a1 20 	lds	r28, 0x20A1
     3f8:	d0 91 a2 20 	lds	r29, 0x20A2
     3fc:	0e 94 94 0a 	call	0x1528	; 0x1528 <udd_get_frame_number>
     400:	c8 17       	cp	r28, r24
     402:	d9 07       	cpc	r29, r25
     404:	09 f4       	brne	.+2      	; 0x408 <udi_cdc_tx_send+0x42>
     406:	84 c0       	rjmp	.+264    	; 0x510 <udi_cdc_tx_send+0x14a>
     408:	df b7       	in	r29, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	c0 91 82 20 	lds	r28, 0x2082
     410:	ec 2f       	mov	r30, r28
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	e3 56       	subi	r30, 0x63	; 99
     41a:	ff 4d       	sbci	r31, 0xDF	; 223
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	89 2b       	or	r24, r25
     422:	09 f5       	brne	.+66     	; 0x466 <udi_cdc_tx_send+0xa0>
     424:	80 91 a7 20 	lds	r24, 0x20A7
     428:	90 91 a8 20 	lds	r25, 0x20A8
     42c:	01 96       	adiw	r24, 0x01	; 1
     42e:	80 93 a7 20 	sts	0x20A7, r24
     432:	90 93 a8 20 	sts	0x20A8, r25
     436:	0e 94 8c 0a 	call	0x1518	; 0x1518 <udd_is_high_speed>
     43a:	81 11       	cpse	r24, r1
     43c:	07 c0       	rjmp	.+14     	; 0x44c <udi_cdc_tx_send+0x86>
     43e:	80 91 a7 20 	lds	r24, 0x20A7
     442:	90 91 a8 20 	lds	r25, 0x20A8
     446:	84 36       	cpi	r24, 0x64	; 100
     448:	91 05       	cpc	r25, r1
     44a:	58 f0       	brcs	.+22     	; 0x462 <udi_cdc_tx_send+0x9c>
     44c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <udd_is_high_speed>
     450:	88 23       	and	r24, r24
     452:	49 f0       	breq	.+18     	; 0x466 <udi_cdc_tx_send+0xa0>
     454:	80 91 a7 20 	lds	r24, 0x20A7
     458:	90 91 a8 20 	lds	r25, 0x20A8
     45c:	80 32       	cpi	r24, 0x20	; 32
     45e:	93 40       	sbci	r25, 0x03	; 3
     460:	10 f4       	brcc	.+4      	; 0x466 <udi_cdc_tx_send+0xa0>
     462:	df bf       	out	0x3f, r29	; 63
     464:	55 c0       	rjmp	.+170    	; 0x510 <udi_cdc_tx_send+0x14a>
     466:	10 92 a7 20 	sts	0x20A7, r1
     46a:	10 92 a8 20 	sts	0x20A8, r1
     46e:	80 91 80 20 	lds	r24, 0x2080
     472:	81 11       	cpse	r24, r1
     474:	06 c0       	rjmp	.+12     	; 0x482 <udi_cdc_tx_send+0xbc>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	c1 11       	cpse	r28, r1
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	80 93 82 20 	sts	0x2082, r24
     480:	04 c0       	rjmp	.+8      	; 0x48a <udi_cdc_tx_send+0xc4>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	c1 11       	cpse	r28, r1
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	c8 2f       	mov	r28, r24
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 81 20 	sts	0x2081, r24
     490:	df bf       	out	0x3f, r29	; 63
     492:	d0 e0       	ldi	r29, 0x00	; 0
     494:	fe 01       	movw	r30, r28
     496:	ee 0f       	add	r30, r30
     498:	ff 1f       	adc	r31, r31
     49a:	e3 56       	subi	r30, 0x63	; 99
     49c:	ff 4d       	sbci	r31, 0xDF	; 223
     49e:	ff 24       	eor	r15, r15
     4a0:	f3 94       	inc	r15
     4a2:	80 81       	ld	r24, Z
     4a4:	91 81       	ldd	r25, Z+1	; 0x01
     4a6:	80 34       	cpi	r24, 0x40	; 64
     4a8:	91 05       	cpc	r25, r1
     4aa:	09 f4       	brne	.+2      	; 0x4ae <udi_cdc_tx_send+0xe8>
     4ac:	f1 2c       	mov	r15, r1
     4ae:	ff 20       	and	r15, r15
     4b0:	91 f0       	breq	.+36     	; 0x4d6 <udi_cdc_tx_send+0x110>
     4b2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <udd_is_high_speed>
     4b6:	88 23       	and	r24, r24
     4b8:	39 f0       	breq	.+14     	; 0x4c8 <udi_cdc_tx_send+0x102>
     4ba:	0e 94 9b 0a 	call	0x1536	; 0x1536 <udd_get_micro_frame_number>
     4be:	80 93 a1 20 	sts	0x20A1, r24
     4c2:	90 93 a2 20 	sts	0x20A2, r25
     4c6:	0b c0       	rjmp	.+22     	; 0x4de <udi_cdc_tx_send+0x118>
     4c8:	0e 94 94 0a 	call	0x1528	; 0x1528 <udd_get_frame_number>
     4cc:	80 93 a1 20 	sts	0x20A1, r24
     4d0:	90 93 a2 20 	sts	0x20A2, r25
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <udi_cdc_tx_send+0x118>
     4d6:	10 92 a1 20 	sts	0x20A1, r1
     4da:	10 92 a2 20 	sts	0x20A2, r1
     4de:	fe 01       	movw	r30, r28
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	e3 56       	subi	r30, 0x63	; 99
     4e6:	ff 4d       	sbci	r31, 0xDF	; 223
     4e8:	20 81       	ld	r18, Z
     4ea:	31 81       	ldd	r19, Z+1	; 0x01
     4ec:	ae 01       	movw	r20, r28
     4ee:	00 24       	eor	r0, r0
     4f0:	56 95       	lsr	r21
     4f2:	47 95       	ror	r20
     4f4:	07 94       	ror	r0
     4f6:	56 95       	lsr	r21
     4f8:	47 95       	ror	r20
     4fa:	07 94       	ror	r0
     4fc:	54 2f       	mov	r21, r20
     4fe:	40 2d       	mov	r20, r0
     500:	46 55       	subi	r20, 0x56	; 86
     502:	5f 4d       	sbci	r21, 0xDF	; 223
     504:	00 e9       	ldi	r16, 0x90	; 144
     506:	12 e0       	ldi	r17, 0x02	; 2
     508:	6f 2d       	mov	r22, r15
     50a:	81 e8       	ldi	r24, 0x81	; 129
     50c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <udd_ep_run>
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	08 95       	ret

0000051c <udi_cdc_data_sof_notify>:
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	53 cf       	rjmp	.-346    	; 0x3c6 <udi_cdc_tx_send>

00000520 <udi_cdc_data_sent>:
     520:	89 2b       	or	r24, r25
     522:	a9 f4       	brne	.+42     	; 0x54e <udi_cdc_data_sent+0x2e>
     524:	20 91 82 20 	lds	r18, 0x2082
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	22 23       	and	r18, r18
     52e:	11 f0       	breq	.+4      	; 0x534 <udi_cdc_data_sent+0x14>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	fc 01       	movw	r30, r24
     536:	ee 0f       	add	r30, r30
     538:	ff 1f       	adc	r31, r31
     53a:	e3 56       	subi	r30, 0x63	; 99
     53c:	ff 4d       	sbci	r31, 0xDF	; 223
     53e:	10 82       	st	Z, r1
     540:	11 82       	std	Z+1, r1	; 0x01
     542:	10 92 80 20 	sts	0x2080, r1
     546:	10 92 81 20 	sts	0x2081, r1
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	3c cf       	rjmp	.-392    	; 0x3c6 <udi_cdc_tx_send>
     54e:	08 95       	ret

00000550 <udi_cdc_multi_get_nb_received_data>:
     550:	4f b7       	in	r20, 0x3f	; 63
     552:	f8 94       	cli
     554:	80 91 84 20 	lds	r24, 0x2084
     558:	90 91 85 20 	lds	r25, 0x2085
     55c:	e0 91 86 20 	lds	r30, 0x2086
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	ed 55       	subi	r30, 0x5D	; 93
     568:	ff 4d       	sbci	r31, 0xDF	; 223
     56a:	20 81       	ld	r18, Z
     56c:	31 81       	ldd	r19, Z+1	; 0x01
     56e:	28 1b       	sub	r18, r24
     570:	39 0b       	sbc	r19, r25
     572:	4f bf       	out	0x3f, r20	; 63
     574:	82 2f       	mov	r24, r18
     576:	93 2f       	mov	r25, r19
     578:	08 95       	ret

0000057a <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     57a:	ea df       	rcall	.-44     	; 0x550 <udi_cdc_multi_get_nb_received_data>
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	89 2b       	or	r24, r25
     580:	09 f4       	brne	.+2      	; 0x584 <udi_cdc_multi_is_rx_ready+0xa>
     582:	20 e0       	ldi	r18, 0x00	; 0
}
     584:	82 2f       	mov	r24, r18
     586:	08 95       	ret

00000588 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     590:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     592:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     594:	50 91 86 20 	lds	r21, 0x2086
	if (udi_cdc_rx_trans_ongoing[port] ||
     598:	80 91 83 20 	lds	r24, 0x2083
     59c:	81 11       	cpse	r24, r1
     59e:	10 c0       	rjmp	.+32     	; 0x5c0 <udi_cdc_rx_start+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     5a0:	20 91 84 20 	lds	r18, 0x2084
     5a4:	30 91 85 20 	lds	r19, 0x2085
     5a8:	c5 2f       	mov	r28, r21
     5aa:	d0 e0       	ldi	r29, 0x00	; 0
     5ac:	fe 01       	movw	r30, r28
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	ed 55       	subi	r30, 0x5D	; 93
     5b4:	ff 4d       	sbci	r31, 0xDF	; 223
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     5b6:	80 81       	ld	r24, Z
     5b8:	91 81       	ldd	r25, Z+1	; 0x01
     5ba:	28 17       	cp	r18, r24
     5bc:	39 07       	cpc	r19, r25
     5be:	18 f4       	brcc	.+6      	; 0x5c6 <udi_cdc_rx_start+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5c0:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	22 c0       	rjmp	.+68     	; 0x60a <udi_cdc_rx_start+0x82>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     5c6:	10 92 84 20 	sts	0x2084, r1
     5ca:	10 92 85 20 	sts	0x2085, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	51 11       	cpse	r21, r1
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	80 93 86 20 	sts	0x2086, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 83 20 	sts	0x2083, r24
     5de:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	cb df       	rcall	.-106    	; 0x57a <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     5e4:	ae 01       	movw	r20, r28
     5e6:	00 24       	eor	r0, r0
     5e8:	56 95       	lsr	r21
     5ea:	47 95       	ror	r20
     5ec:	07 94       	ror	r0
     5ee:	56 95       	lsr	r21
     5f0:	47 95       	ror	r20
     5f2:	07 94       	ror	r0
     5f4:	54 2f       	mov	r21, r20
     5f6:	40 2d       	mov	r20, r0
     5f8:	46 5d       	subi	r20, 0xD6	; 214
     5fa:	5e 4d       	sbci	r21, 0xDE	; 222
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     5fc:	0a e0       	ldi	r16, 0x0A	; 10
     5fe:	13 e0       	ldi	r17, 0x03	; 3
     600:	20 e4       	ldi	r18, 0x40	; 64
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	eb d7       	rcall	.+4054   	; 0x15e0 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	08 95       	ret

00000614 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	a4 2f       	mov	r26, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     61a:	89 2b       	or	r24, r25
     61c:	41 f5       	brne	.+80     	; 0x66e <udi_cdc_data_received+0x5a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     61e:	80 91 86 20 	lds	r24, 0x2086
     622:	e1 e0       	ldi	r30, 0x01	; 1
     624:	81 11       	cpse	r24, r1
     626:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
     628:	61 15       	cp	r22, r1
     62a:	71 05       	cpc	r23, r1
     62c:	a9 f4       	brne	.+42     	; 0x658 <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	00 24       	eor	r0, r0
     632:	f6 95       	lsr	r31
     634:	e7 95       	ror	r30
     636:	07 94       	ror	r0
     638:	f6 95       	lsr	r31
     63a:	e7 95       	ror	r30
     63c:	07 94       	ror	r0
     63e:	fe 2f       	mov	r31, r30
     640:	e0 2d       	mov	r30, r0
     642:	af 01       	movw	r20, r30
     644:	46 5d       	subi	r20, 0xD6	; 214
     646:	5e 4d       	sbci	r21, 0xDE	; 222
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     648:	0a e0       	ldi	r16, 0x0A	; 10
     64a:	13 e0       	ldi	r17, 0x03	; 3
     64c:	20 e4       	ldi	r18, 0x40	; 64
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	8a 2f       	mov	r24, r26
     654:	c5 d7       	rcall	.+3978   	; 0x15e0 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     656:	0b c0       	rjmp	.+22     	; 0x66e <udi_cdc_data_received+0x5a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	ed 55       	subi	r30, 0x5D	; 93
     660:	ff 4d       	sbci	r31, 0xDF	; 223
     662:	60 83       	st	Z, r22
     664:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
     666:	10 92 83 20 	sts	0x2083, r1
	udi_cdc_rx_start(port);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	8d df       	rcall	.-230    	; 0x588 <udi_cdc_rx_start>
}
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	08 95       	ret

00000674 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     674:	10 92 88 20 	sts	0x2088, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     678:	10 92 81 20 	sts	0x2081, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
     67c:	10 92 80 20 	sts	0x2080, r1
	udi_cdc_tx_buf_sel[port] = 0;
     680:	10 92 82 20 	sts	0x2082, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
     684:	10 92 9d 20 	sts	0x209D, r1
     688:	10 92 9e 20 	sts	0x209E, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
     68c:	10 92 9f 20 	sts	0x209F, r1
     690:	10 92 a0 20 	sts	0x20A0, r1
	udi_cdc_tx_sof_num[port] = 0;
     694:	10 92 a1 20 	sts	0x20A1, r1
     698:	10 92 a2 20 	sts	0x20A2, r1
	udi_cdc_tx_send(port);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	93 de       	rcall	.-730    	; 0x3c6 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     6a0:	10 92 83 20 	sts	0x2083, r1
	udi_cdc_rx_buf_sel[port] = 0;
     6a4:	10 92 86 20 	sts	0x2086, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
     6a8:	10 92 a3 20 	sts	0x20A3, r1
     6ac:	10 92 a4 20 	sts	0x20A4, r1
	udi_cdc_rx_pos[port] = 0;
     6b0:	10 92 84 20 	sts	0x2084, r1
     6b4:	10 92 85 20 	sts	0x2085, r1
	if (!udi_cdc_rx_start(port)) {
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	66 df       	rcall	.-308    	; 0x588 <udi_cdc_rx_start>
     6bc:	88 23       	and	r24, r24
     6be:	61 f0       	breq	.+24     	; 0x6d8 <udi_cdc_data_enable+0x64>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     6c0:	80 91 88 20 	lds	r24, 0x2088
     6c4:	8f 5f       	subi	r24, 0xFF	; 255
     6c6:	80 93 88 20 	sts	0x2088, r24
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     6ca:	80 91 88 20 	lds	r24, 0x2088
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	29 f4       	brne	.+10     	; 0x6dc <udi_cdc_data_enable+0x68>
		udi_cdc_data_running = true;
     6d2:	80 93 87 20 	sts	0x2087, r24
     6d6:	08 95       	ret
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
}
     6de:	08 95       	ret

000006e0 <udc_get_eof_conf>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     6e0:	e0 91 ad 21 	lds	r30, 0x21AD
     6e4:	f0 91 ae 21 	lds	r31, 0x21AE
     6e8:	01 90       	ld	r0, Z+
     6ea:	f0 81       	ld	r31, Z
     6ec:	e0 2d       	mov	r30, r0
     6ee:	22 81       	ldd	r18, Z+2	; 0x02
     6f0:	33 81       	ldd	r19, Z+3	; 0x03
     6f2:	2e 0f       	add	r18, r30
     6f4:	3f 1f       	adc	r19, r31
     6f6:	82 2f       	mov	r24, r18
     6f8:	93 2f       	mov	r25, r19
     6fa:	08 95       	ret

000006fc <udc_next_desc_in_iface>:
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
     704:	16 2f       	mov	r17, r22
     706:	ec df       	rcall	.-40     	; 0x6e0 <udc_get_eof_conf>
     708:	28 81       	ld	r18, Y
     70a:	fe 01       	movw	r30, r28
     70c:	e2 0f       	add	r30, r18
     70e:	f1 1d       	adc	r31, r1
     710:	e8 17       	cp	r30, r24
     712:	f9 07       	cpc	r31, r25
     714:	a0 f4       	brcc	.+40     	; 0x73e <udc_next_desc_in_iface+0x42>
     716:	21 81       	ldd	r18, Z+1	; 0x01
     718:	24 30       	cpi	r18, 0x04	; 4
     71a:	a1 f0       	breq	.+40     	; 0x744 <udc_next_desc_in_iface+0x48>
     71c:	21 13       	cpse	r18, r17
     71e:	06 c0       	rjmp	.+12     	; 0x72c <udc_next_desc_in_iface+0x30>
     720:	16 c0       	rjmp	.+44     	; 0x74e <udc_next_desc_in_iface+0x52>
     722:	21 81       	ldd	r18, Z+1	; 0x01
     724:	24 30       	cpi	r18, 0x04	; 4
     726:	89 f0       	breq	.+34     	; 0x74a <udc_next_desc_in_iface+0x4e>
     728:	21 17       	cp	r18, r17
     72a:	89 f0       	breq	.+34     	; 0x74e <udc_next_desc_in_iface+0x52>
     72c:	20 81       	ld	r18, Z
     72e:	e2 0f       	add	r30, r18
     730:	f1 1d       	adc	r31, r1
     732:	e8 17       	cp	r30, r24
     734:	f9 07       	cpc	r31, r25
     736:	a8 f3       	brcs	.-22     	; 0x722 <udc_next_desc_in_iface+0x26>
     738:	e0 e0       	ldi	r30, 0x00	; 0
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	08 c0       	rjmp	.+16     	; 0x74e <udc_next_desc_in_iface+0x52>
     73e:	e0 e0       	ldi	r30, 0x00	; 0
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	05 c0       	rjmp	.+10     	; 0x74e <udc_next_desc_in_iface+0x52>
     744:	e0 e0       	ldi	r30, 0x00	; 0
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	02 c0       	rjmp	.+4      	; 0x74e <udc_next_desc_in_iface+0x52>
     74a:	e0 e0       	ldi	r30, 0x00	; 0
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	8e 2f       	mov	r24, r30
     750:	9f 2f       	mov	r25, r31
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	08 95       	ret

0000075a <udc_update_iface_desc>:
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	18 2f       	mov	r17, r24
     764:	06 2f       	mov	r16, r22
     766:	80 91 ac 21 	lds	r24, 0x21AC
     76a:	88 23       	and	r24, r24
     76c:	69 f1       	breq	.+90     	; 0x7c8 <udc_update_iface_desc+0x6e>
     76e:	e0 91 ad 21 	lds	r30, 0x21AD
     772:	f0 91 ae 21 	lds	r31, 0x21AE
     776:	c0 81       	ld	r28, Z
     778:	d1 81       	ldd	r29, Z+1	; 0x01
     77a:	8c 81       	ldd	r24, Y+4	; 0x04
     77c:	18 17       	cp	r17, r24
     77e:	30 f5       	brcc	.+76     	; 0x7cc <udc_update_iface_desc+0x72>
     780:	c0 93 aa 21 	sts	0x21AA, r28
     784:	d0 93 ab 21 	sts	0x21AB, r29
     788:	ab df       	rcall	.-170    	; 0x6e0 <udc_get_eof_conf>
     78a:	9c 01       	movw	r18, r24
     78c:	c8 17       	cp	r28, r24
     78e:	d9 07       	cpc	r29, r25
     790:	f8 f4       	brcc	.+62     	; 0x7d0 <udc_update_iface_desc+0x76>
     792:	99 81       	ldd	r25, Y+1	; 0x01
     794:	94 30       	cpi	r25, 0x04	; 4
     796:	61 f4       	brne	.+24     	; 0x7b0 <udc_update_iface_desc+0x56>
     798:	9a 81       	ldd	r25, Y+2	; 0x02
     79a:	91 13       	cpse	r25, r17
     79c:	09 c0       	rjmp	.+18     	; 0x7b0 <udc_update_iface_desc+0x56>
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	80 13       	cpse	r24, r16
     7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <udc_update_iface_desc+0x56>
     7a4:	c0 93 aa 21 	sts	0x21AA, r28
     7a8:	d0 93 ab 21 	sts	0x21AB, r29
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <udc_update_iface_desc+0x78>
     7b0:	98 81       	ld	r25, Y
     7b2:	c9 0f       	add	r28, r25
     7b4:	d1 1d       	adc	r29, r1
     7b6:	c2 17       	cp	r28, r18
     7b8:	d3 07       	cpc	r29, r19
     7ba:	58 f3       	brcs	.-42     	; 0x792 <udc_update_iface_desc+0x38>
     7bc:	c0 93 aa 21 	sts	0x21AA, r28
     7c0:	d0 93 ab 21 	sts	0x21AB, r29
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <udc_update_iface_desc+0x78>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <udc_update_iface_desc+0x78>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <udc_update_iface_desc+0x78>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <udc_valid_address>:
     7dc:	80 91 e8 22 	lds	r24, 0x22E8
     7e0:	8f 77       	andi	r24, 0x7F	; 127
     7e2:	9c c6       	rjmp	.+3384   	; 0x151c <udd_set_address>

000007e4 <udc_iface_enable>:
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	18 2f       	mov	r17, r24
     7ec:	b6 df       	rcall	.-148    	; 0x75a <udc_update_iface_desc>
     7ee:	88 23       	and	r24, r24
     7f0:	41 f1       	breq	.+80     	; 0x842 <udc_iface_enable+0x5e>
     7f2:	c0 91 aa 21 	lds	r28, 0x21AA
     7f6:	d0 91 ab 21 	lds	r29, 0x21AB
     7fa:	65 e0       	ldi	r22, 0x05	; 5
     7fc:	ce 01       	movw	r24, r28
     7fe:	7e df       	rcall	.-260    	; 0x6fc <udc_next_desc_in_iface>
     800:	ec 01       	movw	r28, r24
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	41 f0       	breq	.+16     	; 0x816 <udc_iface_enable+0x32>
     806:	4c 81       	ldd	r20, Y+4	; 0x04
     808:	5d 81       	ldd	r21, Y+5	; 0x05
     80a:	6b 81       	ldd	r22, Y+3	; 0x03
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	9f d6       	rcall	.+3390   	; 0x154e <udd_ep_alloc>
     810:	81 11       	cpse	r24, r1
     812:	f3 cf       	rjmp	.-26     	; 0x7fa <udc_iface_enable+0x16>
     814:	17 c0       	rjmp	.+46     	; 0x844 <udc_iface_enable+0x60>
     816:	a0 91 ad 21 	lds	r26, 0x21AD
     81a:	b0 91 ae 21 	lds	r27, 0x21AE
     81e:	81 2f       	mov	r24, r17
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	12 96       	adiw	r26, 0x02	; 2
     828:	ed 91       	ld	r30, X+
     82a:	fc 91       	ld	r31, X
     82c:	13 97       	sbiw	r26, 0x03	; 3
     82e:	e8 0f       	add	r30, r24
     830:	f9 1f       	adc	r31, r25
     832:	01 90       	ld	r0, Z+
     834:	f0 81       	ld	r31, Z
     836:	e0 2d       	mov	r30, r0
     838:	01 90       	ld	r0, Z+
     83a:	f0 81       	ld	r31, Z
     83c:	e0 2d       	mov	r30, r0
     83e:	09 95       	icall
     840:	01 c0       	rjmp	.+2      	; 0x844 <udc_iface_enable+0x60>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	08 95       	ret

0000084c <udc_iface_disable>:
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	c8 2f       	mov	r28, r24
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	80 df       	rcall	.-256    	; 0x75a <udc_update_iface_desc>
     85a:	88 23       	and	r24, r24
     85c:	81 f1       	breq	.+96     	; 0x8be <udc_iface_disable+0x72>
     85e:	a0 91 ad 21 	lds	r26, 0x21AD
     862:	b0 91 ae 21 	lds	r27, 0x21AE
     866:	ec 2f       	mov	r30, r28
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	ee 0f       	add	r30, r30
     86c:	ff 1f       	adc	r31, r31
     86e:	12 96       	adiw	r26, 0x02	; 2
     870:	2d 91       	ld	r18, X+
     872:	3c 91       	ld	r19, X
     874:	13 97       	sbiw	r26, 0x03	; 3
     876:	e2 0f       	add	r30, r18
     878:	f3 1f       	adc	r31, r19
     87a:	00 81       	ld	r16, Z
     87c:	11 81       	ldd	r17, Z+1	; 0x01
     87e:	d8 01       	movw	r26, r16
     880:	16 96       	adiw	r26, 0x06	; 6
     882:	ed 91       	ld	r30, X+
     884:	fc 91       	ld	r31, X
     886:	17 97       	sbiw	r26, 0x07	; 7
     888:	09 95       	icall
     88a:	68 2f       	mov	r22, r24
     88c:	8c 2f       	mov	r24, r28
     88e:	65 df       	rcall	.-310    	; 0x75a <udc_update_iface_desc>
     890:	88 23       	and	r24, r24
     892:	b9 f0       	breq	.+46     	; 0x8c2 <udc_iface_disable+0x76>
     894:	c0 91 aa 21 	lds	r28, 0x21AA
     898:	d0 91 ab 21 	lds	r29, 0x21AB
     89c:	65 e0       	ldi	r22, 0x05	; 5
     89e:	ce 01       	movw	r24, r28
     8a0:	2d df       	rcall	.-422    	; 0x6fc <udc_next_desc_in_iface>
     8a2:	ec 01       	movw	r28, r24
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	19 f0       	breq	.+6      	; 0x8ae <udc_iface_disable+0x62>
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	48 d7       	rcall	.+3728   	; 0x173c <udd_ep_free>
     8ac:	f7 cf       	rjmp	.-18     	; 0x89c <udc_iface_disable+0x50>
     8ae:	d8 01       	movw	r26, r16
     8b0:	12 96       	adiw	r26, 0x02	; 2
     8b2:	ed 91       	ld	r30, X+
     8b4:	fc 91       	ld	r31, X
     8b6:	13 97       	sbiw	r26, 0x03	; 3
     8b8:	09 95       	icall
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <udc_iface_disable+0x78>
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <udc_iface_disable+0x78>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	08 95       	ret

000008ce <udc_reset>:
     8ce:	cf 93       	push	r28
     8d0:	80 91 ac 21 	lds	r24, 0x21AC
     8d4:	88 23       	and	r24, r24
     8d6:	c1 f0       	breq	.+48     	; 0x908 <udc_reset+0x3a>
     8d8:	e0 91 ad 21 	lds	r30, 0x21AD
     8dc:	f0 91 ae 21 	lds	r31, 0x21AE
     8e0:	01 90       	ld	r0, Z+
     8e2:	f0 81       	ld	r31, Z
     8e4:	e0 2d       	mov	r30, r0
     8e6:	84 81       	ldd	r24, Z+4	; 0x04
     8e8:	88 23       	and	r24, r24
     8ea:	71 f0       	breq	.+28     	; 0x908 <udc_reset+0x3a>
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
     8ee:	8c 2f       	mov	r24, r28
     8f0:	ad df       	rcall	.-166    	; 0x84c <udc_iface_disable>
     8f2:	cf 5f       	subi	r28, 0xFF	; 255
     8f4:	e0 91 ad 21 	lds	r30, 0x21AD
     8f8:	f0 91 ae 21 	lds	r31, 0x21AE
     8fc:	01 90       	ld	r0, Z+
     8fe:	f0 81       	ld	r31, Z
     900:	e0 2d       	mov	r30, r0
     902:	84 81       	ldd	r24, Z+4	; 0x04
     904:	c8 17       	cp	r28, r24
     906:	98 f3       	brcs	.-26     	; 0x8ee <udc_reset+0x20>
     908:	10 92 ac 21 	sts	0x21AC, r1
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	80 93 af 21 	sts	0x21AF, r24
     914:	90 93 b0 21 	sts	0x21B0, r25
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     91c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     91e:	80 91 ac 21 	lds	r24, 0x21AC
     922:	88 23       	and	r24, r24
     924:	41 f1       	breq	.+80     	; 0x976 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     926:	e0 91 ad 21 	lds	r30, 0x21AD
     92a:	f0 91 ae 21 	lds	r31, 0x21AE
     92e:	a0 81       	ld	r26, Z
     930:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     932:	14 96       	adiw	r26, 0x04	; 4
     934:	8c 91       	ld	r24, X
     936:	88 23       	and	r24, r24
     938:	f1 f0       	breq	.+60     	; 0x976 <udc_sof_notify+0x5a>
     93a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     93c:	8c 2f       	mov	r24, r28
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	02 80       	ldd	r0, Z+2	; 0x02
     946:	f3 81       	ldd	r31, Z+3	; 0x03
     948:	e0 2d       	mov	r30, r0
     94a:	e8 0f       	add	r30, r24
     94c:	f9 1f       	adc	r31, r25
     94e:	01 90       	ld	r0, Z+
     950:	f0 81       	ld	r31, Z
     952:	e0 2d       	mov	r30, r0
     954:	00 84       	ldd	r0, Z+8	; 0x08
     956:	f1 85       	ldd	r31, Z+9	; 0x09
     958:	e0 2d       	mov	r30, r0
     95a:	30 97       	sbiw	r30, 0x00	; 0
     95c:	09 f0       	breq	.+2      	; 0x960 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     95e:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     960:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     962:	e0 91 ad 21 	lds	r30, 0x21AD
     966:	f0 91 ae 21 	lds	r31, 0x21AE
     96a:	a0 81       	ld	r26, Z
     96c:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     96e:	14 96       	adiw	r26, 0x04	; 4
     970:	8c 91       	ld	r24, X
     972:	c8 17       	cp	r28, r24
     974:	18 f3       	brcs	.-58     	; 0x93c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     984:	10 92 f0 22 	sts	0x22F0, r1
     988:	10 92 f1 22 	sts	0x22F1, r1
	udd_g_ctrlreq.callback = NULL;
     98c:	10 92 f2 22 	sts	0x22F2, r1
     990:	10 92 f3 22 	sts	0x22F3, r1
	udd_g_ctrlreq.over_under_run = NULL;
     994:	10 92 f4 22 	sts	0x22F4, r1
     998:	10 92 f5 22 	sts	0x22F5, r1

	if (Udd_setup_is_in()) {
     99c:	20 91 e6 22 	lds	r18, 0x22E6
     9a0:	22 23       	and	r18, r18
     9a2:	0c f0       	brlt	.+2      	; 0x9a6 <udc_process_setup+0x2c>
     9a4:	4d c2       	rjmp	.+1178   	; 0xe40 <udc_process_setup+0x4c6>
		if (udd_g_ctrlreq.req.wLength == 0) {
     9a6:	80 91 ec 22 	lds	r24, 0x22EC
     9aa:	90 91 ed 22 	lds	r25, 0x22ED
     9ae:	00 97       	sbiw	r24, 0x00	; 0
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <udc_process_setup+0x3a>
     9b2:	4b c2       	rjmp	.+1174   	; 0xe4a <udc_process_setup+0x4d0>
     9b4:	3d c2       	rjmp	.+1146   	; 0xe30 <udc_process_setup+0x4b6>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     9b6:	2f 71       	andi	r18, 0x1F	; 31
     9b8:	09 f0       	breq	.+2      	; 0x9bc <udc_process_setup+0x42>
     9ba:	77 c0       	rjmp	.+238    	; 0xaaa <udc_process_setup+0x130>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     9bc:	30 91 e7 22 	lds	r19, 0x22E7
     9c0:	36 30       	cpi	r19, 0x06	; 6
     9c2:	81 f0       	breq	.+32     	; 0x9e4 <udc_process_setup+0x6a>
     9c4:	38 30       	cpi	r19, 0x08	; 8
     9c6:	09 f4       	brne	.+2      	; 0x9ca <udc_process_setup+0x50>
     9c8:	65 c0       	rjmp	.+202    	; 0xa94 <udc_process_setup+0x11a>
     9ca:	31 11       	cpse	r19, r1
     9cc:	6e c0       	rjmp	.+220    	; 0xaaa <udc_process_setup+0x130>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     9ce:	02 97       	sbiw	r24, 0x02	; 2
     9d0:	39 f4       	brne	.+14     	; 0x9e0 <udc_process_setup+0x66>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     9d2:	62 e0       	ldi	r22, 0x02	; 2
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	8f ea       	ldi	r24, 0xAF	; 175
     9d8:	91 e2       	ldi	r25, 0x21	; 33
     9da:	b0 d5       	rcall	.+2912   	; 0x153c <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	b1 c1       	rjmp	.+866    	; 0xd42 <udc_process_setup+0x3c8>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	af c1       	rjmp	.+862    	; 0xd42 <udc_process_setup+0x3c8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     9e4:	20 91 e8 22 	lds	r18, 0x22E8
     9e8:	30 91 e9 22 	lds	r19, 0x22E9
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     9ec:	83 2f       	mov	r24, r19
     9ee:	99 27       	eor	r25, r25
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	91 05       	cpc	r25, r1
     9f4:	79 f0       	breq	.+30     	; 0xa14 <udc_process_setup+0x9a>
     9f6:	83 30       	cpi	r24, 0x03	; 3
     9f8:	91 05       	cpc	r25, r1
     9fa:	61 f1       	breq	.+88     	; 0xa54 <udc_process_setup+0xda>
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <udc_process_setup+0x88>
     a00:	41 c0       	rjmp	.+130    	; 0xa84 <udc_process_setup+0x10a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     a02:	80 91 1a 20 	lds	r24, 0x201A
     a06:	90 91 1b 20 	lds	r25, 0x201B
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     a0a:	dc 01       	movw	r26, r24
     a0c:	6c 91       	ld	r22, X
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	95 d5       	rcall	.+2858   	; 0x153c <udd_set_setup_payload>
     a12:	27 c0       	rjmp	.+78     	; 0xa62 <udc_process_setup+0xe8>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     a14:	e0 91 1a 20 	lds	r30, 0x201A
     a18:	f0 91 1b 20 	lds	r31, 0x201B
     a1c:	81 89       	ldd	r24, Z+17	; 0x11
     a1e:	28 17       	cp	r18, r24
     a20:	98 f5       	brcc	.+102    	; 0xa88 <udc_process_setup+0x10e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     a22:	c9 01       	movw	r24, r18
     a24:	99 27       	eor	r25, r25
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	e0 91 1c 20 	lds	r30, 0x201C
     a32:	f0 91 1d 20 	lds	r31, 0x201D
     a36:	e8 0f       	add	r30, r24
     a38:	f9 1f       	adc	r31, r25
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     a3e:	fc 01       	movw	r30, r24
     a40:	62 81       	ldd	r22, Z+2	; 0x02
     a42:	73 81       	ldd	r23, Z+3	; 0x03
     a44:	7b d5       	rcall	.+2806   	; 0x153c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     a46:	e0 91 ee 22 	lds	r30, 0x22EE
     a4a:	f0 91 ef 22 	lds	r31, 0x22EF
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	81 83       	std	Z+1, r24	; 0x01
     a52:	07 c0       	rjmp	.+14     	; 0xa62 <udc_process_setup+0xe8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     a54:	21 11       	cpse	r18, r1
     a56:	1a c0       	rjmp	.+52     	; 0xa8c <udc_process_setup+0x112>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     a58:	64 e0       	ldi	r22, 0x04	; 4
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	8c e7       	ldi	r24, 0x7C	; 124
     a5e:	90 e2       	ldi	r25, 0x20	; 32
     a60:	6d d5       	rcall	.+2778   	; 0x153c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     a62:	80 91 ec 22 	lds	r24, 0x22EC
     a66:	90 91 ed 22 	lds	r25, 0x22ED
     a6a:	20 91 f0 22 	lds	r18, 0x22F0
     a6e:	30 91 f1 22 	lds	r19, 0x22F1
     a72:	82 17       	cp	r24, r18
     a74:	93 07       	cpc	r25, r19
     a76:	60 f4       	brcc	.+24     	; 0xa90 <udc_process_setup+0x116>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     a78:	80 93 f0 22 	sts	0x22F0, r24
     a7c:	90 93 f1 22 	sts	0x22F1, r25
	}
	return true;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	5f c1       	rjmp	.+702    	; 0xd42 <udc_process_setup+0x3c8>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	5d c1       	rjmp	.+698    	; 0xd42 <udc_process_setup+0x3c8>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	5b c1       	rjmp	.+694    	; 0xd42 <udc_process_setup+0x3c8>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	59 c1       	rjmp	.+690    	; 0xd42 <udc_process_setup+0x3c8>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	57 c1       	rjmp	.+686    	; 0xd42 <udc_process_setup+0x3c8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	39 f4       	brne	.+14     	; 0xaa6 <udc_process_setup+0x12c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	8c ea       	ldi	r24, 0xAC	; 172
     a9e:	91 e2       	ldi	r25, 0x21	; 33
     aa0:	4d d5       	rcall	.+2714   	; 0x153c <udd_set_setup_payload>
	return true;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	4e c1       	rjmp	.+668    	; 0xd42 <udc_process_setup+0x3c8>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	4c c1       	rjmp	.+664    	; 0xd42 <udc_process_setup+0x3c8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     aaa:	21 30       	cpi	r18, 0x01	; 1
     aac:	09 f0       	breq	.+2      	; 0xab0 <udc_process_setup+0x136>
     aae:	40 c0       	rjmp	.+128    	; 0xb30 <udc_process_setup+0x1b6>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     ab0:	30 91 e7 22 	lds	r19, 0x22E7
     ab4:	3a 30       	cpi	r19, 0x0A	; 10
     ab6:	e1 f5       	brne	.+120    	; 0xb30 <udc_process_setup+0x1b6>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	91 f5       	brne	.+100    	; 0xb20 <udc_process_setup+0x1a6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     abc:	80 91 ac 21 	lds	r24, 0x21AC
     ac0:	88 23       	and	r24, r24
     ac2:	81 f1       	breq	.+96     	; 0xb24 <udc_process_setup+0x1aa>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     ac4:	c0 91 ea 22 	lds	r28, 0x22EA
     ac8:	d0 91 eb 22 	lds	r29, 0x22EB
     acc:	8c 2f       	mov	r24, r28
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     ace:	00 91 ad 21 	lds	r16, 0x21AD
     ad2:	10 91 ae 21 	lds	r17, 0x21AE
     ad6:	d8 01       	movw	r26, r16
     ad8:	ed 91       	ld	r30, X+
     ada:	fc 91       	ld	r31, X
     adc:	94 81       	ldd	r25, Z+4	; 0x04
     ade:	c9 17       	cp	r28, r25
     ae0:	18 f5       	brcc	.+70     	; 0xb28 <udc_process_setup+0x1ae>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	3a de       	rcall	.-908    	; 0x75a <udc_update_iface_desc>
     ae6:	88 23       	and	r24, r24
     ae8:	09 f1       	breq	.+66     	; 0xb2c <udc_process_setup+0x1b2>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     aea:	ce 01       	movw	r24, r28
     aec:	99 27       	eor	r25, r25
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	d8 01       	movw	r26, r16
     af4:	12 96       	adiw	r26, 0x02	; 2
     af6:	ed 91       	ld	r30, X+
     af8:	fc 91       	ld	r31, X
     afa:	13 97       	sbiw	r26, 0x03	; 3
     afc:	e8 0f       	add	r30, r24
     afe:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     b00:	01 90       	ld	r0, Z+
     b02:	f0 81       	ld	r31, Z
     b04:	e0 2d       	mov	r30, r0
     b06:	86 81       	ldd	r24, Z+6	; 0x06
     b08:	97 81       	ldd	r25, Z+7	; 0x07
     b0a:	fc 01       	movw	r30, r24
     b0c:	09 95       	icall
     b0e:	80 93 b1 21 	sts	0x21B1, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	81 eb       	ldi	r24, 0xB1	; 177
     b18:	91 e2       	ldi	r25, 0x21	; 33
     b1a:	10 d5       	rcall	.+2592   	; 0x153c <udd_set_setup_payload>
	return true;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	11 c1       	rjmp	.+546    	; 0xd42 <udc_process_setup+0x3c8>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0f c1       	rjmp	.+542    	; 0xd42 <udc_process_setup+0x3c8>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0d c1       	rjmp	.+538    	; 0xd42 <udc_process_setup+0x3c8>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0b c1       	rjmp	.+534    	; 0xd42 <udc_process_setup+0x3c8>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	09 c1       	rjmp	.+530    	; 0xd42 <udc_process_setup+0x3c8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     b30:	22 30       	cpi	r18, 0x02	; 2
     b32:	09 f0       	breq	.+2      	; 0xb36 <udc_process_setup+0x1bc>
     b34:	08 c1       	rjmp	.+528    	; 0xd46 <udc_process_setup+0x3cc>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     b36:	20 91 e7 22 	lds	r18, 0x22E7
     b3a:	21 11       	cpse	r18, r1
     b3c:	fd c0       	rjmp	.+506    	; 0xd38 <udc_process_setup+0x3be>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     b3e:	02 97       	sbiw	r24, 0x02	; 2
     b40:	71 f4       	brne	.+28     	; 0xb5e <udc_process_setup+0x1e4>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     b42:	80 91 ea 22 	lds	r24, 0x22EA
     b46:	2c d5       	rcall	.+2648   	; 0x15a0 <udd_ep_is_halted>
     b48:	80 93 b2 21 	sts	0x21B2, r24
     b4c:	10 92 b3 21 	sts	0x21B3, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	82 eb       	ldi	r24, 0xB2	; 178
     b56:	91 e2       	ldi	r25, 0x21	; 33
     b58:	f1 d4       	rcall	.+2530   	; 0x153c <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	f2 c0       	rjmp	.+484    	; 0xd42 <udc_process_setup+0x3c8>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	f0 c0       	rjmp	.+480    	; 0xd42 <udc_process_setup+0x3c8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b62:	2f 71       	andi	r18, 0x1F	; 31
     b64:	09 f0       	breq	.+2      	; 0xb68 <udc_process_setup+0x1ee>
     b66:	92 c0       	rjmp	.+292    	; 0xc8c <udc_process_setup+0x312>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b68:	80 91 e7 22 	lds	r24, 0x22E7
     b6c:	83 30       	cpi	r24, 0x03	; 3
     b6e:	09 f4       	brne	.+2      	; 0xb72 <udc_process_setup+0x1f8>
     b70:	e5 c0       	rjmp	.+458    	; 0xd3c <udc_process_setup+0x3c2>
     b72:	20 f4       	brcc	.+8      	; 0xb7c <udc_process_setup+0x202>
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	09 f0       	breq	.+2      	; 0xb7a <udc_process_setup+0x200>
     b78:	89 c0       	rjmp	.+274    	; 0xc8c <udc_process_setup+0x312>
     b7a:	16 c0       	rjmp	.+44     	; 0xba8 <udc_process_setup+0x22e>
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	21 f0       	breq	.+8      	; 0xb88 <udc_process_setup+0x20e>
     b80:	89 30       	cpi	r24, 0x09	; 9
     b82:	09 f0       	breq	.+2      	; 0xb86 <udc_process_setup+0x20c>
     b84:	83 c0       	rjmp	.+262    	; 0xc8c <udc_process_setup+0x312>
     b86:	2b c0       	rjmp	.+86     	; 0xbde <udc_process_setup+0x264>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b88:	80 91 ec 22 	lds	r24, 0x22EC
     b8c:	90 91 ed 22 	lds	r25, 0x22ED
     b90:	89 2b       	or	r24, r25
     b92:	41 f4       	brne	.+16     	; 0xba4 <udc_process_setup+0x22a>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     b94:	8e ee       	ldi	r24, 0xEE	; 238
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	80 93 f2 22 	sts	0x22F2, r24
     b9c:	90 93 f3 22 	sts	0x22F3, r25
	return true;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	cf c0       	rjmp	.+414    	; 0xd42 <udc_process_setup+0x3c8>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	cd c0       	rjmp	.+410    	; 0xd42 <udc_process_setup+0x3c8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ba8:	80 91 ec 22 	lds	r24, 0x22EC
     bac:	90 91 ed 22 	lds	r25, 0x22ED
     bb0:	89 2b       	or	r24, r25
     bb2:	89 f4       	brne	.+34     	; 0xbd6 <udc_process_setup+0x25c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     bb4:	80 91 e8 22 	lds	r24, 0x22E8
     bb8:	90 91 e9 22 	lds	r25, 0x22E9
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	69 f4       	brne	.+26     	; 0xbda <udc_process_setup+0x260>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     bc0:	80 91 af 21 	lds	r24, 0x21AF
     bc4:	90 91 b0 21 	lds	r25, 0x21B0
     bc8:	8d 7f       	andi	r24, 0xFD	; 253
     bca:	80 93 af 21 	sts	0x21AF, r24
     bce:	90 93 b0 21 	sts	0x21B0, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	b6 c0       	rjmp	.+364    	; 0xd42 <udc_process_setup+0x3c8>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	b4 c0       	rjmp	.+360    	; 0xd42 <udc_process_setup+0x3c8>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	b2 c0       	rjmp	.+356    	; 0xd42 <udc_process_setup+0x3c8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     bde:	80 91 ec 22 	lds	r24, 0x22EC
     be2:	90 91 ed 22 	lds	r25, 0x22ED
     be6:	89 2b       	or	r24, r25
     be8:	09 f0       	breq	.+2      	; 0xbec <udc_process_setup+0x272>
     bea:	44 c0       	rjmp	.+136    	; 0xc74 <udc_process_setup+0x2fa>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     bec:	9a d4       	rcall	.+2356   	; 0x1522 <udd_getaddress>
     bee:	88 23       	and	r24, r24
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <udc_process_setup+0x27a>
     bf2:	42 c0       	rjmp	.+132    	; 0xc78 <udc_process_setup+0x2fe>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bf4:	20 91 e8 22 	lds	r18, 0x22E8
     bf8:	30 91 e9 22 	lds	r19, 0x22E9
     bfc:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     bfe:	e0 91 1a 20 	lds	r30, 0x201A
     c02:	f0 91 1b 20 	lds	r31, 0x201B
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     c06:	81 89       	ldd	r24, Z+17	; 0x11
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	82 17       	cp	r24, r18
     c0c:	93 07       	cpc	r25, r19
     c0e:	b0 f1       	brcs	.+108    	; 0xc7c <udc_process_setup+0x302>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     c10:	5e de       	rcall	.-836    	; 0x8ce <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     c12:	80 91 e8 22 	lds	r24, 0x22E8
     c16:	90 91 e9 22 	lds	r25, 0x22E9
     c1a:	80 93 ac 21 	sts	0x21AC, r24
	if (udc_num_configuration == 0) {
     c1e:	88 23       	and	r24, r24
     c20:	79 f1       	breq	.+94     	; 0xc80 <udc_process_setup+0x306>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     c22:	99 27       	eor	r25, r25
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	e0 91 1c 20 	lds	r30, 0x201C
     c32:	f0 91 1d 20 	lds	r31, 0x201D
     c36:	e8 0f       	add	r30, r24
     c38:	f9 1f       	adc	r31, r25
     c3a:	e0 93 ad 21 	sts	0x21AD, r30
     c3e:	f0 93 ae 21 	sts	0x21AE, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c42:	01 90       	ld	r0, Z+
     c44:	f0 81       	ld	r31, Z
     c46:	e0 2d       	mov	r30, r0
     c48:	84 81       	ldd	r24, Z+4	; 0x04
     c4a:	88 23       	and	r24, r24
     c4c:	d9 f0       	breq	.+54     	; 0xc84 <udc_process_setup+0x30a>
     c4e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	8c 2f       	mov	r24, r28
     c54:	c7 dd       	rcall	.-1138   	; 0x7e4 <udc_iface_enable>
     c56:	88 23       	and	r24, r24
     c58:	b9 f0       	breq	.+46     	; 0xc88 <udc_process_setup+0x30e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     c5a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c5c:	e0 91 ad 21 	lds	r30, 0x21AD
     c60:	f0 91 ae 21 	lds	r31, 0x21AE
     c64:	01 90       	ld	r0, Z+
     c66:	f0 81       	ld	r31, Z
     c68:	e0 2d       	mov	r30, r0
     c6a:	84 81       	ldd	r24, Z+4	; 0x04
     c6c:	c8 17       	cp	r28, r24
     c6e:	80 f3       	brcs	.-32     	; 0xc50 <udc_process_setup+0x2d6>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	67 c0       	rjmp	.+206    	; 0xd42 <udc_process_setup+0x3c8>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	65 c0       	rjmp	.+202    	; 0xd42 <udc_process_setup+0x3c8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	63 c0       	rjmp	.+198    	; 0xd42 <udc_process_setup+0x3c8>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	61 c0       	rjmp	.+194    	; 0xd42 <udc_process_setup+0x3c8>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	5f c0       	rjmp	.+190    	; 0xd42 <udc_process_setup+0x3c8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	5d c0       	rjmp	.+186    	; 0xd42 <udc_process_setup+0x3c8>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	5b c0       	rjmp	.+182    	; 0xd42 <udc_process_setup+0x3c8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c8c:	21 30       	cpi	r18, 0x01	; 1
     c8e:	01 f5       	brne	.+64     	; 0xcd0 <udc_process_setup+0x356>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c90:	80 91 e7 22 	lds	r24, 0x22E7
     c94:	8b 30       	cpi	r24, 0x0B	; 11
     c96:	e1 f4       	brne	.+56     	; 0xcd0 <udc_process_setup+0x356>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     c98:	80 91 ec 22 	lds	r24, 0x22EC
     c9c:	90 91 ed 22 	lds	r25, 0x22ED
     ca0:	89 2b       	or	r24, r25
     ca2:	81 f4       	brne	.+32     	; 0xcc4 <udc_process_setup+0x34a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     ca4:	80 91 ac 21 	lds	r24, 0x21AC
     ca8:	88 23       	and	r24, r24
     caa:	71 f0       	breq	.+28     	; 0xcc8 <udc_process_setup+0x34e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     cac:	c0 91 ea 22 	lds	r28, 0x22EA
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     cb0:	d0 91 e8 22 	lds	r29, 0x22E8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     cb4:	8c 2f       	mov	r24, r28
     cb6:	ca dd       	rcall	.-1132   	; 0x84c <udc_iface_disable>
     cb8:	88 23       	and	r24, r24
     cba:	41 f0       	breq	.+16     	; 0xccc <udc_process_setup+0x352>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     cbc:	6d 2f       	mov	r22, r29
     cbe:	8c 2f       	mov	r24, r28
     cc0:	91 dd       	rcall	.-1246   	; 0x7e4 <udc_iface_enable>
     cc2:	3f c0       	rjmp	.+126    	; 0xd42 <udc_process_setup+0x3c8>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	3d c0       	rjmp	.+122    	; 0xd42 <udc_process_setup+0x3c8>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	3b c0       	rjmp	.+118    	; 0xd42 <udc_process_setup+0x3c8>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	39 c0       	rjmp	.+114    	; 0xd42 <udc_process_setup+0x3c8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	c9 f5       	brne	.+114    	; 0xd46 <udc_process_setup+0x3cc>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     cd4:	80 91 e7 22 	lds	r24, 0x22E7
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	19 f0       	breq	.+6      	; 0xce2 <udc_process_setup+0x368>
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	81 f5       	brne	.+96     	; 0xd40 <udc_process_setup+0x3c6>
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <udc_process_setup+0x390>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ce2:	80 91 ec 22 	lds	r24, 0x22EC
     ce6:	90 91 ed 22 	lds	r25, 0x22ED
     cea:	89 2b       	or	r24, r25
     cec:	51 f4       	brne	.+20     	; 0xd02 <udc_process_setup+0x388>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cee:	80 91 e8 22 	lds	r24, 0x22E8
     cf2:	90 91 e9 22 	lds	r25, 0x22E9
     cf6:	89 2b       	or	r24, r25
     cf8:	31 f4       	brne	.+12     	; 0xd06 <udc_process_setup+0x38c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     cfa:	80 91 ea 22 	lds	r24, 0x22EA
     cfe:	57 d4       	rcall	.+2222   	; 0x15ae <udd_ep_clear_halt>
     d00:	20 c0       	rjmp	.+64     	; 0xd42 <udc_process_setup+0x3c8>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	1e c0       	rjmp	.+60     	; 0xd42 <udc_process_setup+0x3c8>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	1c c0       	rjmp	.+56     	; 0xd42 <udc_process_setup+0x3c8>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d0a:	80 91 ec 22 	lds	r24, 0x22EC
     d0e:	90 91 ed 22 	lds	r25, 0x22ED
     d12:	89 2b       	or	r24, r25
     d14:	69 f4       	brne	.+26     	; 0xd30 <udc_process_setup+0x3b6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     d16:	80 91 e8 22 	lds	r24, 0x22E8
     d1a:	90 91 e9 22 	lds	r25, 0x22E9
     d1e:	89 2b       	or	r24, r25
     d20:	49 f4       	brne	.+18     	; 0xd34 <udc_process_setup+0x3ba>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     d22:	ca ee       	ldi	r28, 0xEA	; 234
     d24:	d2 e2       	ldi	r29, 0x22	; 34
     d26:	88 81       	ld	r24, Y
     d28:	d1 d4       	rcall	.+2466   	; 0x16cc <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     d2a:	88 81       	ld	r24, Y
     d2c:	f7 d4       	rcall	.+2542   	; 0x171c <udd_ep_set_halt>
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <udc_process_setup+0x3c8>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <udc_process_setup+0x3c8>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <udc_process_setup+0x3c8>
				break;
			}
		}
#endif
	}
	return false;
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <udc_process_setup+0x3c8>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <udc_process_setup+0x3c8>
				break;
			}
		}
#endif
	}
	return false;
     d40:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     d42:	81 11       	cpse	r24, r1
     d44:	77 c0       	rjmp	.+238    	; 0xe34 <udc_process_setup+0x4ba>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     d46:	80 91 e6 22 	lds	r24, 0x22E6
     d4a:	8f 71       	andi	r24, 0x1F	; 31
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	71 f5       	brne	.+92     	; 0xdac <udc_process_setup+0x432>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d50:	80 91 ac 21 	lds	r24, 0x21AC
     d54:	88 23       	and	r24, r24
     d56:	51 f1       	breq	.+84     	; 0xdac <udc_process_setup+0x432>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d58:	00 91 ea 22 	lds	r16, 0x22EA
     d5c:	10 91 eb 22 	lds	r17, 0x22EB
     d60:	f0 2e       	mov	r15, r16
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d62:	c0 91 ad 21 	lds	r28, 0x21AD
     d66:	d0 91 ae 21 	lds	r29, 0x21AE
     d6a:	e8 81       	ld	r30, Y
     d6c:	f9 81       	ldd	r31, Y+1	; 0x01
     d6e:	84 81       	ldd	r24, Z+4	; 0x04
     d70:	08 17       	cp	r16, r24
     d72:	e0 f4       	brcc	.+56     	; 0xdac <udc_process_setup+0x432>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	80 2f       	mov	r24, r16
     d78:	f0 dc       	rcall	.-1568   	; 0x75a <udc_update_iface_desc>
     d7a:	88 23       	and	r24, r24
     d7c:	b9 f0       	breq	.+46     	; 0xdac <udc_process_setup+0x432>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d7e:	11 27       	eor	r17, r17
     d80:	98 01       	movw	r18, r16
     d82:	22 0f       	add	r18, r18
     d84:	33 1f       	adc	r19, r19
     d86:	ea 81       	ldd	r30, Y+2	; 0x02
     d88:	fb 81       	ldd	r31, Y+3	; 0x03
     d8a:	e2 0f       	add	r30, r18
     d8c:	f3 1f       	adc	r31, r19
     d8e:	c0 81       	ld	r28, Z
     d90:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     d92:	ee 81       	ldd	r30, Y+6	; 0x06
     d94:	ff 81       	ldd	r31, Y+7	; 0x07
     d96:	09 95       	icall
     d98:	68 2f       	mov	r22, r24
     d9a:	8f 2d       	mov	r24, r15
     d9c:	de dc       	rcall	.-1604   	; 0x75a <udc_update_iface_desc>
     d9e:	88 23       	and	r24, r24
     da0:	29 f0       	breq	.+10     	; 0xdac <udc_process_setup+0x432>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     da2:	ec 81       	ldd	r30, Y+4	; 0x04
     da4:	fd 81       	ldd	r31, Y+5	; 0x05
     da6:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     da8:	81 11       	cpse	r24, r1
     daa:	46 c0       	rjmp	.+140    	; 0xe38 <udc_process_setup+0x4be>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     dac:	80 91 e6 22 	lds	r24, 0x22E6
     db0:	8f 71       	andi	r24, 0x1F	; 31
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	09 f0       	breq	.+2      	; 0xdb8 <udc_process_setup+0x43e>
     db6:	42 c0       	rjmp	.+132    	; 0xe3c <udc_process_setup+0x4c2>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     db8:	80 91 ac 21 	lds	r24, 0x21AC
     dbc:	88 23       	and	r24, r24
     dbe:	81 f1       	breq	.+96     	; 0xe20 <udc_process_setup+0x4a6>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dc0:	e0 91 ad 21 	lds	r30, 0x21AD
     dc4:	f0 91 ae 21 	lds	r31, 0x21AE
     dc8:	a0 81       	ld	r26, Z
     dca:	b1 81       	ldd	r27, Z+1	; 0x01
     dcc:	14 96       	adiw	r26, 0x04	; 4
     dce:	8c 91       	ld	r24, X
     dd0:	88 23       	and	r24, r24
     dd2:	41 f1       	breq	.+80     	; 0xe24 <udc_process_setup+0x4aa>
     dd4:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     dd6:	21 2f       	mov	r18, r17
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	02 80       	ldd	r0, Z+2	; 0x02
     de0:	f3 81       	ldd	r31, Z+3	; 0x03
     de2:	e0 2d       	mov	r30, r0
     de4:	e2 0f       	add	r30, r18
     de6:	f3 1f       	adc	r31, r19
     de8:	c0 81       	ld	r28, Z
     dea:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     dec:	ee 81       	ldd	r30, Y+6	; 0x06
     dee:	ff 81       	ldd	r31, Y+7	; 0x07
     df0:	09 95       	icall
     df2:	68 2f       	mov	r22, r24
     df4:	81 2f       	mov	r24, r17
     df6:	b1 dc       	rcall	.-1694   	; 0x75a <udc_update_iface_desc>
     df8:	88 23       	and	r24, r24
     dfa:	b1 f0       	breq	.+44     	; 0xe28 <udc_process_setup+0x4ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     dfc:	ec 81       	ldd	r30, Y+4	; 0x04
     dfe:	fd 81       	ldd	r31, Y+5	; 0x05
     e00:	09 95       	icall
     e02:	81 11       	cpse	r24, r1
     e04:	13 c0       	rjmp	.+38     	; 0xe2c <udc_process_setup+0x4b2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     e06:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e08:	e0 91 ad 21 	lds	r30, 0x21AD
     e0c:	f0 91 ae 21 	lds	r31, 0x21AE
     e10:	a0 81       	ld	r26, Z
     e12:	b1 81       	ldd	r27, Z+1	; 0x01
     e14:	14 96       	adiw	r26, 0x04	; 4
     e16:	8c 91       	ld	r24, X
     e18:	18 17       	cp	r17, r24
     e1a:	e8 f2       	brcs	.-70     	; 0xdd6 <udc_process_setup+0x45c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	1a c0       	rjmp	.+52     	; 0xe54 <udc_process_setup+0x4da>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	18 c0       	rjmp	.+48     	; 0xe54 <udc_process_setup+0x4da>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	16 c0       	rjmp	.+44     	; 0xe54 <udc_process_setup+0x4da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <udc_process_setup+0x4da>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	12 c0       	rjmp	.+36     	; 0xe54 <udc_process_setup+0x4da>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	10 c0       	rjmp	.+32     	; 0xe54 <udc_process_setup+0x4da>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e c0       	rjmp	.+28     	; 0xe54 <udc_process_setup+0x4da>
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0c c0       	rjmp	.+24     	; 0xe54 <udc_process_setup+0x4da>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <udc_process_setup+0x4da>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     e40:	82 2f       	mov	r24, r18
     e42:	80 76       	andi	r24, 0x60	; 96
     e44:	09 f0       	breq	.+2      	; 0xe48 <udc_process_setup+0x4ce>
     e46:	7f cf       	rjmp	.-258    	; 0xd46 <udc_process_setup+0x3cc>
     e48:	8c ce       	rjmp	.-744    	; 0xb62 <udc_process_setup+0x1e8>
     e4a:	32 2f       	mov	r19, r18
     e4c:	30 76       	andi	r19, 0x60	; 96
     e4e:	09 f0       	breq	.+2      	; 0xe52 <udc_process_setup+0x4d8>
     e50:	7a cf       	rjmp	.-268    	; 0xd46 <udc_process_setup+0x3cc>
     e52:	b1 cd       	rjmp	.-1182   	; 0x9b6 <udc_process_setup+0x3c>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	08 95       	ret

00000e60 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     e60:	43 e0       	ldi	r20, 0x03	; 3
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	96 e0       	ldi	r25, 0x06	; 6
     e6a:	e8 d9       	rcall	.-3120   	; 0x23c <ioport_configure_port_pin>
     e6c:	43 e0       	ldi	r20, 0x03	; 3
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	62 e0       	ldi	r22, 0x02	; 2
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	96 e0       	ldi	r25, 0x06	; 6
     e76:	e2 d9       	rcall	.-3132   	; 0x23c <ioport_configure_port_pin>
     e78:	43 e0       	ldi	r20, 0x03	; 3
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	64 e0       	ldi	r22, 0x04	; 4
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	96 e0       	ldi	r25, 0x06	; 6
     e82:	dc d9       	rcall	.-3144   	; 0x23c <ioport_configure_port_pin>
     e84:	43 e0       	ldi	r20, 0x03	; 3
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	68 e0       	ldi	r22, 0x08	; 8
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	96 e0       	ldi	r25, 0x06	; 6
     e8e:	d6 d9       	rcall	.-3156   	; 0x23c <ioport_configure_port_pin>
     e90:	43 e0       	ldi	r20, 0x03	; 3
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	60 e1       	ldi	r22, 0x10	; 16
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	96 e0       	ldi	r25, 0x06	; 6
     e9a:	d0 d9       	rcall	.-3168   	; 0x23c <ioport_configure_port_pin>
     e9c:	43 e0       	ldi	r20, 0x03	; 3
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	60 e2       	ldi	r22, 0x20	; 32
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	96 e0       	ldi	r25, 0x06	; 6
     ea6:	ca d9       	rcall	.-3180   	; 0x23c <ioport_configure_port_pin>
     ea8:	43 e0       	ldi	r20, 0x03	; 3
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	60 e4       	ldi	r22, 0x40	; 64
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	96 e0       	ldi	r25, 0x06	; 6
     eb2:	c4 d9       	rcall	.-3192   	; 0x23c <ioport_configure_port_pin>
     eb4:	43 e0       	ldi	r20, 0x03	; 3
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	60 e8       	ldi	r22, 0x80	; 128
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	96 e0       	ldi	r25, 0x06	; 6
     ebe:	be d9       	rcall	.-3204   	; 0x23c <ioport_configure_port_pin>
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	58 e1       	ldi	r21, 0x18	; 24
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	80 e2       	ldi	r24, 0x20	; 32
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	b8 d9       	rcall	.-3216   	; 0x23c <ioport_configure_port_pin>
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	58 e1       	ldi	r21, 0x18	; 24
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	80 e2       	ldi	r24, 0x20	; 32
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	b2 d9       	rcall	.-3228   	; 0x23c <ioport_configure_port_pin>
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	58 e1       	ldi	r21, 0x18	; 24
     edc:	64 e0       	ldi	r22, 0x04	; 4
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	ac d9       	rcall	.-3240   	; 0x23c <ioport_configure_port_pin>
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	58 e1       	ldi	r21, 0x18	; 24
     ee8:	68 e0       	ldi	r22, 0x08	; 8
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	96 e0       	ldi	r25, 0x06	; 6
     eee:	a6 c9       	rjmp	.-3252   	; 0x23c <ioport_configure_port_pin>

00000ef0 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     ef0:	81 11       	cpse	r24, r1
     ef2:	18 c0       	rjmp	.+48     	; 0xf24 <udd_sleep_mode+0x34>
     ef4:	90 91 18 22 	lds	r25, 0x2218
     ef8:	99 23       	and	r25, r25
     efa:	89 f0       	breq	.+34     	; 0xf1e <udd_sleep_mode+0x2e>
     efc:	9f b7       	in	r25, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	e1 ee       	ldi	r30, 0xE1	; 225
     f02:	f2 e2       	ldi	r31, 0x22	; 34
     f04:	20 81       	ld	r18, Z
     f06:	21 50       	subi	r18, 0x01	; 1
     f08:	20 83       	st	Z, r18
     f0a:	9f bf       	out	0x3f, r25	; 63
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <udd_sleep_mode+0x2e>
     f0e:	9f b7       	in	r25, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	e1 ee       	ldi	r30, 0xE1	; 225
     f14:	f2 e2       	ldi	r31, 0x22	; 34
     f16:	20 81       	ld	r18, Z
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	20 83       	st	Z, r18
     f1c:	9f bf       	out	0x3f, r25	; 63
     f1e:	80 93 18 22 	sts	0x2218, r24
     f22:	08 95       	ret
     f24:	90 91 18 22 	lds	r25, 0x2218
     f28:	99 23       	and	r25, r25
     f2a:	89 f3       	breq	.-30     	; 0xf0e <udd_sleep_mode+0x1e>
     f2c:	f8 cf       	rjmp	.-16     	; 0xf1e <udd_sleep_mode+0x2e>

00000f2e <udd_ep_get_ctrl>:
     f2e:	28 2f       	mov	r18, r24
     f30:	2f 70       	andi	r18, 0x0F	; 15
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	99 27       	eor	r25, r25
     f3a:	87 fd       	sbrc	r24, 7
     f3c:	90 95       	com	r25
     f3e:	88 27       	eor	r24, r24
     f40:	99 0f       	add	r25, r25
     f42:	88 1f       	adc	r24, r24
     f44:	99 27       	eor	r25, r25
     f46:	28 0f       	add	r18, r24
     f48:	39 1f       	adc	r19, r25
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	20 54       	subi	r18, 0x40	; 64
     f58:	3e 4d       	sbci	r19, 0xDE	; 222
     f5a:	82 2f       	mov	r24, r18
     f5c:	93 2f       	mov	r25, r19
     f5e:	08 95       	ret

00000f60 <udd_ep_init>:
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	63 70       	andi	r22, 0x03	; 3
     f6a:	61 30       	cpi	r22, 0x01	; 1
     f6c:	11 f0       	breq	.+4      	; 0xf72 <udd_ep_init+0x12>
     f6e:	38 f0       	brcs	.+14     	; 0xf7e <udd_ep_init+0x1e>
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <udd_ep_init+0x18>
     f72:	00 ec       	ldi	r16, 0xC0	; 192
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <udd_ep_init+0x22>
     f78:	00 e8       	ldi	r16, 0x80	; 128
     f7a:	10 e0       	ldi	r17, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <udd_ep_init+0x22>
     f7e:	00 e4       	ldi	r16, 0x40	; 64
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	40 38       	cpi	r20, 0x80	; 128
     f84:	51 05       	cpc	r21, r1
     f86:	f9 f0       	breq	.+62     	; 0xfc6 <udd_ep_init+0x66>
     f88:	50 f4       	brcc	.+20     	; 0xf9e <udd_ep_init+0x3e>
     f8a:	40 32       	cpi	r20, 0x20	; 32
     f8c:	51 05       	cpc	r21, r1
     f8e:	a9 f0       	breq	.+42     	; 0xfba <udd_ep_init+0x5a>
     f90:	40 34       	cpi	r20, 0x40	; 64
     f92:	51 05       	cpc	r21, r1
     f94:	a9 f0       	breq	.+42     	; 0xfc0 <udd_ep_init+0x60>
     f96:	40 31       	cpi	r20, 0x10	; 16
     f98:	51 05       	cpc	r21, r1
     f9a:	61 f4       	brne	.+24     	; 0xfb4 <udd_ep_init+0x54>
     f9c:	20 c0       	rjmp	.+64     	; 0xfde <udd_ep_init+0x7e>
     f9e:	41 15       	cp	r20, r1
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	59 07       	cpc	r21, r25
     fa4:	b1 f0       	breq	.+44     	; 0xfd2 <udd_ep_init+0x72>
     fa6:	4f 3f       	cpi	r20, 0xFF	; 255
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	59 07       	cpc	r21, r25
     fac:	a9 f0       	breq	.+42     	; 0xfd8 <udd_ep_init+0x78>
     fae:	41 15       	cp	r20, r1
     fb0:	51 40       	sbci	r21, 0x01	; 1
     fb2:	61 f0       	breq	.+24     	; 0xfcc <udd_ep_init+0x6c>
     fb4:	c0 e0       	ldi	r28, 0x00	; 0
     fb6:	d0 e0       	ldi	r29, 0x00	; 0
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <udd_ep_init+0x82>
     fba:	c2 e0       	ldi	r28, 0x02	; 2
     fbc:	d0 e0       	ldi	r29, 0x00	; 0
     fbe:	11 c0       	rjmp	.+34     	; 0xfe2 <udd_ep_init+0x82>
     fc0:	c3 e0       	ldi	r28, 0x03	; 3
     fc2:	d0 e0       	ldi	r29, 0x00	; 0
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <udd_ep_init+0x82>
     fc6:	c4 e0       	ldi	r28, 0x04	; 4
     fc8:	d0 e0       	ldi	r29, 0x00	; 0
     fca:	0b c0       	rjmp	.+22     	; 0xfe2 <udd_ep_init+0x82>
     fcc:	c5 e0       	ldi	r28, 0x05	; 5
     fce:	d0 e0       	ldi	r29, 0x00	; 0
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <udd_ep_init+0x82>
     fd2:	c6 e0       	ldi	r28, 0x06	; 6
     fd4:	d0 e0       	ldi	r29, 0x00	; 0
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <udd_ep_init+0x82>
     fd8:	c7 e0       	ldi	r28, 0x07	; 7
     fda:	d0 e0       	ldi	r29, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <udd_ep_init+0x82>
     fde:	c1 e0       	ldi	r28, 0x01	; 1
     fe0:	d0 e0       	ldi	r29, 0x00	; 0
     fe2:	a5 df       	rcall	.-182    	; 0xf2e <udd_ep_get_ctrl>
     fe4:	fc 01       	movw	r30, r24
     fe6:	11 82       	std	Z+1, r1	; 0x01
     fe8:	86 e0       	ldi	r24, 0x06	; 6
     fea:	80 83       	st	Z, r24
     fec:	c0 2b       	or	r28, r16
     fee:	c1 83       	std	Z+1, r28	; 0x01
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

00000ffa <udd_ctrl_init>:
     ffa:	0f 93       	push	r16
     ffc:	e8 ec       	ldi	r30, 0xC8	; 200
     ffe:	f4 e0       	ldi	r31, 0x04	; 4
    1000:	80 81       	ld	r24, Z
    1002:	8f 7d       	andi	r24, 0xDF	; 223
    1004:	80 83       	st	Z, r24
    1006:	80 81       	ld	r24, Z
    1008:	8f 7d       	andi	r24, 0xDF	; 223
    100a:	80 83       	st	Z, r24
    100c:	e8 ec       	ldi	r30, 0xC8	; 200
    100e:	f1 e2       	ldi	r31, 0x21	; 33
    1010:	02 e0       	ldi	r16, 0x02	; 2
    1012:	05 93       	las	Z, r16
    1014:	10 92 ca 21 	sts	0x21CA, r1
    1018:	10 92 cb 21 	sts	0x21CB, r1
    101c:	00 e2       	ldi	r16, 0x20	; 32
    101e:	06 93       	lac	Z, r16
    1020:	00 e4       	ldi	r16, 0x40	; 64
    1022:	06 93       	lac	Z, r16
    1024:	e0 ec       	ldi	r30, 0xC0	; 192
    1026:	f1 e2       	ldi	r31, 0x21	; 33
    1028:	00 e2       	ldi	r16, 0x20	; 32
    102a:	06 93       	lac	Z, r16
    102c:	00 e4       	ldi	r16, 0x40	; 64
    102e:	06 93       	lac	Z, r16
    1030:	10 92 f2 22 	sts	0x22F2, r1
    1034:	10 92 f3 22 	sts	0x22F3, r1
    1038:	10 92 f4 22 	sts	0x22F4, r1
    103c:	10 92 f5 22 	sts	0x22F5, r1
    1040:	10 92 f0 22 	sts	0x22F0, r1
    1044:	10 92 f1 22 	sts	0x22F1, r1
    1048:	10 92 d9 22 	sts	0x22D9, r1
    104c:	10 92 da 22 	sts	0x22DA, r1
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <udd_ctrl_stall_data>:
    1054:	0f 93       	push	r16
    1056:	85 e0       	ldi	r24, 0x05	; 5
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	80 93 d9 22 	sts	0x22D9, r24
    105e:	90 93 da 22 	sts	0x22DA, r25
    1062:	e9 ec       	ldi	r30, 0xC9	; 201
    1064:	f1 e2       	ldi	r31, 0x21	; 33
    1066:	04 e0       	ldi	r16, 0x04	; 4
    1068:	05 93       	las	Z, r16
    106a:	e1 ec       	ldi	r30, 0xC1	; 193
    106c:	f1 e2       	ldi	r31, 0x21	; 33
    106e:	04 e0       	ldi	r16, 0x04	; 4
    1070:	05 93       	las	Z, r16
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <udd_ctrl_send_zlp_in>:
    1076:	0f 93       	push	r16
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	80 93 d9 22 	sts	0x22D9, r24
    1080:	90 93 da 22 	sts	0x22DA, r25
    1084:	10 92 ca 21 	sts	0x21CA, r1
    1088:	10 92 cb 21 	sts	0x21CB, r1
    108c:	e8 ec       	ldi	r30, 0xC8	; 200
    108e:	f1 e2       	ldi	r31, 0x21	; 33
    1090:	02 e0       	ldi	r16, 0x02	; 2
    1092:	06 93       	lac	Z, r16
    1094:	0f 91       	pop	r16
    1096:	08 95       	ret

00001098 <udd_ctrl_send_zlp_out>:
    1098:	0f 93       	push	r16
    109a:	84 e0       	ldi	r24, 0x04	; 4
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	80 93 d9 22 	sts	0x22D9, r24
    10a2:	90 93 da 22 	sts	0x22DA, r25
    10a6:	e0 ec       	ldi	r30, 0xC0	; 192
    10a8:	f1 e2       	ldi	r31, 0x21	; 33
    10aa:	02 e0       	ldi	r16, 0x02	; 2
    10ac:	06 93       	lac	Z, r16
    10ae:	0f 91       	pop	r16
    10b0:	08 95       	ret

000010b2 <udd_ctrl_endofrequest>:
    10b2:	e0 91 f2 22 	lds	r30, 0x22F2
    10b6:	f0 91 f3 22 	lds	r31, 0x22F3
    10ba:	30 97       	sbiw	r30, 0x00	; 0
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <udd_ctrl_endofrequest+0xe>
    10be:	09 95       	icall
    10c0:	08 95       	ret

000010c2 <udd_ctrl_in_sent>:
    10c2:	0f 93       	push	r16
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	80 91 d9 22 	lds	r24, 0x22D9
    10cc:	90 91 da 22 	lds	r25, 0x22DA
    10d0:	03 97       	sbiw	r24, 0x03	; 3
    10d2:	19 f4       	brne	.+6      	; 0x10da <udd_ctrl_in_sent+0x18>
    10d4:	ee df       	rcall	.-36     	; 0x10b2 <udd_ctrl_endofrequest>
    10d6:	91 df       	rcall	.-222    	; 0xffa <udd_ctrl_init>
    10d8:	5a c0       	rjmp	.+180    	; 0x118e <udd_ctrl_in_sent+0xcc>
    10da:	80 91 dd 22 	lds	r24, 0x22DD
    10de:	90 91 de 22 	lds	r25, 0x22DE
    10e2:	c0 91 f0 22 	lds	r28, 0x22F0
    10e6:	d0 91 f1 22 	lds	r29, 0x22F1
    10ea:	c8 1b       	sub	r28, r24
    10ec:	d9 0b       	sbc	r29, r25
    10ee:	41 f5       	brne	.+80     	; 0x1140 <udd_ctrl_in_sent+0x7e>
    10f0:	20 91 db 22 	lds	r18, 0x22DB
    10f4:	30 91 dc 22 	lds	r19, 0x22DC
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	80 93 db 22 	sts	0x22DB, r24
    1100:	90 93 dc 22 	sts	0x22DC, r25
    1104:	20 91 ec 22 	lds	r18, 0x22EC
    1108:	30 91 ed 22 	lds	r19, 0x22ED
    110c:	82 17       	cp	r24, r18
    110e:	93 07       	cpc	r25, r19
    1110:	21 f0       	breq	.+8      	; 0x111a <udd_ctrl_in_sent+0x58>
    1112:	80 91 df 22 	lds	r24, 0x22DF
    1116:	88 23       	and	r24, r24
    1118:	11 f0       	breq	.+4      	; 0x111e <udd_ctrl_in_sent+0x5c>
    111a:	be df       	rcall	.-132    	; 0x1098 <udd_ctrl_send_zlp_out>
    111c:	38 c0       	rjmp	.+112    	; 0x118e <udd_ctrl_in_sent+0xcc>
    111e:	e0 91 f4 22 	lds	r30, 0x22F4
    1122:	f0 91 f5 22 	lds	r31, 0x22F5
    1126:	30 97       	sbiw	r30, 0x00	; 0
    1128:	99 f0       	breq	.+38     	; 0x1150 <udd_ctrl_in_sent+0x8e>
    112a:	09 95       	icall
    112c:	88 23       	and	r24, r24
    112e:	81 f0       	breq	.+32     	; 0x1150 <udd_ctrl_in_sent+0x8e>
    1130:	10 92 dd 22 	sts	0x22DD, r1
    1134:	10 92 de 22 	sts	0x22DE, r1
    1138:	c0 91 f0 22 	lds	r28, 0x22F0
    113c:	d0 91 f1 22 	lds	r29, 0x22F1
    1140:	c0 34       	cpi	r28, 0x40	; 64
    1142:	d1 05       	cpc	r29, r1
    1144:	28 f0       	brcs	.+10     	; 0x1150 <udd_ctrl_in_sent+0x8e>
    1146:	10 92 df 22 	sts	0x22DF, r1
    114a:	c0 e4       	ldi	r28, 0x40	; 64
    114c:	d0 e0       	ldi	r29, 0x00	; 0
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <udd_ctrl_in_sent+0x94>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 df 22 	sts	0x22DF, r24
    1156:	c0 93 ca 21 	sts	0x21CA, r28
    115a:	d0 93 cb 21 	sts	0x21CB, r29
    115e:	80 91 dd 22 	lds	r24, 0x22DD
    1162:	90 91 de 22 	lds	r25, 0x22DE
    1166:	20 91 ee 22 	lds	r18, 0x22EE
    116a:	30 91 ef 22 	lds	r19, 0x22EF
    116e:	28 0f       	add	r18, r24
    1170:	39 1f       	adc	r19, r25
    1172:	20 93 cc 21 	sts	0x21CC, r18
    1176:	30 93 cd 21 	sts	0x21CD, r19
    117a:	c8 0f       	add	r28, r24
    117c:	d9 1f       	adc	r29, r25
    117e:	c0 93 dd 22 	sts	0x22DD, r28
    1182:	d0 93 de 22 	sts	0x22DE, r29
    1186:	e8 ec       	ldi	r30, 0xC8	; 200
    1188:	f1 e2       	ldi	r31, 0x21	; 33
    118a:	02 e0       	ldi	r16, 0x02	; 2
    118c:	06 93       	lac	Z, r16
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	0f 91       	pop	r16
    1194:	08 95       	ret

00001196 <udd_ep_get_size>:
    1196:	fc 01       	movw	r30, r24
    1198:	81 81       	ldd	r24, Z+1	; 0x01
    119a:	87 70       	andi	r24, 0x07	; 7
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	a9 f0       	breq	.+42     	; 0x11ca <udd_ep_get_size+0x34>
    11a0:	30 f4       	brcc	.+12     	; 0x11ae <udd_ep_get_size+0x18>
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	61 f0       	breq	.+24     	; 0x11be <udd_ep_get_size+0x28>
    11a6:	70 f4       	brcc	.+28     	; 0x11c4 <udd_ep_get_size+0x2e>
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	31 f4       	brne	.+12     	; 0x11b8 <udd_ep_get_size+0x22>
    11ac:	1a c0       	rjmp	.+52     	; 0x11e2 <udd_ep_get_size+0x4c>
    11ae:	86 30       	cpi	r24, 0x06	; 6
    11b0:	91 f0       	breq	.+36     	; 0x11d6 <udd_ep_get_size+0x40>
    11b2:	70 f0       	brcs	.+28     	; 0x11d0 <udd_ep_get_size+0x3a>
    11b4:	87 30       	cpi	r24, 0x07	; 7
    11b6:	91 f0       	breq	.+36     	; 0x11dc <udd_ep_get_size+0x46>
    11b8:	28 e0       	ldi	r18, 0x08	; 8
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <udd_ep_get_size+0x50>
    11be:	20 e2       	ldi	r18, 0x20	; 32
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	11 c0       	rjmp	.+34     	; 0x11e6 <udd_ep_get_size+0x50>
    11c4:	20 e4       	ldi	r18, 0x40	; 64
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	0e c0       	rjmp	.+28     	; 0x11e6 <udd_ep_get_size+0x50>
    11ca:	20 e8       	ldi	r18, 0x80	; 128
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	0b c0       	rjmp	.+22     	; 0x11e6 <udd_ep_get_size+0x50>
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	31 e0       	ldi	r19, 0x01	; 1
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <udd_ep_get_size+0x50>
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	32 e0       	ldi	r19, 0x02	; 2
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <udd_ep_get_size+0x50>
    11dc:	2f ef       	ldi	r18, 0xFF	; 255
    11de:	33 e0       	ldi	r19, 0x03	; 3
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <udd_ep_get_size+0x50>
    11e2:	20 e1       	ldi	r18, 0x10	; 16
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	82 2f       	mov	r24, r18
    11e8:	93 2f       	mov	r25, r19
    11ea:	08 95       	ret

000011ec <udd_ep_get_job>:
    11ec:	28 2f       	mov	r18, r24
    11ee:	2f 70       	andi	r18, 0x0F	; 15
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	99 27       	eor	r25, r25
    11f8:	87 fd       	sbrc	r24, 7
    11fa:	90 95       	com	r25
    11fc:	88 27       	eor	r24, r24
    11fe:	99 0f       	add	r25, r25
    1200:	88 1f       	adc	r24, r24
    1202:	99 27       	eor	r25, r25
    1204:	28 0f       	add	r18, r24
    1206:	39 1f       	adc	r19, r25
    1208:	22 50       	subi	r18, 0x02	; 2
    120a:	31 09       	sbc	r19, r1
    120c:	c9 01       	movw	r24, r18
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	28 0f       	add	r18, r24
    121c:	39 1f       	adc	r19, r25
    121e:	2c 50       	subi	r18, 0x0C	; 12
    1220:	3e 4d       	sbci	r19, 0xDE	; 222
    1222:	82 2f       	mov	r24, r18
    1224:	93 2f       	mov	r25, r19
    1226:	08 95       	ret

00001228 <udd_ctrl_interrupt_tc_setup>:
    1228:	0f 93       	push	r16
    122a:	80 91 cc 04 	lds	r24, 0x04CC
    122e:	80 ff       	sbrs	r24, 0
    1230:	6c c0       	rjmp	.+216    	; 0x130a <udd_ctrl_interrupt_tc_setup+0xe2>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 cc 04 	sts	0x04CC, r24
    1238:	e0 ec       	ldi	r30, 0xC0	; 192
    123a:	f1 e2       	ldi	r31, 0x21	; 33
    123c:	00 e8       	ldi	r16, 0x80	; 128
    123e:	06 93       	lac	Z, r16
    1240:	e8 ec       	ldi	r30, 0xC8	; 200
    1242:	f1 e2       	ldi	r31, 0x21	; 33
    1244:	00 e8       	ldi	r16, 0x80	; 128
    1246:	06 93       	lac	Z, r16
    1248:	80 93 ca 04 	sts	0x04CA, r24
    124c:	e0 ec       	ldi	r30, 0xC0	; 192
    124e:	f1 e2       	ldi	r31, 0x21	; 33
    1250:	00 e1       	ldi	r16, 0x10	; 16
    1252:	06 93       	lac	Z, r16
    1254:	80 91 d9 22 	lds	r24, 0x22D9
    1258:	90 91 da 22 	lds	r25, 0x22DA
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	29 f0       	breq	.+10     	; 0x126a <udd_ctrl_interrupt_tc_setup+0x42>
    1260:	03 97       	sbiw	r24, 0x03	; 3
    1262:	02 97       	sbiw	r24, 0x02	; 2
    1264:	08 f4       	brcc	.+2      	; 0x1268 <udd_ctrl_interrupt_tc_setup+0x40>
    1266:	25 df       	rcall	.-438    	; 0x10b2 <udd_ctrl_endofrequest>
    1268:	c8 de       	rcall	.-624    	; 0xffa <udd_ctrl_init>
    126a:	80 91 c2 21 	lds	r24, 0x21C2
    126e:	90 91 c3 21 	lds	r25, 0x21C3
    1272:	08 97       	sbiw	r24, 0x08	; 8
    1274:	09 f0       	breq	.+2      	; 0x1278 <udd_ctrl_interrupt_tc_setup+0x50>
    1276:	4b c0       	rjmp	.+150    	; 0x130e <udd_ctrl_interrupt_tc_setup+0xe6>
    1278:	88 e0       	ldi	r24, 0x08	; 8
    127a:	e9 e9       	ldi	r30, 0x99	; 153
    127c:	f2 e2       	ldi	r31, 0x22	; 34
    127e:	a6 ee       	ldi	r26, 0xE6	; 230
    1280:	b2 e2       	ldi	r27, 0x22	; 34
    1282:	01 90       	ld	r0, Z+
    1284:	0d 92       	st	X+, r0
    1286:	8a 95       	dec	r24
    1288:	e1 f7       	brne	.-8      	; 0x1282 <udd_ctrl_interrupt_tc_setup+0x5a>
    128a:	e8 ec       	ldi	r30, 0xC8	; 200
    128c:	f4 e0       	ldi	r31, 0x04	; 4
    128e:	80 81       	ld	r24, Z
    1290:	80 62       	ori	r24, 0x20	; 32
    1292:	80 83       	st	Z, r24
    1294:	80 81       	ld	r24, Z
    1296:	80 62       	ori	r24, 0x20	; 32
    1298:	80 83       	st	Z, r24
    129a:	6f db       	rcall	.-2338   	; 0x97a <udc_process_setup>
    129c:	81 11       	cpse	r24, r1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <udd_ctrl_interrupt_tc_setup+0x7e>
    12a0:	d9 de       	rcall	.-590    	; 0x1054 <udd_ctrl_stall_data>
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	35 c0       	rjmp	.+106    	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xe8>
    12a6:	80 91 e6 22 	lds	r24, 0x22E6
    12aa:	88 23       	and	r24, r24
    12ac:	8c f4       	brge	.+34     	; 0x12d0 <udd_ctrl_interrupt_tc_setup+0xa8>
    12ae:	10 92 db 22 	sts	0x22DB, r1
    12b2:	10 92 dc 22 	sts	0x22DC, r1
    12b6:	10 92 dd 22 	sts	0x22DD, r1
    12ba:	10 92 de 22 	sts	0x22DE, r1
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	80 93 d9 22 	sts	0x22D9, r24
    12c6:	90 93 da 22 	sts	0x22DA, r25
    12ca:	fb de       	rcall	.-522    	; 0x10c2 <udd_ctrl_in_sent>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	20 c0       	rjmp	.+64     	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xe8>
    12d0:	80 91 ec 22 	lds	r24, 0x22EC
    12d4:	90 91 ed 22 	lds	r25, 0x22ED
    12d8:	89 2b       	or	r24, r25
    12da:	19 f4       	brne	.+6      	; 0x12e2 <udd_ctrl_interrupt_tc_setup+0xba>
    12dc:	cc de       	rcall	.-616    	; 0x1076 <udd_ctrl_send_zlp_in>
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	17 c0       	rjmp	.+46     	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xe8>
    12e2:	10 92 db 22 	sts	0x22DB, r1
    12e6:	10 92 dc 22 	sts	0x22DC, r1
    12ea:	10 92 dd 22 	sts	0x22DD, r1
    12ee:	10 92 de 22 	sts	0x22DE, r1
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	80 93 d9 22 	sts	0x22D9, r24
    12fa:	90 93 da 22 	sts	0x22DA, r25
    12fe:	e0 ec       	ldi	r30, 0xC0	; 192
    1300:	f1 e2       	ldi	r31, 0x21	; 33
    1302:	02 e0       	ldi	r16, 0x02	; 2
    1304:	06 93       	lac	Z, r16
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xe8>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xe8>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <udd_ep_trans_complet>:
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	b8 2e       	mov	r11, r24
    1328:	61 df       	rcall	.-318    	; 0x11ec <udd_ep_get_job>
    132a:	ec 01       	movw	r28, r24
    132c:	8b 2d       	mov	r24, r11
    132e:	ff dd       	rcall	.-1026   	; 0xf2e <udd_ep_get_ctrl>
    1330:	7c 01       	movw	r14, r24
    1332:	31 df       	rcall	.-414    	; 0x1196 <udd_ep_get_size>
    1334:	6c 01       	movw	r12, r24
    1336:	bb 20       	and	r11, r11
    1338:	0c f0       	brlt	.+2      	; 0x133c <udd_ep_trans_complet+0x28>
    133a:	5d c0       	rjmp	.+186    	; 0x13f6 <udd_ep_trans_complet+0xe2>
    133c:	d7 01       	movw	r26, r14
    133e:	16 96       	adiw	r26, 0x06	; 6
    1340:	2d 91       	ld	r18, X+
    1342:	3c 91       	ld	r19, X
    1344:	17 97       	sbiw	r26, 0x07	; 7
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	28 0f       	add	r18, r24
    134c:	39 1f       	adc	r19, r25
    134e:	2d 83       	std	Y+5, r18	; 0x05
    1350:	3e 83       	std	Y+6, r19	; 0x06
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	28 17       	cp	r18, r24
    1358:	39 07       	cpc	r19, r25
    135a:	09 f4       	brne	.+2      	; 0x135e <udd_ep_trans_complet+0x4a>
    135c:	3a c0       	rjmp	.+116    	; 0x13d2 <udd_ep_trans_complet+0xbe>
    135e:	fc 01       	movw	r30, r24
    1360:	e2 1b       	sub	r30, r18
    1362:	f3 0b       	sbc	r31, r19
    1364:	9f 01       	movw	r18, r30
    1366:	21 15       	cp	r18, r1
    1368:	f4 e0       	ldi	r31, 0x04	; 4
    136a:	3f 07       	cpc	r19, r31
    136c:	38 f0       	brcs	.+14     	; 0x137c <udd_ep_trans_complet+0x68>
    136e:	2f ef       	ldi	r18, 0xFF	; 255
    1370:	33 e0       	ldi	r19, 0x03	; 3
    1372:	c9 01       	movw	r24, r18
    1374:	b6 01       	movw	r22, r12
    1376:	84 d3       	rcall	.+1800   	; 0x1a80 <__udivmodhi4>
    1378:	28 1b       	sub	r18, r24
    137a:	39 0b       	sbc	r19, r25
    137c:	88 81       	ld	r24, Y
    137e:	81 ff       	sbrs	r24, 1
    1380:	0b c0       	rjmp	.+22     	; 0x1398 <udd_ep_trans_complet+0x84>
    1382:	c9 01       	movw	r24, r18
    1384:	b6 01       	movw	r22, r12
    1386:	7c d3       	rcall	.+1784   	; 0x1a80 <__udivmodhi4>
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	89 2b       	or	r24, r25
    138e:	11 f0       	breq	.+4      	; 0x1394 <udd_ep_trans_complet+0x80>
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	ca 01       	movw	r24, r20
    1396:	02 c0       	rjmp	.+4      	; 0x139c <udd_ep_trans_complet+0x88>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	98 81       	ld	r25, Y
    139e:	80 fb       	bst	r24, 0
    13a0:	91 f9       	bld	r25, 1
    13a2:	98 83       	st	Y, r25
    13a4:	d7 01       	movw	r26, r14
    13a6:	16 96       	adiw	r26, 0x06	; 6
    13a8:	1d 92       	st	X+, r1
    13aa:	1c 92       	st	X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	12 96       	adiw	r26, 0x02	; 2
    13b0:	2d 93       	st	X+, r18
    13b2:	3c 93       	st	X, r19
    13b4:	13 97       	sbiw	r26, 0x03	; 3
    13b6:	29 81       	ldd	r18, Y+1	; 0x01
    13b8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	82 0f       	add	r24, r18
    13c0:	93 1f       	adc	r25, r19
    13c2:	14 96       	adiw	r26, 0x04	; 4
    13c4:	8d 93       	st	X+, r24
    13c6:	9c 93       	st	X, r25
    13c8:	15 97       	sbiw	r26, 0x05	; 5
    13ca:	f7 01       	movw	r30, r14
    13cc:	02 e0       	ldi	r16, 0x02	; 2
    13ce:	06 93       	lac	Z, r16
    13d0:	99 c0       	rjmp	.+306    	; 0x1504 <udd_ep_trans_complet+0x1f0>
    13d2:	88 81       	ld	r24, Y
    13d4:	81 ff       	sbrs	r24, 1
    13d6:	87 c0       	rjmp	.+270    	; 0x14e6 <udd_ep_trans_complet+0x1d2>
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	88 83       	st	Y, r24
    13dc:	d7 01       	movw	r26, r14
    13de:	16 96       	adiw	r26, 0x06	; 6
    13e0:	1d 92       	st	X+, r1
    13e2:	1c 92       	st	X, r1
    13e4:	17 97       	sbiw	r26, 0x07	; 7
    13e6:	12 96       	adiw	r26, 0x02	; 2
    13e8:	1d 92       	st	X+, r1
    13ea:	1c 92       	st	X, r1
    13ec:	13 97       	sbiw	r26, 0x03	; 3
    13ee:	f7 01       	movw	r30, r14
    13f0:	02 e0       	ldi	r16, 0x02	; 2
    13f2:	06 93       	lac	Z, r16
    13f4:	87 c0       	rjmp	.+270    	; 0x1504 <udd_ep_trans_complet+0x1f0>
    13f6:	d7 01       	movw	r26, r14
    13f8:	12 96       	adiw	r26, 0x02	; 2
    13fa:	0d 91       	ld	r16, X+
    13fc:	1c 91       	ld	r17, X
    13fe:	13 97       	sbiw	r26, 0x03	; 3
    1400:	88 81       	ld	r24, Y
    1402:	82 ff       	sbrs	r24, 2
    1404:	17 c0       	rjmp	.+46     	; 0x1434 <udd_ep_trans_complet+0x120>
    1406:	29 81       	ldd	r18, Y+1	; 0x01
    1408:	3a 81       	ldd	r19, Y+2	; 0x02
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	28 0f       	add	r18, r24
    1410:	39 1f       	adc	r19, r25
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	b6 01       	movw	r22, r12
    1418:	33 d3       	rcall	.+1638   	; 0x1a80 <__udivmodhi4>
    141a:	b0 e4       	ldi	r27, 0x40	; 64
    141c:	bb 9e       	mul	r11, r27
    141e:	f0 01       	movw	r30, r0
    1420:	11 24       	eor	r1, r1
    1422:	e7 52       	subi	r30, 0x27	; 39
    1424:	fe 4d       	sbci	r31, 0xDE	; 222
    1426:	48 2f       	mov	r20, r24
    1428:	59 2f       	mov	r21, r25
    142a:	6e 2f       	mov	r22, r30
    142c:	7f 2f       	mov	r23, r31
    142e:	82 2f       	mov	r24, r18
    1430:	93 2f       	mov	r25, r19
    1432:	3a d3       	rcall	.+1652   	; 0x1aa8 <memcpy>
    1434:	2d 81       	ldd	r18, Y+5	; 0x05
    1436:	3e 81       	ldd	r19, Y+6	; 0x06
    1438:	20 0f       	add	r18, r16
    143a:	31 1f       	adc	r19, r17
    143c:	2d 83       	std	Y+5, r18	; 0x05
    143e:	3e 83       	std	Y+6, r19	; 0x06
    1440:	eb 81       	ldd	r30, Y+3	; 0x03
    1442:	fc 81       	ldd	r31, Y+4	; 0x04
    1444:	e2 17       	cp	r30, r18
    1446:	f3 07       	cpc	r31, r19
    1448:	10 f4       	brcc	.+4      	; 0x144e <udd_ep_trans_complet+0x13a>
    144a:	ed 83       	std	Y+5, r30	; 0x05
    144c:	fe 83       	std	Y+6, r31	; 0x06
    144e:	d7 01       	movw	r26, r14
    1450:	16 96       	adiw	r26, 0x06	; 6
    1452:	2d 91       	ld	r18, X+
    1454:	3c 91       	ld	r19, X
    1456:	17 97       	sbiw	r26, 0x07	; 7
    1458:	20 17       	cp	r18, r16
    145a:	31 07       	cpc	r19, r17
    145c:	09 f0       	breq	.+2      	; 0x1460 <udd_ep_trans_complet+0x14c>
    145e:	43 c0       	rjmp	.+134    	; 0x14e6 <udd_ep_trans_complet+0x1d2>
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	e8 17       	cp	r30, r24
    1466:	f9 07       	cpc	r31, r25
    1468:	09 f4       	brne	.+2      	; 0x146c <udd_ep_trans_complet+0x158>
    146a:	3d c0       	rjmp	.+122    	; 0x14e6 <udd_ep_trans_complet+0x1d2>
    146c:	e8 1b       	sub	r30, r24
    146e:	f9 0b       	sbc	r31, r25
    1470:	e1 15       	cp	r30, r1
    1472:	b4 e0       	ldi	r27, 0x04	; 4
    1474:	fb 07       	cpc	r31, r27
    1476:	40 f0       	brcs	.+16     	; 0x1488 <udd_ep_trans_complet+0x174>
    1478:	ef ef       	ldi	r30, 0xFF	; 255
    147a:	f3 e0       	ldi	r31, 0x03	; 3
    147c:	cf 01       	movw	r24, r30
    147e:	b6 01       	movw	r22, r12
    1480:	ff d2       	rcall	.+1534   	; 0x1a80 <__udivmodhi4>
    1482:	e8 1b       	sub	r30, r24
    1484:	f9 0b       	sbc	r31, r25
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <udd_ep_trans_complet+0x17e>
    1488:	cf 01       	movw	r24, r30
    148a:	b6 01       	movw	r22, r12
    148c:	f9 d2       	rcall	.+1522   	; 0x1a80 <__udivmodhi4>
    148e:	e8 1b       	sub	r30, r24
    1490:	f9 0b       	sbc	r31, r25
    1492:	d7 01       	movw	r26, r14
    1494:	12 96       	adiw	r26, 0x02	; 2
    1496:	1d 92       	st	X+, r1
    1498:	1c 92       	st	X, r1
    149a:	13 97       	sbiw	r26, 0x03	; 3
    149c:	ec 15       	cp	r30, r12
    149e:	fd 05       	cpc	r31, r13
    14a0:	78 f4       	brcc	.+30     	; 0x14c0 <udd_ep_trans_complet+0x1ac>
    14a2:	88 81       	ld	r24, Y
    14a4:	84 60       	ori	r24, 0x04	; 4
    14a6:	88 83       	st	Y, r24
    14a8:	b0 e4       	ldi	r27, 0x40	; 64
    14aa:	bb 9e       	mul	r11, r27
    14ac:	c0 01       	movw	r24, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	87 52       	subi	r24, 0x27	; 39
    14b2:	9e 4d       	sbci	r25, 0xDE	; 222
    14b4:	f7 01       	movw	r30, r14
    14b6:	84 83       	std	Z+4, r24	; 0x04
    14b8:	95 83       	std	Z+5, r25	; 0x05
    14ba:	c6 82       	std	Z+6, r12	; 0x06
    14bc:	d7 82       	std	Z+7, r13	; 0x07
    14be:	0f c0       	rjmp	.+30     	; 0x14de <udd_ep_trans_complet+0x1ca>
    14c0:	29 81       	ldd	r18, Y+1	; 0x01
    14c2:	3a 81       	ldd	r19, Y+2	; 0x02
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	82 0f       	add	r24, r18
    14ca:	93 1f       	adc	r25, r19
    14cc:	d7 01       	movw	r26, r14
    14ce:	14 96       	adiw	r26, 0x04	; 4
    14d0:	8d 93       	st	X+, r24
    14d2:	9c 93       	st	X, r25
    14d4:	15 97       	sbiw	r26, 0x05	; 5
    14d6:	16 96       	adiw	r26, 0x06	; 6
    14d8:	ed 93       	st	X+, r30
    14da:	fc 93       	st	X, r31
    14dc:	17 97       	sbiw	r26, 0x07	; 7
    14de:	f7 01       	movw	r30, r14
    14e0:	02 e0       	ldi	r16, 0x02	; 2
    14e2:	06 93       	lac	Z, r16
    14e4:	0f c0       	rjmp	.+30     	; 0x1504 <udd_ep_trans_complet+0x1f0>
    14e6:	88 81       	ld	r24, Y
    14e8:	80 ff       	sbrs	r24, 0
    14ea:	0c c0       	rjmp	.+24     	; 0x1504 <udd_ep_trans_complet+0x1f0>
    14ec:	8e 7f       	andi	r24, 0xFE	; 254
    14ee:	88 83       	st	Y, r24
    14f0:	ef 81       	ldd	r30, Y+7	; 0x07
    14f2:	f8 85       	ldd	r31, Y+8	; 0x08
    14f4:	30 97       	sbiw	r30, 0x00	; 0
    14f6:	31 f0       	breq	.+12     	; 0x1504 <udd_ep_trans_complet+0x1f0>
    14f8:	6d 81       	ldd	r22, Y+5	; 0x05
    14fa:	7e 81       	ldd	r23, Y+6	; 0x06
    14fc:	4b 2d       	mov	r20, r11
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	09 95       	icall
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	08 95       	ret

00001518 <udd_is_high_speed>:
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	08 95       	ret

0000151c <udd_set_address>:
    151c:	80 93 c3 04 	sts	0x04C3, r24
    1520:	08 95       	ret

00001522 <udd_getaddress>:
    1522:	80 91 c3 04 	lds	r24, 0x04C3
    1526:	08 95       	ret

00001528 <udd_get_frame_number>:
    1528:	20 91 f0 21 	lds	r18, 0x21F0
    152c:	30 91 f1 21 	lds	r19, 0x21F1
    1530:	82 2f       	mov	r24, r18
    1532:	93 2f       	mov	r25, r19
    1534:	08 95       	ret

00001536 <udd_get_micro_frame_number>:
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	08 95       	ret

0000153c <udd_set_setup_payload>:
    153c:	80 93 ee 22 	sts	0x22EE, r24
    1540:	90 93 ef 22 	sts	0x22EF, r25
    1544:	60 93 f0 22 	sts	0x22F0, r22
    1548:	70 93 f1 22 	sts	0x22F1, r23
    154c:	08 95       	ret

0000154e <udd_ep_alloc>:
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	f8 2e       	mov	r15, r24
    155c:	e6 2e       	mov	r14, r22
    155e:	8a 01       	movw	r16, r20
    1560:	e6 dc       	rcall	.-1588   	; 0xf2e <udd_ep_get_ctrl>
    1562:	ec 01       	movw	r28, r24
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	80 7c       	andi	r24, 0xC0	; 192
    1568:	89 f4       	brne	.+34     	; 0x158c <udd_ep_alloc+0x3e>
    156a:	a8 01       	movw	r20, r16
    156c:	6e 2d       	mov	r22, r14
    156e:	8f 2d       	mov	r24, r15
    1570:	f7 dc       	rcall	.-1554   	; 0xf60 <udd_ep_init>
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	80 7c       	andi	r24, 0xC0	; 192
    1576:	80 3c       	cpi	r24, 0xC0	; 192
    1578:	21 f4       	brne	.+8      	; 0x1582 <udd_ep_alloc+0x34>
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	87 70       	andi	r24, 0x07	; 7
    157e:	87 30       	cpi	r24, 0x07	; 7
    1580:	39 f0       	breq	.+14     	; 0x1590 <udd_ep_alloc+0x42>
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	80 62       	ori	r24, 0x20	; 32
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <udd_ep_alloc+0x44>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <udd_ep_alloc+0x44>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	ff 90       	pop	r15
    159c:	ef 90       	pop	r14
    159e:	08 95       	ret

000015a0 <udd_ep_is_halted>:
    15a0:	c6 dc       	rcall	.-1652   	; 0xf2e <udd_ep_get_ctrl>
    15a2:	fc 01       	movw	r30, r24
    15a4:	81 81       	ldd	r24, Z+1	; 0x01
    15a6:	82 fb       	bst	r24, 2
    15a8:	88 27       	eor	r24, r24
    15aa:	80 f9       	bld	r24, 0
    15ac:	08 95       	ret

000015ae <udd_ep_clear_halt>:
    15ae:	cf 93       	push	r28
    15b0:	c8 2f       	mov	r28, r24
    15b2:	bd dc       	rcall	.-1670   	; 0xf2e <udd_ep_get_ctrl>
    15b4:	fc 01       	movw	r30, r24
    15b6:	81 81       	ldd	r24, Z+1	; 0x01
    15b8:	82 ff       	sbrs	r24, 2
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <udd_ep_clear_halt+0x2c>
    15bc:	81 81       	ldd	r24, Z+1	; 0x01
    15be:	8b 7f       	andi	r24, 0xFB	; 251
    15c0:	81 83       	std	Z+1, r24	; 0x01
    15c2:	8c 2f       	mov	r24, r28
    15c4:	13 de       	rcall	.-986    	; 0x11ec <udd_ep_get_job>
    15c6:	fc 01       	movw	r30, r24
    15c8:	80 81       	ld	r24, Z
    15ca:	80 ff       	sbrs	r24, 0
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <udd_ep_clear_halt+0x2c>
    15ce:	8e 7f       	andi	r24, 0xFE	; 254
    15d0:	80 83       	st	Z, r24
    15d2:	07 80       	ldd	r0, Z+7	; 0x07
    15d4:	f0 85       	ldd	r31, Z+8	; 0x08
    15d6:	e0 2d       	mov	r30, r0
    15d8:	09 95       	icall
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <udd_ep_run>:
    15e0:	8f 92       	push	r8
    15e2:	9f 92       	push	r9
    15e4:	af 92       	push	r10
    15e6:	bf 92       	push	r11
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	98 2e       	mov	r9, r24
    15fa:	86 2e       	mov	r8, r22
    15fc:	5a 01       	movw	r10, r20
    15fe:	69 01       	movw	r12, r18
    1600:	f5 dd       	rcall	.-1046   	; 0x11ec <udd_ep_get_job>
    1602:	7c 01       	movw	r14, r24
    1604:	89 2d       	mov	r24, r9
    1606:	93 dc       	rcall	.-1754   	; 0xf2e <udd_ep_get_ctrl>
    1608:	ec 01       	movw	r28, r24
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	80 7c       	andi	r24, 0xC0	; 192
    160e:	09 f4       	brne	.+2      	; 0x1612 <udd_ep_run+0x32>
    1610:	4d c0       	rjmp	.+154    	; 0x16ac <udd_ep_run+0xcc>
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	80 7c       	andi	r24, 0xC0	; 192
    1616:	80 3c       	cpi	r24, 0xC0	; 192
    1618:	19 f0       	breq	.+6      	; 0x1620 <udd_ep_run+0x40>
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	82 fd       	sbrc	r24, 2
    161e:	48 c0       	rjmp	.+144    	; 0x16b0 <udd_ep_run+0xd0>
    1620:	8f b7       	in	r24, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	f7 01       	movw	r30, r14
    1626:	90 81       	ld	r25, Z
    1628:	90 ff       	sbrs	r25, 0
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <udd_ep_run+0x52>
    162c:	8f bf       	out	0x3f, r24	; 63
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	40 c0       	rjmp	.+128    	; 0x16b2 <udd_ep_run+0xd2>
    1632:	f7 01       	movw	r30, r14
    1634:	90 81       	ld	r25, Z
    1636:	91 60       	ori	r25, 0x01	; 1
    1638:	90 83       	st	Z, r25
    163a:	8f bf       	out	0x3f, r24	; 63
    163c:	a1 82       	std	Z+1, r10	; 0x01
    163e:	b2 82       	std	Z+2, r11	; 0x02
    1640:	c3 82       	std	Z+3, r12	; 0x03
    1642:	d4 82       	std	Z+4, r13	; 0x04
    1644:	15 82       	std	Z+5, r1	; 0x05
    1646:	16 82       	std	Z+6, r1	; 0x06
    1648:	07 83       	std	Z+7, r16	; 0x07
    164a:	10 87       	std	Z+8, r17	; 0x08
    164c:	81 10       	cpse	r8, r1
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <udd_ep_run+0x80>
    1650:	21 e0       	ldi	r18, 0x01	; 1
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	c1 14       	cp	r12, r1
    1656:	d1 04       	cpc	r13, r1
    1658:	29 f0       	breq	.+10     	; 0x1664 <udd_ep_run+0x84>
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <udd_ep_run+0x84>
    1660:	21 e0       	ldi	r18, 0x01	; 1
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	f7 01       	movw	r30, r14
    1666:	80 81       	ld	r24, Z
    1668:	20 fb       	bst	r18, 0
    166a:	81 f9       	bld	r24, 1
    166c:	8b 7f       	andi	r24, 0xFB	; 251
    166e:	80 83       	st	Z, r24
    1670:	99 20       	and	r9, r9
    1672:	1c f4       	brge	.+6      	; 0x167a <udd_ep_run+0x9a>
    1674:	1e 82       	std	Y+6, r1	; 0x06
    1676:	1f 82       	std	Y+7, r1	; 0x07
    1678:	15 c0       	rjmp	.+42     	; 0x16a4 <udd_ep_run+0xc4>
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	80 7c       	andi	r24, 0xC0	; 192
    167e:	80 3c       	cpi	r24, 0xC0	; 192
    1680:	69 f4       	brne	.+26     	; 0x169c <udd_ep_run+0xbc>
    1682:	ce 01       	movw	r24, r28
    1684:	88 dd       	rcall	.-1264   	; 0x1196 <udd_ep_get_size>
    1686:	bc 01       	movw	r22, r24
    1688:	c6 01       	movw	r24, r12
    168a:	fa d1       	rcall	.+1012   	; 0x1a80 <__udivmodhi4>
    168c:	89 2b       	or	r24, r25
    168e:	31 f0       	breq	.+12     	; 0x169c <udd_ep_run+0xbc>
    1690:	f7 01       	movw	r30, r14
    1692:	80 81       	ld	r24, Z
    1694:	8e 7f       	andi	r24, 0xFE	; 254
    1696:	80 83       	st	Z, r24
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	0b c0       	rjmp	.+22     	; 0x16b2 <udd_ep_run+0xd2>
    169c:	1a 82       	std	Y+2, r1	; 0x02
    169e:	1b 82       	std	Y+3, r1	; 0x03
    16a0:	1e 82       	std	Y+6, r1	; 0x06
    16a2:	1f 82       	std	Y+7, r1	; 0x07
    16a4:	89 2d       	mov	r24, r9
    16a6:	36 de       	rcall	.-916    	; 0x1314 <udd_ep_trans_complet>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <udd_ep_run+0xd2>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <udd_ep_run+0xd2>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	9f 90       	pop	r9
    16c8:	8f 90       	pop	r8
    16ca:	08 95       	ret

000016cc <udd_ep_abort>:
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	18 2f       	mov	r17, r24
    16d6:	2b dc       	rcall	.-1962   	; 0xf2e <udd_ep_get_ctrl>
    16d8:	ec 01       	movw	r28, r24
    16da:	81 2f       	mov	r24, r17
    16dc:	87 dd       	rcall	.-1266   	; 0x11ec <udd_ep_get_job>
    16de:	dc 01       	movw	r26, r24
    16e0:	fe 01       	movw	r30, r28
    16e2:	02 e0       	ldi	r16, 0x02	; 2
    16e4:	05 93       	las	Z, r16
    16e6:	8c 91       	ld	r24, X
    16e8:	80 ff       	sbrs	r24, 0
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <udd_ep_abort+0x46>
    16ec:	8e 7f       	andi	r24, 0xFE	; 254
    16ee:	8c 93       	st	X, r24
    16f0:	17 96       	adiw	r26, 0x07	; 7
    16f2:	ed 91       	ld	r30, X+
    16f4:	fc 91       	ld	r31, X
    16f6:	18 97       	sbiw	r26, 0x08	; 8
    16f8:	30 97       	sbiw	r30, 0x00	; 0
    16fa:	59 f0       	breq	.+22     	; 0x1712 <udd_ep_abort+0x46>
    16fc:	11 23       	and	r17, r17
    16fe:	1c f4       	brge	.+6      	; 0x1706 <udd_ep_abort+0x3a>
    1700:	6e 81       	ldd	r22, Y+6	; 0x06
    1702:	7f 81       	ldd	r23, Y+7	; 0x07
    1704:	02 c0       	rjmp	.+4      	; 0x170a <udd_ep_abort+0x3e>
    1706:	6a 81       	ldd	r22, Y+2	; 0x02
    1708:	7b 81       	ldd	r23, Y+3	; 0x03
    170a:	41 2f       	mov	r20, r17
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	09 95       	icall
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <udd_ep_set_halt>:
    171c:	0f 93       	push	r16
    171e:	cf 93       	push	r28
    1720:	c8 2f       	mov	r28, r24
    1722:	05 dc       	rcall	.-2038   	; 0xf2e <udd_ep_get_ctrl>
    1724:	fc 01       	movw	r30, r24
    1726:	81 81       	ldd	r24, Z+1	; 0x01
    1728:	84 60       	ori	r24, 0x04	; 4
    172a:	81 83       	std	Z+1, r24	; 0x01
    172c:	01 e0       	ldi	r16, 0x01	; 1
    172e:	06 93       	lac	Z, r16
    1730:	8c 2f       	mov	r24, r28
    1732:	cc df       	rcall	.-104    	; 0x16cc <udd_ep_abort>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	cf 91       	pop	r28
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <udd_ep_free>:
    173c:	cf 93       	push	r28
    173e:	c8 2f       	mov	r28, r24
    1740:	c5 df       	rcall	.-118    	; 0x16cc <udd_ep_abort>
    1742:	8c 2f       	mov	r24, r28
    1744:	f4 db       	rcall	.-2072   	; 0xf2e <udd_ep_get_ctrl>
    1746:	fc 01       	movw	r30, r24
    1748:	11 82       	std	Z+1, r1	; 0x01
    174a:	cf 91       	pop	r28
    174c:	08 95       	ret

0000174e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	0b b6       	in	r0, 0x3b	; 59
    175a:	0f 92       	push	r0
    175c:	0f 93       	push	r16
    175e:	2f 93       	push	r18
    1760:	3f 93       	push	r19
    1762:	4f 93       	push	r20
    1764:	5f 93       	push	r21
    1766:	6f 93       	push	r22
    1768:	7f 93       	push	r23
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	af 93       	push	r26
    1770:	bf 93       	push	r27
    1772:	ef 93       	push	r30
    1774:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1776:	80 91 cb 04 	lds	r24, 0x04CB
    177a:	88 23       	and	r24, r24
    177c:	2c f4       	brge	.+10     	; 0x1788 <__vector_125+0x3a>
		udd_ack_start_of_frame_event();
    177e:	80 e8       	ldi	r24, 0x80	; 128
    1780:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1784:	cb d8       	rcall	.-3690   	; 0x91c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1786:	83 c0       	rjmp	.+262    	; 0x188e <__vector_125+0x140>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1788:	80 91 cb 04 	lds	r24, 0x04CB
    178c:	82 ff       	sbrs	r24, 2
    178e:	23 c0       	rjmp	.+70     	; 0x17d6 <__vector_125+0x88>
		udd_ack_underflow_event();
    1790:	84 e0       	ldi	r24, 0x04	; 4
    1792:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1796:	80 91 c8 21 	lds	r24, 0x21C8
    179a:	86 ff       	sbrs	r24, 6
    179c:	78 c0       	rjmp	.+240    	; 0x188e <__vector_125+0x140>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    179e:	80 91 cc 04 	lds	r24, 0x04CC
    17a2:	81 fd       	sbrc	r24, 1
    17a4:	74 c0       	rjmp	.+232    	; 0x188e <__vector_125+0x140>
    17a6:	40 dd       	rcall	.-1408   	; 0x1228 <udd_ctrl_interrupt_tc_setup>
    17a8:	81 11       	cpse	r24, r1
    17aa:	71 c0       	rjmp	.+226    	; 0x188e <__vector_125+0x140>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    17ac:	80 91 d9 22 	lds	r24, 0x22D9
    17b0:	90 91 da 22 	lds	r25, 0x22DA
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	11 f4       	brne	.+4      	; 0x17be <__vector_125+0x70>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    17ba:	5d dc       	rcall	.-1862   	; 0x1076 <udd_ctrl_send_zlp_in>
    17bc:	68 c0       	rjmp	.+208    	; 0x188e <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    17be:	04 97       	sbiw	r24, 0x04	; 4
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <__vector_125+0x76>
    17c2:	65 c0       	rjmp	.+202    	; 0x188e <__vector_125+0x140>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    17c4:	e9 ec       	ldi	r30, 0xC9	; 201
    17c6:	f1 e2       	ldi	r31, 0x21	; 33
    17c8:	04 e0       	ldi	r16, 0x04	; 4
    17ca:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    17cc:	e1 ec       	ldi	r30, 0xC1	; 193
    17ce:	f1 e2       	ldi	r31, 0x21	; 33
    17d0:	04 e0       	ldi	r16, 0x04	; 4
    17d2:	05 93       	las	Z, r16
    17d4:	5c c0       	rjmp	.+184    	; 0x188e <__vector_125+0x140>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    17d6:	80 91 cb 04 	lds	r24, 0x04CB
    17da:	81 ff       	sbrs	r24, 1
    17dc:	53 c0       	rjmp	.+166    	; 0x1884 <__vector_125+0x136>
		udd_ack_overflow_event();
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    17e4:	80 91 c0 21 	lds	r24, 0x21C0
    17e8:	86 ff       	sbrs	r24, 6
    17ea:	51 c0       	rjmp	.+162    	; 0x188e <__vector_125+0x140>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    17ec:	80 91 cc 04 	lds	r24, 0x04CC
    17f0:	81 fd       	sbrc	r24, 1
    17f2:	4d c0       	rjmp	.+154    	; 0x188e <__vector_125+0x140>
    17f4:	19 dd       	rcall	.-1486   	; 0x1228 <udd_ctrl_interrupt_tc_setup>
    17f6:	81 11       	cpse	r24, r1
    17f8:	4a c0       	rjmp	.+148    	; 0x188e <__vector_125+0x140>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    17fa:	80 91 d9 22 	lds	r24, 0x22D9
    17fe:	90 91 da 22 	lds	r25, 0x22DA
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	91 05       	cpc	r25, r1
    1806:	11 f4       	brne	.+4      	; 0x180c <__vector_125+0xbe>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    1808:	47 dc       	rcall	.-1906   	; 0x1098 <udd_ctrl_send_zlp_out>
    180a:	41 c0       	rjmp	.+130    	; 0x188e <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    180c:	03 97       	sbiw	r24, 0x03	; 3
    180e:	09 f0       	breq	.+2      	; 0x1812 <__vector_125+0xc4>
    1810:	3e c0       	rjmp	.+124    	; 0x188e <__vector_125+0x140>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1812:	e9 ec       	ldi	r30, 0xC9	; 201
    1814:	f1 e2       	ldi	r31, 0x21	; 33
    1816:	04 e0       	ldi	r16, 0x04	; 4
    1818:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    181a:	e1 ec       	ldi	r30, 0xC1	; 193
    181c:	f1 e2       	ldi	r31, 0x21	; 33
    181e:	04 e0       	ldi	r16, 0x04	; 4
    1820:	05 93       	las	Z, r16
    1822:	35 c0       	rjmp	.+106    	; 0x188e <__vector_125+0x140>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1824:	80 e1       	ldi	r24, 0x10	; 16
    1826:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	4f df       	rcall	.-354    	; 0x16cc <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    182e:	81 e8       	ldi	r24, 0x81	; 129
    1830:	4d df       	rcall	.-358    	; 0x16cc <udd_ep_abort>
		}
#endif
		udc_reset();
    1832:	4d d8       	rcall	.-3942   	; 0x8ce <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1834:	10 92 c3 04 	sts	0x04C3, r1
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    1838:	40 e4       	ldi	r20, 0x40	; 64
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	8f db       	rcall	.-2274   	; 0xf60 <udd_ep_init>
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    1842:	40 e4       	ldi	r20, 0x40	; 64
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	80 e8       	ldi	r24, 0x80	; 128
    184a:	8a db       	rcall	.-2284   	; 0xf60 <udd_ep_init>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    184c:	89 e9       	ldi	r24, 0x99	; 153
    184e:	92 e2       	ldi	r25, 0x22	; 34
    1850:	80 93 c4 21 	sts	0x21C4, r24
    1854:	90 93 c5 21 	sts	0x21C5, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1858:	d0 db       	rcall	.-2144   	; 0xffa <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    185a:	19 c0       	rjmp	.+50     	; 0x188e <__vector_125+0x140>
	}

	if (udd_is_suspend_event()) {
    185c:	80 91 cb 04 	lds	r24, 0x04CB
    1860:	86 ff       	sbrs	r24, 6
    1862:	06 c0       	rjmp	.+12     	; 0x1870 <__vector_125+0x122>
		udd_ack_suspend_event();
    1864:	80 e4       	ldi	r24, 0x40	; 64
    1866:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	41 db       	rcall	.-2430   	; 0xef0 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    186e:	0f c0       	rjmp	.+30     	; 0x188e <__vector_125+0x140>
	}

	if (udd_is_resume_event()) {
    1870:	80 91 cb 04 	lds	r24, 0x04CB
    1874:	85 ff       	sbrs	r24, 5
    1876:	0b c0       	rjmp	.+22     	; 0x188e <__vector_125+0x140>
		udd_ack_resume_event();
    1878:	80 e2       	ldi	r24, 0x20	; 32
    187a:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	37 db       	rcall	.-2450   	; 0xef0 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1882:	05 c0       	rjmp	.+10     	; 0x188e <__vector_125+0x140>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1884:	80 91 cb 04 	lds	r24, 0x04CB
    1888:	84 fd       	sbrc	r24, 4
    188a:	cc cf       	rjmp	.-104    	; 0x1824 <__vector_125+0xd6>
    188c:	e7 cf       	rjmp	.-50     	; 0x185c <__vector_125+0x10e>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 91       	pop	r16
    18a8:	0f 90       	pop	r0
    18aa:	0b be       	out	0x3b, r0	; 59
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	0b b6       	in	r0, 0x3b	; 59
    18c2:	0f 92       	push	r0
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    18e4:	80 91 cc 04 	lds	r24, 0x04CC
    18e8:	81 fd       	sbrc	r24, 1
    18ea:	03 c0       	rjmp	.+6      	; 0x18f2 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    18ec:	9d dc       	rcall	.-1734   	; 0x1228 <udd_ctrl_interrupt_tc_setup>
    18ee:	81 11       	cpse	r24, r1
    18f0:	ac c0       	rjmp	.+344    	; 0x1a4a <__vector_126+0x194>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    18f8:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    18fc:	81 95       	neg	r24
    18fe:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1900:	e0 ec       	ldi	r30, 0xC0	; 192
    1902:	f1 e2       	ldi	r31, 0x21	; 33
    1904:	e8 1b       	sub	r30, r24
    1906:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1908:	20 81       	ld	r18, Z
    190a:	31 81       	ldd	r19, Z+1	; 0x01
    190c:	20 5c       	subi	r18, 0xC0	; 192
    190e:	31 42       	sbci	r19, 0x21	; 33
    1910:	36 95       	lsr	r19
    1912:	27 95       	ror	r18
    1914:	36 95       	lsr	r19
    1916:	27 95       	ror	r18
    1918:	36 95       	lsr	r19
    191a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    191c:	82 2f       	mov	r24, r18
    191e:	86 95       	lsr	r24
    1920:	20 ff       	sbrs	r18, 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <__vector_126+0x72>
    1924:	c0 e8       	ldi	r28, 0x80	; 128
    1926:	01 c0       	rjmp	.+2      	; 0x192a <__vector_126+0x74>
    1928:	c0 e0       	ldi	r28, 0x00	; 0
    192a:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    192c:	8c 2f       	mov	r24, r28
    192e:	ff da       	rcall	.-2562   	; 0xf2e <udd_ep_get_ctrl>
    1930:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1932:	80 81       	ld	r24, Z
    1934:	85 ff       	sbrs	r24, 5
    1936:	89 c0       	rjmp	.+274    	; 0x1a4a <__vector_126+0x194>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1938:	00 e2       	ldi	r16, 0x20	; 32
    193a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    193c:	c1 11       	cpse	r28, r1
    193e:	7f c0       	rjmp	.+254    	; 0x1a3e <__vector_126+0x188>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1940:	80 91 d9 22 	lds	r24, 0x22D9
    1944:	90 91 da 22 	lds	r25, 0x22DA
    1948:	04 97       	sbiw	r24, 0x04	; 4
    194a:	19 f4       	brne	.+6      	; 0x1952 <__vector_126+0x9c>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    194c:	b2 db       	rcall	.-2204   	; 0x10b2 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    194e:	55 db       	rcall	.-2390   	; 0xffa <udd_ctrl_init>
    1950:	7c c0       	rjmp	.+248    	; 0x1a4a <__vector_126+0x194>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1952:	c0 91 c2 21 	lds	r28, 0x21C2
    1956:	d0 91 c3 21 	lds	r29, 0x21C3

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    195a:	80 91 f0 22 	lds	r24, 0x22F0
    195e:	90 91 f1 22 	lds	r25, 0x22F1
    1962:	00 91 dd 22 	lds	r16, 0x22DD
    1966:	10 91 de 22 	lds	r17, 0x22DE
    196a:	98 01       	movw	r18, r16
    196c:	2c 0f       	add	r18, r28
    196e:	3d 1f       	adc	r19, r29
    1970:	82 17       	cp	r24, r18
    1972:	93 07       	cpc	r25, r19
    1974:	18 f4       	brcc	.+6      	; 0x197c <__vector_126+0xc6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1976:	ec 01       	movw	r28, r24
    1978:	c0 1b       	sub	r28, r16
    197a:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    197c:	20 91 ee 22 	lds	r18, 0x22EE
    1980:	30 91 ef 22 	lds	r19, 0x22EF
    1984:	20 0f       	add	r18, r16
    1986:	31 1f       	adc	r19, r17
    1988:	89 e9       	ldi	r24, 0x99	; 153
    198a:	92 e2       	ldi	r25, 0x22	; 34
    198c:	4c 2f       	mov	r20, r28
    198e:	5d 2f       	mov	r21, r29
    1990:	68 2f       	mov	r22, r24
    1992:	79 2f       	mov	r23, r25
    1994:	82 2f       	mov	r24, r18
    1996:	93 2f       	mov	r25, r19
    1998:	87 d0       	rcall	.+270    	; 0x1aa8 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    199a:	0c 0f       	add	r16, r28
    199c:	1d 1f       	adc	r17, r29
    199e:	00 93 dd 22 	sts	0x22DD, r16
    19a2:	10 93 de 22 	sts	0x22DE, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    19a6:	c0 34       	cpi	r28, 0x40	; 64
    19a8:	d1 05       	cpc	r29, r1
    19aa:	69 f4       	brne	.+26     	; 0x19c6 <__vector_126+0x110>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    19ac:	80 91 db 22 	lds	r24, 0x22DB
    19b0:	90 91 dc 22 	lds	r25, 0x22DC
    19b4:	80 0f       	add	r24, r16
    19b6:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    19b8:	20 91 ec 22 	lds	r18, 0x22EC
    19bc:	30 91 ed 22 	lds	r19, 0x22ED
    19c0:	82 17       	cp	r24, r18
    19c2:	93 07       	cpc	r25, r19
    19c4:	88 f0       	brcs	.+34     	; 0x19e8 <__vector_126+0x132>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    19c6:	00 93 f0 22 	sts	0x22F0, r16
    19ca:	10 93 f1 22 	sts	0x22F1, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    19ce:	e0 91 f4 22 	lds	r30, 0x22F4
    19d2:	f0 91 f5 22 	lds	r31, 0x22F5
    19d6:	30 97       	sbiw	r30, 0x00	; 0
    19d8:	29 f0       	breq	.+10     	; 0x19e4 <__vector_126+0x12e>
			if (!udd_g_ctrlreq.over_under_run()) {
    19da:	09 95       	icall
    19dc:	81 11       	cpse	r24, r1
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <__vector_126+0x12e>
				// Stall ZLP
				udd_ctrl_stall_data();
    19e0:	39 db       	rcall	.-2446   	; 0x1054 <udd_ctrl_stall_data>
    19e2:	33 c0       	rjmp	.+102    	; 0x1a4a <__vector_126+0x194>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    19e4:	48 db       	rcall	.-2416   	; 0x1076 <udd_ctrl_send_zlp_in>
    19e6:	31 c0       	rjmp	.+98     	; 0x1a4a <__vector_126+0x194>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    19e8:	80 91 f0 22 	lds	r24, 0x22F0
    19ec:	90 91 f1 22 	lds	r25, 0x22F1
    19f0:	08 17       	cp	r16, r24
    19f2:	19 07       	cpc	r17, r25
    19f4:	f9 f4       	brne	.+62     	; 0x1a34 <__vector_126+0x17e>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    19f6:	e0 91 f4 22 	lds	r30, 0x22F4
    19fa:	f0 91 f5 22 	lds	r31, 0x22F5
    19fe:	30 97       	sbiw	r30, 0x00	; 0
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <__vector_126+0x150>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1a02:	28 db       	rcall	.-2480   	; 0x1054 <udd_ctrl_stall_data>
    1a04:	22 c0       	rjmp	.+68     	; 0x1a4a <__vector_126+0x194>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1a06:	09 95       	icall
    1a08:	81 11       	cpse	r24, r1
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <__vector_126+0x15a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1a0c:	23 db       	rcall	.-2490   	; 0x1054 <udd_ctrl_stall_data>
    1a0e:	1d c0       	rjmp	.+58     	; 0x1a4a <__vector_126+0x194>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1a10:	20 91 db 22 	lds	r18, 0x22DB
    1a14:	30 91 dc 22 	lds	r19, 0x22DC
    1a18:	80 91 dd 22 	lds	r24, 0x22DD
    1a1c:	90 91 de 22 	lds	r25, 0x22DE
    1a20:	82 0f       	add	r24, r18
    1a22:	93 1f       	adc	r25, r19
    1a24:	80 93 db 22 	sts	0x22DB, r24
    1a28:	90 93 dc 22 	sts	0x22DC, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1a2c:	10 92 dd 22 	sts	0x22DD, r1
    1a30:	10 92 de 22 	sts	0x22DE, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1a34:	e0 ec       	ldi	r30, 0xC0	; 192
    1a36:	f1 e2       	ldi	r31, 0x21	; 33
    1a38:	02 e0       	ldi	r16, 0x02	; 2
    1a3a:	06 93       	lac	Z, r16
    1a3c:	06 c0       	rjmp	.+12     	; 0x1a4a <__vector_126+0x194>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1a3e:	c0 38       	cpi	r28, 0x80	; 128
    1a40:	11 f4       	brne	.+4      	; 0x1a46 <__vector_126+0x190>
		udd_ctrl_in_sent();
    1a42:	3f db       	rcall	.-2434   	; 0x10c2 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <__vector_126+0x194>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1a46:	8c 2f       	mov	r24, r28
    1a48:	65 dc       	rcall	.-1846   	; 0x1314 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1a4a:	ff 91       	pop	r31
    1a4c:	ef 91       	pop	r30
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	bf 91       	pop	r27
    1a54:	af 91       	pop	r26
    1a56:	9f 91       	pop	r25
    1a58:	8f 91       	pop	r24
    1a5a:	7f 91       	pop	r23
    1a5c:	6f 91       	pop	r22
    1a5e:	5f 91       	pop	r21
    1a60:	4f 91       	pop	r20
    1a62:	3f 91       	pop	r19
    1a64:	2f 91       	pop	r18
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	0f 90       	pop	r0
    1a6c:	0b be       	out	0x3b, r0	; 59
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <main>:
#include <asf.h>
#include <stdio_usb.h>

int main (void)
{
	board_init();
    1a78:	f3 d9       	rcall	.-3098   	; 0xe60 <board_init>

	// Insert application code here, after the board has been initialized.
}
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	08 95       	ret

00001a80 <__udivmodhi4>:
    1a80:	aa 1b       	sub	r26, r26
    1a82:	bb 1b       	sub	r27, r27
    1a84:	51 e1       	ldi	r21, 0x11	; 17
    1a86:	07 c0       	rjmp	.+14     	; 0x1a96 <__udivmodhi4_ep>

00001a88 <__udivmodhi4_loop>:
    1a88:	aa 1f       	adc	r26, r26
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	a6 17       	cp	r26, r22
    1a8e:	b7 07       	cpc	r27, r23
    1a90:	10 f0       	brcs	.+4      	; 0x1a96 <__udivmodhi4_ep>
    1a92:	a6 1b       	sub	r26, r22
    1a94:	b7 0b       	sbc	r27, r23

00001a96 <__udivmodhi4_ep>:
    1a96:	88 1f       	adc	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	5a 95       	dec	r21
    1a9c:	a9 f7       	brne	.-22     	; 0x1a88 <__udivmodhi4_loop>
    1a9e:	80 95       	com	r24
    1aa0:	90 95       	com	r25
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	08 95       	ret

00001aa8 <memcpy>:
    1aa8:	fb 01       	movw	r30, r22
    1aaa:	dc 01       	movw	r26, r24
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <memcpy+0xa>
    1aae:	01 90       	ld	r0, Z+
    1ab0:	0d 92       	st	X+, r0
    1ab2:	41 50       	subi	r20, 0x01	; 1
    1ab4:	50 40       	sbci	r21, 0x00	; 0
    1ab6:	d8 f7       	brcc	.-10     	; 0x1aae <memcpy+0x6>
    1ab8:	08 95       	ret

00001aba <_exit>:
    1aba:	f8 94       	cli

00001abc <__stop_program>:
    1abc:	ff cf       	rjmp	.-2      	; 0x1abc <__stop_program>
